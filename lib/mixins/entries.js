"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
function getFile(filePath) {
    return this.entries.getFile(filePath);
}
function getBNF() {
    return this.entries.getBNF();
}
function getFiles() {
    return this.entries.getFiles();
}
function getTermBNF() {
    return this.entriees.getTermBNF();
}
function getVersion() {
    return this.entries.getVersion();
}
function getPattern() {
    return this.entries.getPattern();
}
function getFilePaths() {
    return this.entries.getFilePaths();
}
function getRepository() {
    return this.entries.getRepository();
}
function getReadmeFile() {
    return this.entries.getReadmeFile();
}
function getTypePattern() {
    return this.entries.getTypePattern();
}
function getStatementBNF() {
    return this.entriees.getStatementBNF();
}
function getDependencies() {
    return this.entries.getDependencies();
}
function getMetaJSONFile() {
    return this.entries.getMetaJSONFile();
}
function getSymbolPattern() {
    return this.entries.getSymbolPattern();
}
function getFlorenceFiles() {
    return this.entries.getFlorenceFiles();
}
function getDirectoryPaths() {
    return this.entries.getDirectoryPaths();
}
function getOperatorPattern() {
    return this.entries.getOperatorPattern();
}
function getDependencyNames() {
    return this.entries.getDependencyNames();
}
function getMetastatementBNF() {
    return this.entriees.getMetastatementBNF();
}
function getCustomGrammarBNFFiles() {
    return this.entries.getCustomGrammarBNFFiles();
}
function getCustomGrammarPatternFiles() {
    return this.entries.getCustomGrammarPatternFiles();
}
var entriesMixins = {
    getFile: getFile,
    getBNF: getBNF,
    getFiles: getFiles,
    getTermBNF: getTermBNF,
    getVersion: getVersion,
    getPattern: getPattern,
    getFilePaths: getFilePaths,
    getRepository: getRepository,
    getReadmeFile: getReadmeFile,
    getTypePattern: getTypePattern,
    getStatementBNF: getStatementBNF,
    getDependencies: getDependencies,
    getMetaJSONFile: getMetaJSONFile,
    getSymbolPattern: getSymbolPattern,
    getFlorenceFiles: getFlorenceFiles,
    getDirectoryPaths: getDirectoryPaths,
    getOperatorPattern: getOperatorPattern,
    getDependencyNames: getDependencyNames,
    getMetastatementBNF: getMetastatementBNF,
    getCustomGrammarBNFFiles: getCustomGrammarBNFFiles,
    getCustomGrammarPatternFiles: getCustomGrammarPatternFiles
};
var _default = entriesMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZ2V0RmlsZShmaWxlUGF0aCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzLmdldEZpbGUoZmlsZVBhdGgpOyB9XG5cbmZ1bmN0aW9uIGdldEJORigpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRCTkYoKTsgfVxuXG5mdW5jdGlvbiBnZXRGaWxlcygpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRGaWxlcygpOyB9XG5cbmZ1bmN0aW9uIGdldFRlcm1CTkYoKSB7IHJldHVybiB0aGlzLmVudHJpZWVzLmdldFRlcm1CTkYoKTsgfVxuXG5mdW5jdGlvbiBnZXRWZXJzaW9uKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzLmdldFZlcnNpb24oKTsgfVxuXG5mdW5jdGlvbiBnZXRQYXR0ZXJuKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzLmdldFBhdHRlcm4oKTsgfVxuXG5mdW5jdGlvbiBnZXRGaWxlUGF0aHMoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0RmlsZVBhdGhzKCk7IH1cblxuZnVuY3Rpb24gZ2V0UmVwb3NpdG9yeSgpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRSZXBvc2l0b3J5KCk7IH1cblxuZnVuY3Rpb24gZ2V0UmVhZG1lRmlsZSgpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRSZWFkbWVGaWxlKCk7IH1cblxuZnVuY3Rpb24gZ2V0VHlwZVBhdHRlcm4oKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0VHlwZVBhdHRlcm4oKTsgfVxuXG5mdW5jdGlvbiBnZXRTdGF0ZW1lbnRCTkYoKSB7IHJldHVybiB0aGlzLmVudHJpZWVzLmdldFN0YXRlbWVudEJORigpOyB9XG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY2llcygpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXREZXBlbmRlbmNpZXMoKTsgfVxuXG5mdW5jdGlvbiBnZXRNZXRhSlNPTkZpbGUoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0TWV0YUpTT05GaWxlKCk7IH1cblxuZnVuY3Rpb24gZ2V0U3ltYm9sUGF0dGVybigpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRTeW1ib2xQYXR0ZXJuKCk7IH1cblxuZnVuY3Rpb24gZ2V0RmxvcmVuY2VGaWxlcygpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRGbG9yZW5jZUZpbGVzKCk7IH1cblxuZnVuY3Rpb24gZ2V0RGlyZWN0b3J5UGF0aHMoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0RGlyZWN0b3J5UGF0aHMoKTsgfVxuXG5mdW5jdGlvbiBnZXRPcGVyYXRvclBhdHRlcm4oKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0T3BlcmF0b3JQYXR0ZXJuKCk7IH1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jeU5hbWVzKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzLmdldERlcGVuZGVuY3lOYW1lcygpOyB9XG5cbmZ1bmN0aW9uIGdldE1ldGFzdGF0ZW1lbnRCTkYoKSB7IHJldHVybiB0aGlzLmVudHJpZWVzLmdldE1ldGFzdGF0ZW1lbnRCTkYoKTsgfVxuXG5mdW5jdGlvbiBnZXRDdXN0b21HcmFtbWFyQk5GRmlsZXMoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0Q3VzdG9tR3JhbW1hckJORkZpbGVzKCk7IH1cblxuZnVuY3Rpb24gZ2V0Q3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcygpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRDdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzKCk7IH1cblxuXG5jb25zdCBlbnRyaWVzTWl4aW5zID0ge1xuICBnZXRGaWxlLFxuICBnZXRCTkYsXG4gIGdldEZpbGVzLFxuICBnZXRUZXJtQk5GLFxuICBnZXRWZXJzaW9uLFxuICBnZXRQYXR0ZXJuLFxuICBnZXRGaWxlUGF0aHMsXG4gIGdldFJlcG9zaXRvcnksXG4gIGdldFJlYWRtZUZpbGUsXG4gIGdldFR5cGVQYXR0ZXJuLFxuICBnZXRTdGF0ZW1lbnRCTkYsXG4gIGdldERlcGVuZGVuY2llcyxcbiAgZ2V0TWV0YUpTT05GaWxlLFxuICBnZXRTeW1ib2xQYXR0ZXJuLFxuICBnZXRGbG9yZW5jZUZpbGVzLFxuICBnZXREaXJlY3RvcnlQYXRocyxcbiAgZ2V0T3BlcmF0b3JQYXR0ZXJuLFxuICBnZXREZXBlbmRlbmN5TmFtZXMsXG4gIGdldE1ldGFzdGF0ZW1lbnRCTkYsXG4gIGdldEN1c3RvbUdyYW1tYXJCTkZGaWxlcyxcbiAgZ2V0Q3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZW50cmllc01peGlucztcbiJdLCJuYW1lcyI6WyJnZXRGaWxlIiwiZmlsZVBhdGgiLCJlbnRyaWVzIiwiZ2V0Qk5GIiwiZ2V0RmlsZXMiLCJnZXRUZXJtQk5GIiwiZW50cmllZXMiLCJnZXRWZXJzaW9uIiwiZ2V0UGF0dGVybiIsImdldEZpbGVQYXRocyIsImdldFJlcG9zaXRvcnkiLCJnZXRSZWFkbWVGaWxlIiwiZ2V0VHlwZVBhdHRlcm4iLCJnZXRTdGF0ZW1lbnRCTkYiLCJnZXREZXBlbmRlbmNpZXMiLCJnZXRNZXRhSlNPTkZpbGUiLCJnZXRTeW1ib2xQYXR0ZXJuIiwiZ2V0RmxvcmVuY2VGaWxlcyIsImdldERpcmVjdG9yeVBhdGhzIiwiZ2V0T3BlcmF0b3JQYXR0ZXJuIiwiZ2V0RGVwZW5kZW5jeU5hbWVzIiwiZ2V0TWV0YXN0YXRlbWVudEJORiIsImdldEN1c3RvbUdyYW1tYXJCTkZGaWxlcyIsImdldEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMiLCJlbnRyaWVzTWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFxRUE7OztlQUFBOzs7QUFuRUEsU0FBU0EsUUFBUUMsUUFBUSxFQUFFO0lBQUUsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0YsT0FBTyxDQUFDQztBQUFXO0FBRXBFLFNBQVNFLFNBQVM7SUFBRSxPQUFPLElBQUksQ0FBQ0QsT0FBTyxDQUFDQyxNQUFNO0FBQUk7QUFFbEQsU0FBU0MsV0FBVztJQUFFLE9BQU8sSUFBSSxDQUFDRixPQUFPLENBQUNFLFFBQVE7QUFBSTtBQUV0RCxTQUFTQyxhQUFhO0lBQUUsT0FBTyxJQUFJLENBQUNDLFFBQVEsQ0FBQ0QsVUFBVTtBQUFJO0FBRTNELFNBQVNFLGFBQWE7SUFBRSxPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDSyxVQUFVO0FBQUk7QUFFMUQsU0FBU0MsYUFBYTtJQUFFLE9BQU8sSUFBSSxDQUFDTixPQUFPLENBQUNNLFVBQVU7QUFBSTtBQUUxRCxTQUFTQyxlQUFlO0lBQUUsT0FBTyxJQUFJLENBQUNQLE9BQU8sQ0FBQ08sWUFBWTtBQUFJO0FBRTlELFNBQVNDLGdCQUFnQjtJQUFFLE9BQU8sSUFBSSxDQUFDUixPQUFPLENBQUNRLGFBQWE7QUFBSTtBQUVoRSxTQUFTQyxnQkFBZ0I7SUFBRSxPQUFPLElBQUksQ0FBQ1QsT0FBTyxDQUFDUyxhQUFhO0FBQUk7QUFFaEUsU0FBU0MsaUJBQWlCO0lBQUUsT0FBTyxJQUFJLENBQUNWLE9BQU8sQ0FBQ1UsY0FBYztBQUFJO0FBRWxFLFNBQVNDLGtCQUFrQjtJQUFFLE9BQU8sSUFBSSxDQUFDUCxRQUFRLENBQUNPLGVBQWU7QUFBSTtBQUVyRSxTQUFTQyxrQkFBa0I7SUFBRSxPQUFPLElBQUksQ0FBQ1osT0FBTyxDQUFDWSxlQUFlO0FBQUk7QUFFcEUsU0FBU0Msa0JBQWtCO0lBQUUsT0FBTyxJQUFJLENBQUNiLE9BQU8sQ0FBQ2EsZUFBZTtBQUFJO0FBRXBFLFNBQVNDLG1CQUFtQjtJQUFFLE9BQU8sSUFBSSxDQUFDZCxPQUFPLENBQUNjLGdCQUFnQjtBQUFJO0FBRXRFLFNBQVNDLG1CQUFtQjtJQUFFLE9BQU8sSUFBSSxDQUFDZixPQUFPLENBQUNlLGdCQUFnQjtBQUFJO0FBRXRFLFNBQVNDLG9CQUFvQjtJQUFFLE9BQU8sSUFBSSxDQUFDaEIsT0FBTyxDQUFDZ0IsaUJBQWlCO0FBQUk7QUFFeEUsU0FBU0MscUJBQXFCO0lBQUUsT0FBTyxJQUFJLENBQUNqQixPQUFPLENBQUNpQixrQkFBa0I7QUFBSTtBQUUxRSxTQUFTQyxxQkFBcUI7SUFBRSxPQUFPLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ2tCLGtCQUFrQjtBQUFJO0FBRTFFLFNBQVNDLHNCQUFzQjtJQUFFLE9BQU8sSUFBSSxDQUFDZixRQUFRLENBQUNlLG1CQUFtQjtBQUFJO0FBRTdFLFNBQVNDLDJCQUEyQjtJQUFFLE9BQU8sSUFBSSxDQUFDcEIsT0FBTyxDQUFDb0Isd0JBQXdCO0FBQUk7QUFFdEYsU0FBU0MsK0JBQStCO0lBQUUsT0FBTyxJQUFJLENBQUNyQixPQUFPLENBQUNxQiw0QkFBNEI7QUFBSTtBQUc5RixJQUFNQyxnQkFBZ0I7SUFDcEJ4QixTQUFBQTtJQUNBRyxRQUFBQTtJQUNBQyxVQUFBQTtJQUNBQyxZQUFBQTtJQUNBRSxZQUFBQTtJQUNBQyxZQUFBQTtJQUNBQyxjQUFBQTtJQUNBQyxlQUFBQTtJQUNBQyxlQUFBQTtJQUNBQyxnQkFBQUE7SUFDQUMsaUJBQUFBO0lBQ0FDLGlCQUFBQTtJQUNBQyxpQkFBQUE7SUFDQUMsa0JBQUFBO0lBQ0FDLGtCQUFBQTtJQUNBQyxtQkFBQUE7SUFDQUMsb0JBQUFBO0lBQ0FDLG9CQUFBQTtJQUNBQyxxQkFBQUE7SUFDQUMsMEJBQUFBO0lBQ0FDLDhCQUFBQTtBQUNGO0lBRUEsV0FBZUMifQ==