"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
function forEachFile(callback) {
    return this.entries.forEachFile(callback);
}
function findFile(filePath) {
    return this.entries.findFile(filePath);
}
function getBNF() {
    return this.entries.getBNF();
}
function getFiles() {
    return this.entries.getFiles();
}
function getTermBNF() {
    return this.entries.getTermBNF();
}
function getVersion() {
    return this.entries.getVersion();
}
function getFilePaths() {
    return this.entries.getFilePaths();
}
function getVocabulary() {
    return this.entries.getVocabulary();
}
function getRepository() {
    return this.entries.getRepository();
}
function getReadmeFile() {
    return this.entries.getReadmeFile();
}
function getStatementBNF() {
    return this.entries.getStatementBNF();
}
function getDependencies() {
    return this.entries.getDependencies();
}
function getTypeVocabulary() {
    return this.entries.getTypeVocabulary();
}
function getSymbolVocabulary() {
    return this.entries.getSymbolVocabulary();
}
function getMetaJSONFile() {
    return this.entries.getMetaJSONFile();
}
function getFurtleFiles() {
    return this.entries.getFurtleFiles();
}
function getNominalFiles() {
    return this.entries.getNominalFiles();
}
function getDirectoryPaths() {
    return this.entries.getDirectoryPaths();
}
function getDependencyNames() {
    return this.entries.getDependencyNames();
}
function getCustomGrammarBNFFiles() {
    return this.entries.getCustomGrammarBNFFiles();
}
function getCustomGrammarVocabularyFiles() {
    return this.entries.getCustomGrammarVocabularyFiles();
}
var entriesMixins = {
    forEachFile: forEachFile,
    findFile: findFile,
    getBNF: getBNF,
    getFiles: getFiles,
    getTermBNF: getTermBNF,
    getVersion: getVersion,
    getFilePaths: getFilePaths,
    getVocabulary: getVocabulary,
    getRepository: getRepository,
    getReadmeFile: getReadmeFile,
    getStatementBNF: getStatementBNF,
    getDependencies: getDependencies,
    getTypeVocabulary: getTypeVocabulary,
    getSymbolVocabulary: getSymbolVocabulary,
    getMetaJSONFile: getMetaJSONFile,
    getFurtleFiles: getFurtleFiles,
    getNominalFiles: getNominalFiles,
    getDirectoryPaths: getDirectoryPaths,
    getDependencyNames: getDependencyNames,
    getCustomGrammarBNFFiles: getCustomGrammarBNFFiles,
    getCustomGrammarVocabularyFiles: getCustomGrammarVocabularyFiles
};
var _default = entriesMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZm9yRWFjaEZpbGUoY2FsbGJhY2spIHsgcmV0dXJuIHRoaXMuZW50cmllcy5mb3JFYWNoRmlsZShjYWxsYmFjayk7IH1cblxuZnVuY3Rpb24gZmluZEZpbGUoZmlsZVBhdGgpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5maW5kRmlsZShmaWxlUGF0aCk7IH1cblxuZnVuY3Rpb24gZ2V0Qk5GKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzLmdldEJORigpOyB9XG5cbmZ1bmN0aW9uIGdldEZpbGVzKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzLmdldEZpbGVzKCk7IH1cblxuZnVuY3Rpb24gZ2V0VGVybUJORigpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRUZXJtQk5GKCk7IH1cblxuZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRWZXJzaW9uKCk7IH1cblxuZnVuY3Rpb24gZ2V0RmlsZVBhdGhzKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzLmdldEZpbGVQYXRocygpOyB9XG5cbmZ1bmN0aW9uIGdldFZvY2FidWxhcnkoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0Vm9jYWJ1bGFyeSgpOyB9XG5cbmZ1bmN0aW9uIGdldFJlcG9zaXRvcnkoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0UmVwb3NpdG9yeSgpOyB9XG5cbmZ1bmN0aW9uIGdldFJlYWRtZUZpbGUoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0UmVhZG1lRmlsZSgpOyB9XG5cbmZ1bmN0aW9uIGdldFN0YXRlbWVudEJORigpIHsgcmV0dXJuIHRoaXMuZW50cmllcy5nZXRTdGF0ZW1lbnRCTkYoKTsgfVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0RGVwZW5kZW5jaWVzKCk7IH1cblxuZnVuY3Rpb24gZ2V0VHlwZVZvY2FidWxhcnkoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0VHlwZVZvY2FidWxhcnkoKTsgfVxuXG5mdW5jdGlvbiBnZXRTeW1ib2xWb2NhYnVsYXJ5KCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzLmdldFN5bWJvbFZvY2FidWxhcnkoKTsgfVxuXG5mdW5jdGlvbiBnZXRNZXRhSlNPTkZpbGUoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0TWV0YUpTT05GaWxlKCk7IH1cblxuZnVuY3Rpb24gZ2V0RnVydGxlRmlsZXMoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0RnVydGxlRmlsZXMoKTsgfVxuXG5mdW5jdGlvbiBnZXROb21pbmFsRmlsZXMoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0Tm9taW5hbEZpbGVzKCk7IH1cblxuZnVuY3Rpb24gZ2V0RGlyZWN0b3J5UGF0aHMoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0RGlyZWN0b3J5UGF0aHMoKTsgfVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmN5TmFtZXMoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0RGVwZW5kZW5jeU5hbWVzKCk7IH1cblxuZnVuY3Rpb24gZ2V0Q3VzdG9tR3JhbW1hckJORkZpbGVzKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzLmdldEN1c3RvbUdyYW1tYXJCTkZGaWxlcygpOyB9XG5cbmZ1bmN0aW9uIGdldEN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZXMoKSB7IHJldHVybiB0aGlzLmVudHJpZXMuZ2V0Q3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlcygpOyB9XG5cbmNvbnN0IGVudHJpZXNNaXhpbnMgPSB7XG4gIGZvckVhY2hGaWxlLFxuICBmaW5kRmlsZSxcbiAgZ2V0Qk5GLFxuICBnZXRGaWxlcyxcbiAgZ2V0VGVybUJORixcbiAgZ2V0VmVyc2lvbixcbiAgZ2V0RmlsZVBhdGhzLFxuICBnZXRWb2NhYnVsYXJ5LFxuICBnZXRSZXBvc2l0b3J5LFxuICBnZXRSZWFkbWVGaWxlLFxuICBnZXRTdGF0ZW1lbnRCTkYsXG4gIGdldERlcGVuZGVuY2llcyxcbiAgZ2V0VHlwZVZvY2FidWxhcnksXG4gIGdldFN5bWJvbFZvY2FidWxhcnksXG4gIGdldE1ldGFKU09ORmlsZSxcbiAgZ2V0RnVydGxlRmlsZXMsXG4gIGdldE5vbWluYWxGaWxlcyxcbiAgZ2V0RGlyZWN0b3J5UGF0aHMsXG4gIGdldERlcGVuZGVuY3lOYW1lcyxcbiAgZ2V0Q3VzdG9tR3JhbW1hckJORkZpbGVzLFxuICBnZXRDdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGVzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBlbnRyaWVzTWl4aW5zO1xuIl0sIm5hbWVzIjpbImZvckVhY2hGaWxlIiwiY2FsbGJhY2siLCJlbnRyaWVzIiwiZmluZEZpbGUiLCJmaWxlUGF0aCIsImdldEJORiIsImdldEZpbGVzIiwiZ2V0VGVybUJORiIsImdldFZlcnNpb24iLCJnZXRGaWxlUGF0aHMiLCJnZXRWb2NhYnVsYXJ5IiwiZ2V0UmVwb3NpdG9yeSIsImdldFJlYWRtZUZpbGUiLCJnZXRTdGF0ZW1lbnRCTkYiLCJnZXREZXBlbmRlbmNpZXMiLCJnZXRUeXBlVm9jYWJ1bGFyeSIsImdldFN5bWJvbFZvY2FidWxhcnkiLCJnZXRNZXRhSlNPTkZpbGUiLCJnZXRGdXJ0bGVGaWxlcyIsImdldE5vbWluYWxGaWxlcyIsImdldERpcmVjdG9yeVBhdGhzIiwiZ2V0RGVwZW5kZW5jeU5hbWVzIiwiZ2V0Q3VzdG9tR3JhbW1hckJORkZpbGVzIiwiZ2V0Q3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlcyIsImVudHJpZXNNaXhpbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQW9FQTs7O2VBQUE7OztBQWxFQSxTQUFTQSxZQUFZQyxRQUFRO0lBQUksT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0YsV0FBVyxDQUFDQztBQUFXO0FBRTVFLFNBQVNFLFNBQVNDLFFBQVE7SUFBSSxPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDQyxRQUFRLENBQUNDO0FBQVc7QUFFdEUsU0FBU0M7SUFBVyxPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDRyxNQUFNO0FBQUk7QUFFbEQsU0FBU0M7SUFBYSxPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSSxRQUFRO0FBQUk7QUFFdEQsU0FBU0M7SUFBZSxPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDSyxVQUFVO0FBQUk7QUFFMUQsU0FBU0M7SUFBZSxPQUFPLElBQUksQ0FBQ04sT0FBTyxDQUFDTSxVQUFVO0FBQUk7QUFFMUQsU0FBU0M7SUFBaUIsT0FBTyxJQUFJLENBQUNQLE9BQU8sQ0FBQ08sWUFBWTtBQUFJO0FBRTlELFNBQVNDO0lBQWtCLE9BQU8sSUFBSSxDQUFDUixPQUFPLENBQUNRLGFBQWE7QUFBSTtBQUVoRSxTQUFTQztJQUFrQixPQUFPLElBQUksQ0FBQ1QsT0FBTyxDQUFDUyxhQUFhO0FBQUk7QUFFaEUsU0FBU0M7SUFBa0IsT0FBTyxJQUFJLENBQUNWLE9BQU8sQ0FBQ1UsYUFBYTtBQUFJO0FBRWhFLFNBQVNDO0lBQW9CLE9BQU8sSUFBSSxDQUFDWCxPQUFPLENBQUNXLGVBQWU7QUFBSTtBQUVwRSxTQUFTQztJQUFvQixPQUFPLElBQUksQ0FBQ1osT0FBTyxDQUFDWSxlQUFlO0FBQUk7QUFFcEUsU0FBU0M7SUFBc0IsT0FBTyxJQUFJLENBQUNiLE9BQU8sQ0FBQ2EsaUJBQWlCO0FBQUk7QUFFeEUsU0FBU0M7SUFBd0IsT0FBTyxJQUFJLENBQUNkLE9BQU8sQ0FBQ2MsbUJBQW1CO0FBQUk7QUFFNUUsU0FBU0M7SUFBb0IsT0FBTyxJQUFJLENBQUNmLE9BQU8sQ0FBQ2UsZUFBZTtBQUFJO0FBRXBFLFNBQVNDO0lBQW1CLE9BQU8sSUFBSSxDQUFDaEIsT0FBTyxDQUFDZ0IsY0FBYztBQUFJO0FBRWxFLFNBQVNDO0lBQW9CLE9BQU8sSUFBSSxDQUFDakIsT0FBTyxDQUFDaUIsZUFBZTtBQUFJO0FBRXBFLFNBQVNDO0lBQXNCLE9BQU8sSUFBSSxDQUFDbEIsT0FBTyxDQUFDa0IsaUJBQWlCO0FBQUk7QUFFeEUsU0FBU0M7SUFBdUIsT0FBTyxJQUFJLENBQUNuQixPQUFPLENBQUNtQixrQkFBa0I7QUFBSTtBQUUxRSxTQUFTQztJQUE2QixPQUFPLElBQUksQ0FBQ3BCLE9BQU8sQ0FBQ29CLHdCQUF3QjtBQUFJO0FBRXRGLFNBQVNDO0lBQW9DLE9BQU8sSUFBSSxDQUFDckIsT0FBTyxDQUFDcUIsK0JBQStCO0FBQUk7QUFFcEcsSUFBTUMsZ0JBQWdCO0lBQ3BCeEIsYUFBQUE7SUFDQUcsVUFBQUE7SUFDQUUsUUFBQUE7SUFDQUMsVUFBQUE7SUFDQUMsWUFBQUE7SUFDQUMsWUFBQUE7SUFDQUMsY0FBQUE7SUFDQUMsZUFBQUE7SUFDQUMsZUFBQUE7SUFDQUMsZUFBQUE7SUFDQUMsaUJBQUFBO0lBQ0FDLGlCQUFBQTtJQUNBQyxtQkFBQUE7SUFDQUMscUJBQUFBO0lBQ0FDLGlCQUFBQTtJQUNBQyxnQkFBQUE7SUFDQUMsaUJBQUFBO0lBQ0FDLG1CQUFBQTtJQUNBQyxvQkFBQUE7SUFDQUMsMEJBQUFBO0lBQ0FDLGlDQUFBQTtBQUNGO0lBRUEsV0FBZUMifQ==