"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _constants = require("../constants");
var _name = require("../utilities/name");
var _fileNames = require("../fileNames");
function getVocabulary(vocabularyFileName) {
    var vocabulary = _constants.EMPTY_STRING;
    var customGrammarVocabularyFiles = this.getCustomGrammarVocabularyFiles(), customGrammarVocabularyFile = customGrammarVocabularyFiles.find(function(customGrammarVocabularyFile) {
        var customGrammarVocabularyFilePath = customGrammarVocabularyFile.getPath(), customGrammarVocabularyFileName = (0, _name.fileNameFromFilePath)(customGrammarVocabularyFilePath);
        if (customGrammarVocabularyFileName === vocabularyFileName) {
            return true;
        }
    }) || null;
    if (customGrammarVocabularyFile !== null) {
        var customGrammarVocabularyFileContent = customGrammarVocabularyFile.getContent();
        vocabulary = customGrammarVocabularyFileContent; ///
    }
    return vocabulary;
}
function getTypeVocabulary() {
    var fileName = _fileNames.TYPE_VOCABULARY_FILE_NAME, vocabulary = this.getVocabulary(fileName), typeVocabulary = vocabulary; ///
    return typeVocabulary;
}
function getSymbolVocabulary() {
    var fileName = _fileNames.SYMBOL_VOCABULARY_FILE_NAME, vocabulary = this.getVocabulary(fileName), symbolVocabulary = vocabulary; ///
    return symbolVocabulary;
}
var vocabularyMixins = {
    getVocabulary: getVocabulary,
    getTypeVocabulary: getTypeVocabulary,
    getSymbolVocabulary: getSymbolVocabulary
};
var _default = vocabularyMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvdm9jYWJ1bGFyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgZmlsZU5hbWVGcm9tRmlsZVBhdGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL25hbWVcIjtcbmltcG9ydCB7IFRZUEVfVk9DQUJVTEFSWV9GSUxFX05BTUUsIFNZTUJPTF9WT0NBQlVMQVJZX0ZJTEVfTkFNRSB9IGZyb20gXCIuLi9maWxlTmFtZXNcIjtcblxuZnVuY3Rpb24gZ2V0Vm9jYWJ1bGFyeSh2b2NhYnVsYXJ5RmlsZU5hbWUpIHtcbiAgbGV0IHZvY2FidWxhcnkgPSBFTVBUWV9TVFJJTkc7XG5cbiAgY29uc3QgY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlcyA9IHRoaXMuZ2V0Q3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlcygpLFxuICAgICAgICBjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGUgPSBjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGVzLmZpbmQoKGN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGVQYXRoID0gY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlLmdldFBhdGgoKSxcbiAgICAgICAgICAgICAgY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlTmFtZSA9IGZpbGVOYW1lRnJvbUZpbGVQYXRoKGN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZVBhdGgpO1xuXG4gICAgICAgIGlmIChjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGVOYW1lID09PSB2b2NhYnVsYXJ5RmlsZU5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkgfHwgbnVsbDtcblxuICBpZiAoY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlICE9PSBudWxsKSB7XG4gICAgY29uc3QgY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlQ29udGVudCA9IGN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZS5nZXRDb250ZW50KCk7XG5cbiAgICB2b2NhYnVsYXJ5ID0gY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlQ29udGVudDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIHZvY2FidWxhcnk7XG59XG5cbmZ1bmN0aW9uIGdldFR5cGVWb2NhYnVsYXJ5KCkge1xuICBjb25zdCBmaWxlTmFtZSA9IFRZUEVfVk9DQUJVTEFSWV9GSUxFX05BTUUsIC8vL1xuICAgICAgICB2b2NhYnVsYXJ5ID0gdGhpcy5nZXRWb2NhYnVsYXJ5KGZpbGVOYW1lKSxcbiAgICAgICAgdHlwZVZvY2FidWxhcnkgPSB2b2NhYnVsYXJ5OyAgLy8vXG5cbiAgcmV0dXJuIHR5cGVWb2NhYnVsYXJ5O1xufVxuXG5mdW5jdGlvbiBnZXRTeW1ib2xWb2NhYnVsYXJ5KCkge1xuICBjb25zdCBmaWxlTmFtZSA9IFNZTUJPTF9WT0NBQlVMQVJZX0ZJTEVfTkFNRSwgLy8vXG4gICAgICAgIHZvY2FidWxhcnkgPSB0aGlzLmdldFZvY2FidWxhcnkoZmlsZU5hbWUpLFxuICAgICAgICBzeW1ib2xWb2NhYnVsYXJ5ID0gdm9jYWJ1bGFyeTsgIC8vL1xuXG4gIHJldHVybiBzeW1ib2xWb2NhYnVsYXJ5O1xufVxuXG5jb25zdCB2b2NhYnVsYXJ5TWl4aW5zID0gIHtcbiAgZ2V0Vm9jYWJ1bGFyeSxcbiAgZ2V0VHlwZVZvY2FidWxhcnksXG4gIGdldFN5bWJvbFZvY2FidWxhcnlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHZvY2FidWxhcnlNaXhpbnM7XG4iXSwibmFtZXMiOlsiZ2V0Vm9jYWJ1bGFyeSIsInZvY2FidWxhcnlGaWxlTmFtZSIsInZvY2FidWxhcnkiLCJFTVBUWV9TVFJJTkciLCJjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGVzIiwiZ2V0Q3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlcyIsImN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZSIsImZpbmQiLCJjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGVQYXRoIiwiZ2V0UGF0aCIsImN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZU5hbWUiLCJmaWxlTmFtZUZyb21GaWxlUGF0aCIsImN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZUNvbnRlbnQiLCJnZXRDb250ZW50IiwiZ2V0VHlwZVZvY2FidWxhcnkiLCJmaWxlTmFtZSIsIlRZUEVfVk9DQUJVTEFSWV9GSUxFX05BTUUiLCJ0eXBlVm9jYWJ1bGFyeSIsImdldFN5bWJvbFZvY2FidWxhcnkiLCJTWU1CT0xfVk9DQUJVTEFSWV9GSUxFX05BTUUiLCJzeW1ib2xWb2NhYnVsYXJ5Iiwidm9jYWJ1bGFyeU1peGlucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBa0RBOzs7ZUFBQTs7O3lCQWhENkI7b0JBQ1E7eUJBQ2tDO0FBRXZFLFNBQVNBLGNBQWNDLGtCQUFrQjtJQUN2QyxJQUFJQyxhQUFhQyx1QkFBWTtJQUU3QixJQUFNQywrQkFBK0IsSUFBSSxDQUFDQywrQkFBK0IsSUFDbkVDLDhCQUE4QkYsNkJBQTZCRyxJQUFJLENBQUMsU0FBQ0Q7UUFDakUsSUFBTUUsa0NBQWtDRiw0QkFBNEJHLE9BQU8sSUFDckVDLGtDQUFrQ0MsSUFBQUEsMEJBQW9CLEVBQUNIO1FBRTdELElBQUlFLG9DQUFvQ1Qsb0JBQW9CO1lBQzFELE9BQU87UUFDVDtJQUNGLE1BQU07SUFFVixJQUFJSyxnQ0FBZ0MsTUFBTTtRQUN4QyxJQUFNTSxxQ0FBcUNOLDRCQUE0Qk8sVUFBVTtRQUVqRlgsYUFBYVUsb0NBQXFDLEdBQUc7SUFDdkQ7SUFFQSxPQUFPVjtBQUNUO0FBRUEsU0FBU1k7SUFDUCxJQUFNQyxXQUFXQyxvQ0FBeUIsRUFDcENkLGFBQWEsSUFBSSxDQUFDRixhQUFhLENBQUNlLFdBQ2hDRSxpQkFBaUJmLFlBQWEsR0FBRztJQUV2QyxPQUFPZTtBQUNUO0FBRUEsU0FBU0M7SUFDUCxJQUFNSCxXQUFXSSxzQ0FBMkIsRUFDdENqQixhQUFhLElBQUksQ0FBQ0YsYUFBYSxDQUFDZSxXQUNoQ0ssbUJBQW1CbEIsWUFBYSxHQUFHO0lBRXpDLE9BQU9rQjtBQUNUO0FBRUEsSUFBTUMsbUJBQW9CO0lBQ3hCckIsZUFBQUE7SUFDQWMsbUJBQUFBO0lBQ0FJLHFCQUFBQTtBQUNGO0lBRUEsV0FBZUcifQ==