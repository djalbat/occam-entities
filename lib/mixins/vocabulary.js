"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _name = require("../utilities/name");
var _fileNames = require("../fileNames");
function getVocabulary(vocabularyFileName) {
    var vocabulary = null;
    var customGrammarVocabularyFiles = this.getCustomGrammarVocabularyFiles(), customGrammarVocabularyFile = customGrammarVocabularyFiles.find(function(customGrammarVocabularyFile) {
        var customGrammarVocabularyFilePath = customGrammarVocabularyFile.getPath(), customGrammarVocabularyFileName = (0, _name.fileNameFromFilePath)(customGrammarVocabularyFilePath);
        if (customGrammarVocabularyFileName === vocabularyFileName) {
            return true;
        }
    }) || null;
    if (customGrammarVocabularyFile !== null) {
        var customGrammarVocabularyFileContent = customGrammarVocabularyFile.getContent();
        vocabulary = customGrammarVocabularyFileContent; ///
    }
    return vocabulary;
}
function getTypeVocabulary() {
    var fileName = _fileNames.TYPE_VOCABULARY_FILE_NAME, vocabulary = this.getVocabulary(fileName), typeVocabulary = vocabulary; ///
    return typeVocabulary;
}
function getSymbolVocabulary() {
    var fileName = _fileNames.SYMBOL_VOCABULARY_FILE_NAME, vocabulary = this.getVocabulary(fileName), symbolVocabulary = vocabulary; ///
    return symbolVocabulary;
}
var vocabularyMixins = {
    getVocabulary: getVocabulary,
    getTypeVocabulary: getTypeVocabulary,
    getSymbolVocabulary: getSymbolVocabulary
};
var _default = vocabularyMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvdm9jYWJ1bGFyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZmlsZU5hbWVGcm9tRmlsZVBhdGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL25hbWVcIjtcbmltcG9ydCB7IFRZUEVfVk9DQUJVTEFSWV9GSUxFX05BTUUsIFNZTUJPTF9WT0NBQlVMQVJZX0ZJTEVfTkFNRSB9IGZyb20gXCIuLi9maWxlTmFtZXNcIjtcblxuZnVuY3Rpb24gZ2V0Vm9jYWJ1bGFyeSh2b2NhYnVsYXJ5RmlsZU5hbWUpIHtcbiAgbGV0IHZvY2FidWxhcnkgPSBudWxsO1xuXG4gIGNvbnN0IGN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZXMgPSB0aGlzLmdldEN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZXMoKSxcbiAgICAgICAgY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlID0gY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlcy5maW5kKChjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGUpID0+IHtcbiAgICAgICAgY29uc3QgY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlUGF0aCA9IGN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZS5nZXRQYXRoKCksXG4gICAgICAgICAgICAgIGN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZU5hbWUgPSBmaWxlTmFtZUZyb21GaWxlUGF0aChjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGVQYXRoKTtcblxuICAgICAgICBpZiAoY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlTmFtZSA9PT0gdm9jYWJ1bGFyeUZpbGVOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pIHx8IG51bGw7XG5cbiAgaWYgKGN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZUNvbnRlbnQgPSBjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGUuZ2V0Q29udGVudCgpO1xuXG4gICAgdm9jYWJ1bGFyeSA9IGN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZUNvbnRlbnQ7ICAvLy9cbiAgfVxuXG4gIHJldHVybiB2b2NhYnVsYXJ5O1xufVxuXG5mdW5jdGlvbiBnZXRUeXBlVm9jYWJ1bGFyeSgpIHtcbiAgY29uc3QgZmlsZU5hbWUgPSBUWVBFX1ZPQ0FCVUxBUllfRklMRV9OQU1FLCAvLy9cbiAgICAgICAgdm9jYWJ1bGFyeSA9IHRoaXMuZ2V0Vm9jYWJ1bGFyeShmaWxlTmFtZSksXG4gICAgICAgIHR5cGVWb2NhYnVsYXJ5ID0gdm9jYWJ1bGFyeTsgIC8vL1xuXG4gIHJldHVybiB0eXBlVm9jYWJ1bGFyeTtcbn1cblxuZnVuY3Rpb24gZ2V0U3ltYm9sVm9jYWJ1bGFyeSgpIHtcbiAgY29uc3QgZmlsZU5hbWUgPSBTWU1CT0xfVk9DQUJVTEFSWV9GSUxFX05BTUUsIC8vL1xuICAgICAgICB2b2NhYnVsYXJ5ID0gdGhpcy5nZXRWb2NhYnVsYXJ5KGZpbGVOYW1lKSxcbiAgICAgICAgc3ltYm9sVm9jYWJ1bGFyeSA9IHZvY2FidWxhcnk7ICAvLy9cblxuICByZXR1cm4gc3ltYm9sVm9jYWJ1bGFyeTtcbn1cblxuY29uc3Qgdm9jYWJ1bGFyeU1peGlucyA9ICB7XG4gIGdldFZvY2FidWxhcnksXG4gIGdldFR5cGVWb2NhYnVsYXJ5LFxuICBnZXRTeW1ib2xWb2NhYnVsYXJ5XG59O1xuXG5leHBvcnQgZGVmYXVsdCB2b2NhYnVsYXJ5TWl4aW5zO1xuIl0sIm5hbWVzIjpbImdldFZvY2FidWxhcnkiLCJ2b2NhYnVsYXJ5RmlsZU5hbWUiLCJ2b2NhYnVsYXJ5IiwiY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlcyIsImdldEN1c3RvbUdyYW1tYXJWb2NhYnVsYXJ5RmlsZXMiLCJjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGUiLCJmaW5kIiwiY3VzdG9tR3JhbW1hclZvY2FidWxhcnlGaWxlUGF0aCIsImdldFBhdGgiLCJjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGVOYW1lIiwiZmlsZU5hbWVGcm9tRmlsZVBhdGgiLCJjdXN0b21HcmFtbWFyVm9jYWJ1bGFyeUZpbGVDb250ZW50IiwiZ2V0Q29udGVudCIsImdldFR5cGVWb2NhYnVsYXJ5IiwiZmlsZU5hbWUiLCJUWVBFX1ZPQ0FCVUxBUllfRklMRV9OQU1FIiwidHlwZVZvY2FidWxhcnkiLCJnZXRTeW1ib2xWb2NhYnVsYXJ5IiwiU1lNQk9MX1ZPQ0FCVUxBUllfRklMRV9OQU1FIiwic3ltYm9sVm9jYWJ1bGFyeSIsInZvY2FidWxhcnlNaXhpbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWlEQTs7O2VBQUE7OztvQkEvQ3FDO3lCQUNrQztBQUV2RSxTQUFTQSxjQUFjQyxrQkFBa0I7SUFDdkMsSUFBSUMsYUFBYTtJQUVqQixJQUFNQywrQkFBK0IsSUFBSSxDQUFDQywrQkFBK0IsSUFDbkVDLDhCQUE4QkYsNkJBQTZCRyxJQUFJLENBQUMsU0FBQ0Q7UUFDakUsSUFBTUUsa0NBQWtDRiw0QkFBNEJHLE9BQU8sSUFDckVDLGtDQUFrQ0MsSUFBQUEsMEJBQW9CLEVBQUNIO1FBRTdELElBQUlFLG9DQUFvQ1Isb0JBQW9CO1lBQzFELE9BQU87UUFDVDtJQUNGLE1BQU07SUFFVixJQUFJSSxnQ0FBZ0MsTUFBTTtRQUN4QyxJQUFNTSxxQ0FBcUNOLDRCQUE0Qk8sVUFBVTtRQUVqRlYsYUFBYVMsb0NBQXFDLEdBQUc7SUFDdkQ7SUFFQSxPQUFPVDtBQUNUO0FBRUEsU0FBU1c7SUFDUCxJQUFNQyxXQUFXQyxvQ0FBeUIsRUFDcENiLGFBQWEsSUFBSSxDQUFDRixhQUFhLENBQUNjLFdBQ2hDRSxpQkFBaUJkLFlBQWEsR0FBRztJQUV2QyxPQUFPYztBQUNUO0FBRUEsU0FBU0M7SUFDUCxJQUFNSCxXQUFXSSxzQ0FBMkIsRUFDdENoQixhQUFhLElBQUksQ0FBQ0YsYUFBYSxDQUFDYyxXQUNoQ0ssbUJBQW1CakIsWUFBYSxHQUFHO0lBRXpDLE9BQU9pQjtBQUNUO0FBRUEsSUFBTUMsbUJBQW9CO0lBQ3hCcEIsZUFBQUE7SUFDQWEsbUJBQUFBO0lBQ0FJLHFCQUFBQTtBQUNGO0lBRUEsV0FBZUcifQ==