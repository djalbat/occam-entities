"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _name = require("../utilities/name");
var _fileNames = require("../fileNames");
function getPattern(patternFileName) {
    var pattern = null;
    var customGrammarPatternFiles = this.getCustomGrammarPatternFiles(), customGrammarPatternFile = customGrammarPatternFiles.find(function(customGrammarPatternFile) {
        var customGrammarPatternFilePath = customGrammarPatternFile.getPath(), customGrammarPatternFileName = (0, _name.fileNameFromFilePath)(customGrammarPatternFilePath);
        if (customGrammarPatternFileName === patternFileName) {
            return true;
        }
    }) || null;
    if (customGrammarPatternFile !== null) {
        var customGrammarPatternFileContent = customGrammarPatternFile.getContent();
        pattern = customGrammarPatternFileContent; ///
    }
    return pattern;
}
function getTypePattern() {
    var fileName = _fileNames.TYPE_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), typePattern = pattern; ///
    return typePattern;
}
function getSymbolPattern() {
    var fileName = _fileNames.SYMBOL_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), symbolPattern = pattern; ///
    return symbolPattern;
}
function getPropertyPattern() {
    var fileName = _fileNames.PROPERTY_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), propertyPattern = pattern; ///
    return propertyPattern;
}
function getOperatorPattern() {
    var fileName = _fileNames.OPERATOR_PATTERN_FILE_NAME, pattern = this.getPattern(fileName), operatorPattern = pattern; ///
    return operatorPattern;
}
var patternMixins = {
    getPattern: getPattern,
    getTypePattern: getTypePattern,
    getSymbolPattern: getSymbolPattern,
    getPropertyPattern: getPropertyPattern,
    getOperatorPattern: getOperatorPattern
};
var _default = patternMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvcGF0dGVybi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZmlsZU5hbWVGcm9tRmlsZVBhdGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL25hbWVcIjtcbmltcG9ydCB7IFRZUEVfUEFUVEVSTl9GSUxFX05BTUUsIFNZTUJPTF9QQVRURVJOX0ZJTEVfTkFNRSwgUFJPUEVSVFlfUEFUVEVSTl9GSUxFX05BTUUsIE9QRVJBVE9SX1BBVFRFUk5fRklMRV9OQU1FIH0gZnJvbSBcIi4uL2ZpbGVOYW1lc1wiO1xuXG5mdW5jdGlvbiBnZXRQYXR0ZXJuKHBhdHRlcm5GaWxlTmFtZSkge1xuICBsZXQgcGF0dGVybiA9IG51bGw7XG5cbiAgY29uc3QgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcyA9IHRoaXMuZ2V0Q3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcygpLFxuICAgICAgICBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUgPSBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzLmZpbmQoKGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoID0gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlLmdldFBhdGgoKSxcbiAgICAgICAgICAgICAgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlTmFtZSA9IGZpbGVOYW1lRnJvbUZpbGVQYXRoKGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgpO1xuXG4gICAgICAgIGlmIChjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVOYW1lID09PSBwYXR0ZXJuRmlsZU5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkgfHwgbnVsbDtcblxuICBpZiAoY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlICE9PSBudWxsKSB7XG4gICAgY29uc3QgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlQ29udGVudCA9IGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZS5nZXRDb250ZW50KCk7XG5cbiAgICBwYXR0ZXJuID0gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlQ29udGVudDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIHBhdHRlcm47XG59XG5cbmZ1bmN0aW9uIGdldFR5cGVQYXR0ZXJuKCkge1xuICBjb25zdCBmaWxlTmFtZSA9IFRZUEVfUEFUVEVSTl9GSUxFX05BTUUsIC8vL1xuICAgICAgICBwYXR0ZXJuID0gdGhpcy5nZXRQYXR0ZXJuKGZpbGVOYW1lKSxcbiAgICAgICAgdHlwZVBhdHRlcm4gPSBwYXR0ZXJuOyAgLy8vXG5cbiAgcmV0dXJuIHR5cGVQYXR0ZXJuO1xufVxuXG5mdW5jdGlvbiBnZXRTeW1ib2xQYXR0ZXJuKCkge1xuICBjb25zdCBmaWxlTmFtZSA9IFNZTUJPTF9QQVRURVJOX0ZJTEVfTkFNRSwgLy8vXG4gICAgICAgIHBhdHRlcm4gPSB0aGlzLmdldFBhdHRlcm4oZmlsZU5hbWUpLFxuICAgICAgICBzeW1ib2xQYXR0ZXJuID0gcGF0dGVybjsgIC8vL1xuXG4gIHJldHVybiBzeW1ib2xQYXR0ZXJuO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eVBhdHRlcm4oKSB7XG4gIGNvbnN0IGZpbGVOYW1lID0gUFJPUEVSVFlfUEFUVEVSTl9GSUxFX05BTUUsIC8vL1xuICAgICAgICBwYXR0ZXJuID0gdGhpcy5nZXRQYXR0ZXJuKGZpbGVOYW1lKSxcbiAgICAgICAgcHJvcGVydHlQYXR0ZXJuID0gcGF0dGVybjsgIC8vL1xuXG4gIHJldHVybiBwcm9wZXJ0eVBhdHRlcm47XG59XG5cbmZ1bmN0aW9uIGdldE9wZXJhdG9yUGF0dGVybigpIHtcbiAgY29uc3QgZmlsZU5hbWUgPSBPUEVSQVRPUl9QQVRURVJOX0ZJTEVfTkFNRSwgLy8vXG4gICAgICAgIHBhdHRlcm4gPSB0aGlzLmdldFBhdHRlcm4oZmlsZU5hbWUpLFxuICAgICAgICBvcGVyYXRvclBhdHRlcm4gPSBwYXR0ZXJuOyAgLy8vXG5cbiAgcmV0dXJuIG9wZXJhdG9yUGF0dGVybjtcbn1cblxuY29uc3QgcGF0dGVybk1peGlucyA9ICB7XG4gIGdldFBhdHRlcm4sXG4gIGdldFR5cGVQYXR0ZXJuLFxuICBnZXRTeW1ib2xQYXR0ZXJuLFxuICBnZXRQcm9wZXJ0eVBhdHRlcm4sXG4gIGdldE9wZXJhdG9yUGF0dGVyblxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0dGVybk1peGlucztcbiJdLCJuYW1lcyI6WyJnZXRQYXR0ZXJuIiwicGF0dGVybkZpbGVOYW1lIiwicGF0dGVybiIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMiLCJnZXRDdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlIiwiZmluZCIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgiLCJnZXRQYXRoIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlTmFtZSIsImZpbGVOYW1lRnJvbUZpbGVQYXRoIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlQ29udGVudCIsImdldENvbnRlbnQiLCJnZXRUeXBlUGF0dGVybiIsImZpbGVOYW1lIiwiVFlQRV9QQVRURVJOX0ZJTEVfTkFNRSIsInR5cGVQYXR0ZXJuIiwiZ2V0U3ltYm9sUGF0dGVybiIsIlNZTUJPTF9QQVRURVJOX0ZJTEVfTkFNRSIsInN5bWJvbFBhdHRlcm4iLCJnZXRQcm9wZXJ0eVBhdHRlcm4iLCJQUk9QRVJUWV9QQVRURVJOX0ZJTEVfTkFNRSIsInByb3BlcnR5UGF0dGVybiIsImdldE9wZXJhdG9yUGF0dGVybiIsIk9QRVJBVE9SX1BBVFRFUk5fRklMRV9OQU1FIiwib3BlcmF0b3JQYXR0ZXJuIiwicGF0dGVybk1peGlucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBbUVBOzs7ZUFBQTs7O29CQWpFcUM7eUJBQ29GO0FBRXpILFNBQVNBLFdBQVdDLGVBQWU7SUFDakMsSUFBSUMsVUFBVTtJQUVkLElBQU1DLDRCQUE0QixJQUFJLENBQUNDLDRCQUE0QixJQUM3REMsMkJBQTJCRiwwQkFBMEJHLElBQUksQ0FBQyxTQUFDRDtRQUMzRCxJQUFNRSwrQkFBK0JGLHlCQUF5QkcsT0FBTyxJQUMvREMsK0JBQStCQyxJQUFBQSwwQkFBb0IsRUFBQ0g7UUFFMUQsSUFBSUUsaUNBQWlDUixpQkFBaUI7WUFDcEQsT0FBTztRQUNUO0lBQ0YsTUFBTTtJQUVWLElBQUlJLDZCQUE2QixNQUFNO1FBQ3JDLElBQU1NLGtDQUFrQ04seUJBQXlCTyxVQUFVO1FBRTNFVixVQUFVUyxpQ0FBa0MsR0FBRztJQUNqRDtJQUVBLE9BQU9UO0FBQ1Q7QUFFQSxTQUFTVztJQUNQLElBQU1DLFdBQVdDLGlDQUFzQixFQUNqQ2IsVUFBVSxJQUFJLENBQUNGLFVBQVUsQ0FBQ2MsV0FDMUJFLGNBQWNkLFNBQVUsR0FBRztJQUVqQyxPQUFPYztBQUNUO0FBRUEsU0FBU0M7SUFDUCxJQUFNSCxXQUFXSSxtQ0FBd0IsRUFDbkNoQixVQUFVLElBQUksQ0FBQ0YsVUFBVSxDQUFDYyxXQUMxQkssZ0JBQWdCakIsU0FBVSxHQUFHO0lBRW5DLE9BQU9pQjtBQUNUO0FBRUEsU0FBU0M7SUFDUCxJQUFNTixXQUFXTyxxQ0FBMEIsRUFDckNuQixVQUFVLElBQUksQ0FBQ0YsVUFBVSxDQUFDYyxXQUMxQlEsa0JBQWtCcEIsU0FBVSxHQUFHO0lBRXJDLE9BQU9vQjtBQUNUO0FBRUEsU0FBU0M7SUFDUCxJQUFNVCxXQUFXVSxxQ0FBMEIsRUFDckN0QixVQUFVLElBQUksQ0FBQ0YsVUFBVSxDQUFDYyxXQUMxQlcsa0JBQWtCdkIsU0FBVSxHQUFHO0lBRXJDLE9BQU91QjtBQUNUO0FBRUEsSUFBTUMsZ0JBQWlCO0lBQ3JCMUIsWUFBQUE7SUFDQWEsZ0JBQUFBO0lBQ0FJLGtCQUFBQTtJQUNBRyxvQkFBQUE7SUFDQUcsb0JBQUFBO0FBQ0Y7SUFFQSxXQUFlRyJ9