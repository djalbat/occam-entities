"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _constants = require("../constants");
var _name = require("../utilities/name");
var _fileNames = require("../fileNames");
function getBNF(bnfFileName) {
    var bnf = _constants.EMPTY_STRING;
    var customGrammarBNFFiles = this.getCustomGrammarBNFFiles(), customGrammarBNFFile = customGrammarBNFFiles.find(function(customGrammarBNFFile) {
        var customGrammarBNFFilePath = customGrammarBNFFile.getPath(), customGrammarBNFFileName = (0, _name.fileNameFromFilePath)(customGrammarBNFFilePath);
        if (customGrammarBNFFileName === bnfFileName) {
            return true;
        }
    }) || null;
    if (customGrammarBNFFile !== null) {
        var customGrammarBNFFileContent = customGrammarBNFFile.getContent();
        bnf = customGrammarBNFFileContent; ///
    }
    return bnf;
}
function getTermBNF() {
    var fileName = _fileNames.TERM_BNF_FILE_NAME, bnf = this.getBNF(fileName), termBNF = bnf; ///
    return termBNF;
}
function getStatementBNF() {
    var fileName = _fileNames.STATEMENT_BNF_FILE_NAME, bnf = this.getBNF(fileName), statementBNF = bnf; ///
    return statementBNF;
}
var bnfMixins = {
    getBNF: getBNF,
    getTermBNF: getTermBNF,
    getStatementBNF: getStatementBNF
};
var _default = bnfMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvYm5mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBmaWxlTmFtZUZyb21GaWxlUGF0aCB9IGZyb20gXCIuLi91dGlsaXRpZXMvbmFtZVwiO1xuaW1wb3J0IHsgVEVSTV9CTkZfRklMRV9OQU1FLCBTVEFURU1FTlRfQk5GX0ZJTEVfTkFNRSB9IGZyb20gXCIuLi9maWxlTmFtZXNcIjtcblxuZnVuY3Rpb24gZ2V0Qk5GKGJuZkZpbGVOYW1lKSB7XG4gIGxldCBibmYgPSBFTVBUWV9TVFJJTkc7XG5cbiAgY29uc3QgY3VzdG9tR3JhbW1hckJORkZpbGVzID0gdGhpcy5nZXRDdXN0b21HcmFtbWFyQk5GRmlsZXMoKSxcbiAgICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGUgPSBjdXN0b21HcmFtbWFyQk5GRmlsZXMuZmluZCgoY3VzdG9tR3JhbW1hckJORkZpbGUpID0+IHtcbiAgICAgICAgICBjb25zdCBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGggPSBjdXN0b21HcmFtbWFyQk5GRmlsZS5nZXRQYXRoKCksXG4gICAgICAgICAgICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGVOYW1lID0gZmlsZU5hbWVGcm9tRmlsZVBhdGgoY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoKTtcblxuICAgICAgICAgIGlmIChjdXN0b21HcmFtbWFyQk5GRmlsZU5hbWUgPT09IGJuZkZpbGVOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pIHx8IG51bGw7XG5cbiAgaWYgKGN1c3RvbUdyYW1tYXJCTkZGaWxlICE9PSBudWxsKSB7XG4gICAgY29uc3QgY3VzdG9tR3JhbW1hckJORkZpbGVDb250ZW50ID0gY3VzdG9tR3JhbW1hckJORkZpbGUuZ2V0Q29udGVudCgpO1xuXG4gICAgYm5mID0gY3VzdG9tR3JhbW1hckJORkZpbGVDb250ZW50OyAgLy8vXG4gIH1cblxuICByZXR1cm4gYm5mO1xufVxuXG5mdW5jdGlvbiBnZXRUZXJtQk5GKCkge1xuICBjb25zdCBmaWxlTmFtZSA9IFRFUk1fQk5GX0ZJTEVfTkFNRSwgLy8vXG4gICAgICAgIGJuZiA9IHRoaXMuZ2V0Qk5GKGZpbGVOYW1lKSxcbiAgICAgICAgdGVybUJORiA9IGJuZjsgIC8vL1xuXG4gIHJldHVybiB0ZXJtQk5GO1xufVxuXG5mdW5jdGlvbiBnZXRTdGF0ZW1lbnRCTkYoKSB7XG4gIGNvbnN0IGZpbGVOYW1lID0gU1RBVEVNRU5UX0JORl9GSUxFX05BTUUsIC8vL1xuICAgICAgICBibmYgPSB0aGlzLmdldEJORihmaWxlTmFtZSksXG4gICAgICAgIHN0YXRlbWVudEJORiA9IGJuZjsgIC8vL1xuXG4gIHJldHVybiBzdGF0ZW1lbnRCTkY7XG59XG5cbmNvbnN0IGJuZk1peGlucyA9IHtcbiAgZ2V0Qk5GLFxuICBnZXRUZXJtQk5GLFxuICBnZXRTdGF0ZW1lbnRCTkZcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJuZk1peGlucztcbiJdLCJuYW1lcyI6WyJnZXRCTkYiLCJibmZGaWxlTmFtZSIsImJuZiIsIkVNUFRZX1NUUklORyIsImN1c3RvbUdyYW1tYXJCTkZGaWxlcyIsImdldEN1c3RvbUdyYW1tYXJCTkZGaWxlcyIsImN1c3RvbUdyYW1tYXJCTkZGaWxlIiwiZmluZCIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImdldFBhdGgiLCJjdXN0b21HcmFtbWFyQk5GRmlsZU5hbWUiLCJmaWxlTmFtZUZyb21GaWxlUGF0aCIsImN1c3RvbUdyYW1tYXJCTkZGaWxlQ29udGVudCIsImdldENvbnRlbnQiLCJnZXRUZXJtQk5GIiwiZmlsZU5hbWUiLCJURVJNX0JORl9GSUxFX05BTUUiLCJ0ZXJtQk5GIiwiZ2V0U3RhdGVtZW50Qk5GIiwiU1RBVEVNRU5UX0JORl9GSUxFX05BTUUiLCJzdGF0ZW1lbnRCTkYiLCJibmZNaXhpbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWtEQTs7O2VBQUE7Ozt5QkFoRDZCO29CQUNRO3lCQUN1QjtBQUU1RCxTQUFTQSxPQUFPQyxXQUFXO0lBQ3pCLElBQUlDLE1BQU1DLHVCQUFZO0lBRXRCLElBQU1DLHdCQUF3QixJQUFJLENBQUNDLHdCQUF3QixJQUNyREMsdUJBQXVCRixzQkFBc0JHLElBQUksQ0FBQyxTQUFDRDtRQUNqRCxJQUFNRSwyQkFBMkJGLHFCQUFxQkcsT0FBTyxJQUN2REMsMkJBQTJCQyxJQUFBQSwwQkFBb0IsRUFBQ0g7UUFFdEQsSUFBSUUsNkJBQTZCVCxhQUFhO1lBQzVDLE9BQU87UUFDVDtJQUNGLE1BQU07SUFFWixJQUFJSyx5QkFBeUIsTUFBTTtRQUNqQyxJQUFNTSw4QkFBOEJOLHFCQUFxQk8sVUFBVTtRQUVuRVgsTUFBTVUsNkJBQThCLEdBQUc7SUFDekM7SUFFQSxPQUFPVjtBQUNUO0FBRUEsU0FBU1k7SUFDUCxJQUFNQyxXQUFXQyw2QkFBa0IsRUFDN0JkLE1BQU0sSUFBSSxDQUFDRixNQUFNLENBQUNlLFdBQ2xCRSxVQUFVZixLQUFNLEdBQUc7SUFFekIsT0FBT2U7QUFDVDtBQUVBLFNBQVNDO0lBQ1AsSUFBTUgsV0FBV0ksa0NBQXVCLEVBQ2xDakIsTUFBTSxJQUFJLENBQUNGLE1BQU0sQ0FBQ2UsV0FDbEJLLGVBQWVsQixLQUFNLEdBQUc7SUFFOUIsT0FBT2tCO0FBQ1Q7QUFFQSxJQUFNQyxZQUFZO0lBQ2hCckIsUUFBQUE7SUFDQWMsWUFBQUE7SUFDQUksaUJBQUFBO0FBQ0Y7SUFFQSxXQUFlRyJ9