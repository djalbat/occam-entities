"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _metaJSON = require("../utilities/metaJSON");
function getVersion() {
    var metaJSONFile = this.getMetaJSONFile(), documentNode = (0, _metaJSON.documentNodeFromMetaJSONFile)(metaJSONFile), version = (0, _metaJSON.versionFromDocumentNode)(documentNode);
    return version;
}
function getRepository() {
    var metaJSONFile = this.getMetaJSONFile(), documentNode = (0, _metaJSON.documentNodeFromMetaJSONFile)(metaJSONFile), repository = (0, _metaJSON.repositoryFromDocumentNode)(documentNode);
    return repository;
}
function getDependencies() {
    var metaJSONFile = this.getMetaJSONFile(), documentNode = (0, _metaJSON.documentNodeFromMetaJSONFile)(metaJSONFile), dependencies = (0, _metaJSON.dependenciesFromDocumentNode)(documentNode);
    return dependencies;
}
function getDependencyNames() {
    var metaJSONFile = this.getMetaJSONFile(), documentNode = (0, _metaJSON.documentNodeFromMetaJSONFile)(metaJSONFile), dependencyNames = (0, _metaJSON.dependencyNamesFromDocumentNode)(documentNode);
    return dependencyNames;
}
var metaJSONMixins = {
    getVersion: getVersion,
    getRepository: getRepository,
    getDependencies: getDependencies,
    getDependencyNames: getDependencyNames
};
var _default = metaJSONMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbWV0YUpTT04uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHZlcnNpb25Gcm9tRG9jdW1lbnROb2RlLCByZXBvc2l0b3J5RnJvbURvY3VtZW50Tm9kZSwgZGVwZW5kZW5jaWVzRnJvbURvY3VtZW50Tm9kZSwgZGVwZW5kZW5jeU5hbWVzRnJvbURvY3VtZW50Tm9kZSwgZG9jdW1lbnROb2RlRnJvbU1ldGFKU09ORmlsZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvbWV0YUpTT05cIjtcblxuZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHtcbiAgY29uc3QgbWV0YUpTT05GaWxlID0gdGhpcy5nZXRNZXRhSlNPTkZpbGUoKSxcbiAgICAgICAgZG9jdW1lbnROb2RlID0gZG9jdW1lbnROb2RlRnJvbU1ldGFKU09ORmlsZShtZXRhSlNPTkZpbGUpLFxuICAgICAgICB2ZXJzaW9uID0gdmVyc2lvbkZyb21Eb2N1bWVudE5vZGUoZG9jdW1lbnROb2RlKTtcblxuICByZXR1cm4gdmVyc2lvbjtcbn1cblxuZnVuY3Rpb24gZ2V0UmVwb3NpdG9yeSgpIHtcbiAgY29uc3QgbWV0YUpTT05GaWxlID0gdGhpcy5nZXRNZXRhSlNPTkZpbGUoKSxcbiAgICAgICAgZG9jdW1lbnROb2RlID0gZG9jdW1lbnROb2RlRnJvbU1ldGFKU09ORmlsZShtZXRhSlNPTkZpbGUpLFxuICAgICAgICByZXBvc2l0b3J5ID0gcmVwb3NpdG9yeUZyb21Eb2N1bWVudE5vZGUoZG9jdW1lbnROb2RlKTtcblxuICByZXR1cm4gcmVwb3NpdG9yeTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKCkge1xuICBjb25zdCBtZXRhSlNPTkZpbGUgPSB0aGlzLmdldE1ldGFKU09ORmlsZSgpLFxuICAgICAgICBkb2N1bWVudE5vZGUgPSBkb2N1bWVudE5vZGVGcm9tTWV0YUpTT05GaWxlKG1ldGFKU09ORmlsZSksXG4gICAgICAgIGRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llc0Zyb21Eb2N1bWVudE5vZGUoZG9jdW1lbnROb2RlKTtcblxuICByZXR1cm4gZGVwZW5kZW5jaWVzO1xufVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmN5TmFtZXMoKSB7XG4gIGNvbnN0IG1ldGFKU09ORmlsZSA9IHRoaXMuZ2V0TWV0YUpTT05GaWxlKCksXG4gICAgICAgIGRvY3VtZW50Tm9kZSA9IGRvY3VtZW50Tm9kZUZyb21NZXRhSlNPTkZpbGUobWV0YUpTT05GaWxlKSxcbiAgICAgICAgZGVwZW5kZW5jeU5hbWVzID0gZGVwZW5kZW5jeU5hbWVzRnJvbURvY3VtZW50Tm9kZShkb2N1bWVudE5vZGUpO1xuXG4gIHJldHVybiBkZXBlbmRlbmN5TmFtZXM7XG59XG5cbmNvbnN0IG1ldGFKU09OTWl4aW5zID0ge1xuICBnZXRWZXJzaW9uLFxuICBnZXRSZXBvc2l0b3J5LFxuICBnZXREZXBlbmRlbmNpZXMsXG4gIGdldERlcGVuZGVuY3lOYW1lc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWV0YUpTT05NaXhpbnM7XG4iXSwibmFtZXMiOlsiZ2V0VmVyc2lvbiIsIm1ldGFKU09ORmlsZSIsImdldE1ldGFKU09ORmlsZSIsImRvY3VtZW50Tm9kZSIsImRvY3VtZW50Tm9kZUZyb21NZXRhSlNPTkZpbGUiLCJ2ZXJzaW9uIiwidmVyc2lvbkZyb21Eb2N1bWVudE5vZGUiLCJnZXRSZXBvc2l0b3J5IiwicmVwb3NpdG9yeSIsInJlcG9zaXRvcnlGcm9tRG9jdW1lbnROb2RlIiwiZ2V0RGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jaWVzRnJvbURvY3VtZW50Tm9kZSIsImdldERlcGVuZGVuY3lOYW1lcyIsImRlcGVuZGVuY3lOYW1lcyIsImRlcGVuZGVuY3lOYW1lc0Zyb21Eb2N1bWVudE5vZGUiLCJtZXRhSlNPTk1peGlucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBMkNBOzs7ZUFBQTs7O3dCQXpDaUs7QUFFakssU0FBU0E7SUFDUCxJQUFNQyxlQUFlLElBQUksQ0FBQ0MsZUFBZSxJQUNuQ0MsZUFBZUMsSUFBQUEsc0NBQTRCLEVBQUNILGVBQzVDSSxVQUFVQyxJQUFBQSxpQ0FBdUIsRUFBQ0g7SUFFeEMsT0FBT0U7QUFDVDtBQUVBLFNBQVNFO0lBQ1AsSUFBTU4sZUFBZSxJQUFJLENBQUNDLGVBQWUsSUFDbkNDLGVBQWVDLElBQUFBLHNDQUE0QixFQUFDSCxlQUM1Q08sYUFBYUMsSUFBQUEsb0NBQTBCLEVBQUNOO0lBRTlDLE9BQU9LO0FBQ1Q7QUFFQSxTQUFTRTtJQUNQLElBQU1ULGVBQWUsSUFBSSxDQUFDQyxlQUFlLElBQ25DQyxlQUFlQyxJQUFBQSxzQ0FBNEIsRUFBQ0gsZUFDNUNVLGVBQWVDLElBQUFBLHNDQUE0QixFQUFDVDtJQUVsRCxPQUFPUTtBQUNUO0FBRUEsU0FBU0U7SUFDUCxJQUFNWixlQUFlLElBQUksQ0FBQ0MsZUFBZSxJQUNuQ0MsZUFBZUMsSUFBQUEsc0NBQTRCLEVBQUNILGVBQzVDYSxrQkFBa0JDLElBQUFBLHlDQUErQixFQUFDWjtJQUV4RCxPQUFPVztBQUNUO0FBRUEsSUFBTUUsaUJBQWlCO0lBQ3JCaEIsWUFBQUE7SUFDQU8sZUFBQUE7SUFDQUcsaUJBQUFBO0lBQ0FHLG9CQUFBQTtBQUNGO0lBRUEsV0FBZUcifQ==