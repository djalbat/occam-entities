"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _metaJSON = require("../utilities/metaJSON");
function getVersion() {
    var metaJSONFile = this.getMetaJSONFile(), metaJSONNode = (0, _metaJSON.metaJSONNodeFromMetaJSONFile)(metaJSONFile), node = metaJSONNode, version = (0, _metaJSON.versionFromNode)(node);
    return version;
}
function getRepository() {
    var metaJSONFile = this.getMetaJSONFile(), metaJSONNode = (0, _metaJSON.metaJSONNodeFromMetaJSONFile)(metaJSONFile), node = metaJSONNode, repository = (0, _metaJSON.repositoryFromNode)(node);
    return repository;
}
function getDependencies() {
    var metaJSONFile = this.getMetaJSONFile(), metaJSONNode = (0, _metaJSON.metaJSONNodeFromMetaJSONFile)(metaJSONFile), node = metaJSONNode, dependencies = (0, _metaJSON.dependenciesFromNode)(node);
    return dependencies;
}
function getDependencyNames() {
    var metaJSONFile = this.getMetaJSONFile(), metaJSONNode = (0, _metaJSON.metaJSONNodeFromMetaJSONFile)(metaJSONFile), node = metaJSONNode, dependencyNames = (0, _metaJSON.dependencyNamesFromNode)(node);
    return dependencyNames;
}
var metaJSONMixins = {
    getVersion: getVersion,
    getRepository: getRepository,
    getDependencies: getDependencies,
    getDependencyNames: getDependencyNames
};
var _default = metaJSONMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbWV0YUpTT04uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHZlcnNpb25Gcm9tTm9kZSwgcmVwb3NpdG9yeUZyb21Ob2RlLCBkZXBlbmRlbmNpZXNGcm9tTm9kZSwgZGVwZW5kZW5jeU5hbWVzRnJvbU5vZGUsIG1ldGFKU09OTm9kZUZyb21NZXRhSlNPTkZpbGUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL21ldGFKU09OXCI7XG5cbmZ1bmN0aW9uIGdldFZlcnNpb24oKSB7XG4gIGNvbnN0IG1ldGFKU09ORmlsZSA9IHRoaXMuZ2V0TWV0YUpTT05GaWxlKCksXG4gICAgICAgIG1ldGFKU09OTm9kZSA9IG1ldGFKU09OTm9kZUZyb21NZXRhSlNPTkZpbGUobWV0YUpTT05GaWxlKSxcbiAgICAgICAgbm9kZSA9IG1ldGFKU09OTm9kZSwgIC8vL1xuICAgICAgICB2ZXJzaW9uID0gdmVyc2lvbkZyb21Ob2RlKG5vZGUpO1xuXG4gIHJldHVybiB2ZXJzaW9uO1xufVxuXG5mdW5jdGlvbiBnZXRSZXBvc2l0b3J5KCkge1xuICBjb25zdCBtZXRhSlNPTkZpbGUgPSB0aGlzLmdldE1ldGFKU09ORmlsZSgpLFxuICAgICAgICBtZXRhSlNPTk5vZGUgPSBtZXRhSlNPTk5vZGVGcm9tTWV0YUpTT05GaWxlKG1ldGFKU09ORmlsZSksXG4gICAgICAgIG5vZGUgPSBtZXRhSlNPTk5vZGUsICAvLy9cbiAgICAgICAgcmVwb3NpdG9yeSA9IHJlcG9zaXRvcnlGcm9tTm9kZShub2RlKTtcblxuICByZXR1cm4gcmVwb3NpdG9yeTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKCkge1xuICBjb25zdCBtZXRhSlNPTkZpbGUgPSB0aGlzLmdldE1ldGFKU09ORmlsZSgpLFxuICAgICAgICBtZXRhSlNPTk5vZGUgPSBtZXRhSlNPTk5vZGVGcm9tTWV0YUpTT05GaWxlKG1ldGFKU09ORmlsZSksXG4gICAgICAgIG5vZGUgPSBtZXRhSlNPTk5vZGUsICAvLy9cbiAgICAgICAgZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzRnJvbU5vZGUobm9kZSk7XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jeU5hbWVzKCkge1xuICBjb25zdCBtZXRhSlNPTkZpbGUgPSB0aGlzLmdldE1ldGFKU09ORmlsZSgpLFxuICAgICAgICBtZXRhSlNPTk5vZGUgPSBtZXRhSlNPTk5vZGVGcm9tTWV0YUpTT05GaWxlKG1ldGFKU09ORmlsZSksXG4gICAgICAgIG5vZGUgPSBtZXRhSlNPTk5vZGUsICAvLy9cbiAgICAgICAgZGVwZW5kZW5jeU5hbWVzID0gZGVwZW5kZW5jeU5hbWVzRnJvbU5vZGUobm9kZSk7XG5cbiAgcmV0dXJuIGRlcGVuZGVuY3lOYW1lcztcbn1cblxuY29uc3QgbWV0YUpTT05NaXhpbnMgPSB7XG4gIGdldFZlcnNpb24sXG4gIGdldFJlcG9zaXRvcnksXG4gIGdldERlcGVuZGVuY2llcyxcbiAgZ2V0RGVwZW5kZW5jeU5hbWVzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZXRhSlNPTk1peGlucztcbiJdLCJuYW1lcyI6WyJnZXRWZXJzaW9uIiwibWV0YUpTT05GaWxlIiwiZ2V0TWV0YUpTT05GaWxlIiwibWV0YUpTT05Ob2RlIiwibWV0YUpTT05Ob2RlRnJvbU1ldGFKU09ORmlsZSIsIm5vZGUiLCJ2ZXJzaW9uIiwidmVyc2lvbkZyb21Ob2RlIiwiZ2V0UmVwb3NpdG9yeSIsInJlcG9zaXRvcnkiLCJyZXBvc2l0b3J5RnJvbU5vZGUiLCJnZXREZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmNpZXNGcm9tTm9kZSIsImdldERlcGVuZGVuY3lOYW1lcyIsImRlcGVuZGVuY3lOYW1lcyIsImRlcGVuZGVuY3lOYW1lc0Zyb21Ob2RlIiwibWV0YUpTT05NaXhpbnMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkErQ0E7OztlQUFBOzs7d0JBN0NpSTtBQUVqSSxTQUFTQTtJQUNQLElBQU1DLGVBQWUsSUFBSSxDQUFDQyxlQUFlLElBQ25DQyxlQUFlQyxJQUFBQSxzQ0FBNEIsRUFBQ0gsZUFDNUNJLE9BQU9GLGNBQ1BHLFVBQVVDLElBQUFBLHlCQUFlLEVBQUNGO0lBRWhDLE9BQU9DO0FBQ1Q7QUFFQSxTQUFTRTtJQUNQLElBQU1QLGVBQWUsSUFBSSxDQUFDQyxlQUFlLElBQ25DQyxlQUFlQyxJQUFBQSxzQ0FBNEIsRUFBQ0gsZUFDNUNJLE9BQU9GLGNBQ1BNLGFBQWFDLElBQUFBLDRCQUFrQixFQUFDTDtJQUV0QyxPQUFPSTtBQUNUO0FBRUEsU0FBU0U7SUFDUCxJQUFNVixlQUFlLElBQUksQ0FBQ0MsZUFBZSxJQUNuQ0MsZUFBZUMsSUFBQUEsc0NBQTRCLEVBQUNILGVBQzVDSSxPQUFPRixjQUNQUyxlQUFlQyxJQUFBQSw4QkFBb0IsRUFBQ1I7SUFFMUMsT0FBT087QUFDVDtBQUVBLFNBQVNFO0lBQ1AsSUFBTWIsZUFBZSxJQUFJLENBQUNDLGVBQWUsSUFDbkNDLGVBQWVDLElBQUFBLHNDQUE0QixFQUFDSCxlQUM1Q0ksT0FBT0YsY0FDUFksa0JBQWtCQyxJQUFBQSxpQ0FBdUIsRUFBQ1g7SUFFaEQsT0FBT1U7QUFDVDtBQUVBLElBQU1FLGlCQUFpQjtJQUNyQmpCLFlBQUFBO0lBQ0FRLGVBQUFBO0lBQ0FHLGlCQUFBQTtJQUNBRyxvQkFBQUE7QUFDRjtJQUVBLFdBQWVHIn0=