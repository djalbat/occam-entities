"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TERM_BNF_FILE_NAME: function() {
        return TERM_BNF_FILE_NAME;
    },
    STATEMENT_BNF_FILE_NAME: function() {
        return STATEMENT_BNF_FILE_NAME;
    },
    METASTATEMENT_BNF_FILE_NAME: function() {
        return METASTATEMENT_BNF_FILE_NAME;
    },
    TYPE_PATTERN_FILE_NAME: function() {
        return TYPE_PATTERN_FILE_NAME;
    },
    SYMBOL_PATTERN_FILE_NAME: function() {
        return SYMBOL_PATTERN_FILE_NAME;
    },
    OPERATOR_PATTERN_FILE_NAME: function() {
        return OPERATOR_PATTERN_FILE_NAME;
    },
    CONTEXT_JSON_FILE_NAME: function() {
        return CONTEXT_JSON_FILE_NAME;
    },
    default: function() {
        return _default;
    }
});
var TERM_BNF_FILE_NAME = "term.bnf";
var STATEMENT_BNF_FILE_NAME = "statement.bnf";
var METASTATEMENT_BNF_FILE_NAME = "metastatement.bnf";
var TYPE_PATTERN_FILE_NAME = "type.ptn";
var SYMBOL_PATTERN_FILE_NAME = "symbol.ptn";
var OPERATOR_PATTERN_FILE_NAME = "operator.ptn";
var CONTEXT_JSON_FILE_NAME = "context.json";
var _default = {
    TERM_BNF_FILE_NAME: TERM_BNF_FILE_NAME,
    STATEMENT_BNF_FILE_NAME: STATEMENT_BNF_FILE_NAME,
    METASTATEMENT_BNF_FILE_NAME: METASTATEMENT_BNF_FILE_NAME,
    TYPE_PATTERN_FILE_NAME: TYPE_PATTERN_FILE_NAME,
    SYMBOL_PATTERN_FILE_NAME: SYMBOL_PATTERN_FILE_NAME,
    OPERATOR_PATTERN_FILE_NAME: OPERATOR_PATTERN_FILE_NAME,
    CONTEXT_JSON_FILE_NAME: CONTEXT_JSON_FILE_NAME
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlTmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBjb25zdCBURVJNX0JORl9GSUxFX05BTUUgPSBcInRlcm0uYm5mXCI7XG5leHBvcnQgY29uc3QgU1RBVEVNRU5UX0JORl9GSUxFX05BTUUgPSBcInN0YXRlbWVudC5ibmZcIjtcbmV4cG9ydCBjb25zdCBNRVRBU1RBVEVNRU5UX0JORl9GSUxFX05BTUUgPSBcIm1ldGFzdGF0ZW1lbnQuYm5mXCI7XG5leHBvcnQgY29uc3QgVFlQRV9QQVRURVJOX0ZJTEVfTkFNRSA9IFwidHlwZS5wdG5cIjtcbmV4cG9ydCBjb25zdCBTWU1CT0xfUEFUVEVSTl9GSUxFX05BTUUgPSBcInN5bWJvbC5wdG5cIjtcbmV4cG9ydCBjb25zdCBPUEVSQVRPUl9QQVRURVJOX0ZJTEVfTkFNRSA9IFwib3BlcmF0b3IucHRuXCI7XG5leHBvcnQgY29uc3QgQ09OVEVYVF9KU09OX0ZJTEVfTkFNRSA9IFwiY29udGV4dC5qc29uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgVEVSTV9CTkZfRklMRV9OQU1FLFxuICBTVEFURU1FTlRfQk5GX0ZJTEVfTkFNRSxcbiAgTUVUQVNUQVRFTUVOVF9CTkZfRklMRV9OQU1FLFxuICBUWVBFX1BBVFRFUk5fRklMRV9OQU1FLFxuICBTWU1CT0xfUEFUVEVSTl9GSUxFX05BTUUsXG4gIE9QRVJBVE9SX1BBVFRFUk5fRklMRV9OQU1FLFxuICBDT05URVhUX0pTT05fRklMRV9OQU1FXG59O1xuIl0sIm5hbWVzIjpbIlRFUk1fQk5GX0ZJTEVfTkFNRSIsIlNUQVRFTUVOVF9CTkZfRklMRV9OQU1FIiwiTUVUQVNUQVRFTUVOVF9CTkZfRklMRV9OQU1FIiwiVFlQRV9QQVRURVJOX0ZJTEVfTkFNRSIsIlNZTUJPTF9QQVRURVJOX0ZJTEVfTkFNRSIsIk9QRVJBVE9SX1BBVFRFUk5fRklMRV9OQU1FIiwiQ09OVEVYVF9KU09OX0ZJTEVfTkFNRSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBRWFBLGtCQUFrQjtlQUFsQkE7O0lBQ0FDLHVCQUF1QjtlQUF2QkE7O0lBQ0FDLDJCQUEyQjtlQUEzQkE7O0lBQ0FDLHNCQUFzQjtlQUF0QkE7O0lBQ0FDLHdCQUF3QjtlQUF4QkE7O0lBQ0FDLDBCQUEwQjtlQUExQkE7O0lBQ0FDLHNCQUFzQjtlQUF0QkE7O0lBRWIsT0FRRTtlQVJGOzs7QUFSTyxJQUFNTixxQkFBcUI7QUFDM0IsSUFBTUMsMEJBQTBCO0FBQ2hDLElBQU1DLDhCQUE4QjtBQUNwQyxJQUFNQyx5QkFBeUI7QUFDL0IsSUFBTUMsMkJBQTJCO0FBQ2pDLElBQU1DLDZCQUE2QjtBQUNuQyxJQUFNQyx5QkFBeUI7SUFFdEMsV0FBZTtJQUNiTixvQkFBQUE7SUFDQUMseUJBQUFBO0lBQ0FDLDZCQUFBQTtJQUNBQyx3QkFBQUE7SUFDQUMsMEJBQUFBO0lBQ0FDLDRCQUFBQTtJQUNBQyx3QkFBQUE7QUFDRiJ9