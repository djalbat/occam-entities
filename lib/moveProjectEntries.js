"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return moveProjectEntries;
    },
    moveEntryOperation: function() {
        return moveEntryOperation;
    },
    moveDirectory: function() {
        return moveDirectory;
    },
    moveFile: function() {
        return moveFile;
    }
});
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var _removeProjectEntries = require("./removeProjectEntries");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, pathWithoutBottommostName = _necessary.pathUtilities.pathWithoutBottommostName, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, renameFileEx = _necessary.fileSystemUtilities.renameFile, renameDirectoryEx = _necessary.fileSystemUtilities.renameDirectory, checkDirectoryExists = _necessary.fileSystemUtilities.checkEntryExists;
function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    moveEntries(pathMaps, projectsDirectoryPath, function(targetEntryPaths) {
        var _$json = {
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
function moveEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback) {
    if (targetEntryPath === null) {
        (0, _removeProjectEntries.removeEntryOperation)(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    entryDirectory ? moveDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : moveFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function moveDirectory(oldDirectoryPath, newDirectoryPath, callback) {
    var error = null;
    var newDirectoryPathWithoutBottommostName = pathWithoutBottommostName(newDirectoryPath), newParentDirectoryPath = newDirectoryPathWithoutBottommostName, newParentDirectoryExists = checkDirectoryExists(newParentDirectoryPath);
    if (!newParentDirectoryExists) {
        error = "The new '".concat(newDirectoryPath, "' directory's parent directory does not exist.");
    } else {
        try {
            renameDirectoryEx(oldDirectoryPath);
        } catch (nativeError) {
            error = nativeError; ///
        }
    }
    callback(error);
}
function moveFile(oldFilePath, newFilePath, callback) {
    var error = null;
    var newFilePathWithoutBottommostName = pathWithoutBottommostName(newFilePath), newParentDirectoryPath = newFilePathWithoutBottommostName, newParentDirectoryExists = checkFileExists(newParentDirectoryPath);
    if (!newParentDirectoryExists) {
        error = "The new '".concat(newFilePath, "' file's parent directory does not exist.");
    } else {
        try {
            renameFileEx(oldFilePath, newFilePath);
        } catch (nativeError) {
            error = nativeError; ///
        }
    }
    callback(error);
}
function moveEntries(pathMaps, projectsDirectoryPath, callback) {
    var targetEntryPaths = [];
    (0, _pathMaps.asynchronousForEach)(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        moveEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        callback(targetEntryPaths);
    });
}
function moveFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var oldFilePath = absoluteSourceFilePath, newFilePath = absoluteTargetFilePath; ///
    moveFile(oldFilePath, newFilePath, function(error) {
        if (error) {
            targetEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function moveDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), sourceDirectoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!sourceDirectoryEmpty) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        var directoryPath = absoluteSourceDirectoryPath; ///
        (0, _removeProjectEntries.removeEntry)(directoryPath, function(error) {
            if (error) {
                targetEntryPath = sourceEntryPath; ///
            }
            callback(sourceEntryPath, targetEntryPath);
        });
        return;
    }
    var oldDirectoryPath = absoluteSourceDirectoryPath, newDirectoryPath = absoluteTargetDirectoryPath; ///
    moveDirectory(oldDirectoryPath, newDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,