"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return moveProjectEntries;
    },
    moveEntryOperation: function() {
        return moveEntryOperation;
    }
});
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var _removeProjectEntries = require("./removeProjectEntries");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, sourceEntryPaths = [], targetEntryPaths = [], done = function() {
        var _$json = {
            sourceEntryPaths: sourceEntryPaths,
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    };
    (0, _pathMaps.asynchronousForEach)(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        moveEntryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            sourceEntryPaths.push(sourceEntryPath);
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, done);
}
function moveEntryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    if (targetEntryPath === null) {
        (0, _removeProjectEntries.removeEntryOperation)(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
        return;
    }
    if (sourceEntryPath === targetEntryPath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    entryDirectory ? moveDirectory(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : moveFile(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function moveFile(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        sourceEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra.move)(absoluteSourceFilePath, absoluteTargetFilePath, function(error) {
        if (error) {
            sourceEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function moveDirectory(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(absoluteTargetDirectoryPath), sourceDirectoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!sourceDirectoryEmpty) {
        sourceEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    if (targetDirectoryExists) {
        (0, _fsExtra.remove)(absoluteSourceDirectoryPath, function(error) {
            if (error) {
                sourceEntryPath = null;
            }
            callback(sourceEntryPath, targetEntryPath);
        });
        return;
    }
    (0, _fsExtra.move)(absoluteSourceDirectoryPath, absoluteTargetDirectoryPath, function(error) {
        if (error) {
            sourceEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,