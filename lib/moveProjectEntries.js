"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = moveProjectEntries;
exports.moveEntry = moveEntry;
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _removeProjectEntries = require("./removeProjectEntries");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, targetPaths = [];
    (0, _pathMaps).asynchronousForEach(pathMaps, function(sourcePath, targetPath, directory, next, done, index) {
        moveEntry(sourcePath, targetPath, projectsDirectoryPath, function(targetPath1) {
            targetPaths.push(targetPath1);
            next();
        });
    }, function() {
        var json1 = targetPaths; ///
        callback(json1);
    });
}
function moveEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
    if (targetPath === null) {
        (0, _removeProjectEntries).removeEntry(sourcePath, targetPath, projectsDirectoryPath, callback);
        return;
    }
    if (sourcePath === targetPath) {
        callback(targetPath);
        return;
    }
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath), sourceEntryExists = checkEntryExists(absoluteSourcePath);
    if (!sourceEntryExists) {
        targetPath = null;
        callback(targetPath);
        return;
    }
    var absoluteTargetPath = concatenatePaths(projectsDirectoryPath, targetPath), targetEntryExists = checkEntryExists(absoluteTargetPath);
    if (targetEntryExists) {
        targetPath = sourcePath; ///
        callback(targetPath);
        return;
    }
    var entryDirectory = isEntryDirectory(absoluteSourcePath);
    entryDirectory ? moveDirectory(sourcePath, targetPath, projectsDirectoryPath, callback) : moveFile(sourcePath, targetPath, projectsDirectoryPath, callback);
}
function moveFile(sourcePath, targetPath, projectsDirectoryPath, callback) {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath), absoluteTargetPath = concatenatePaths(projectsDirectoryPath, targetPath);
    (0, _fsExtra).move(absoluteSourcePath, absoluteTargetPath, function(error) {
        var success = !error;
        targetPath = success ? targetPath : sourcePath; ///
        callback(targetPath);
    });
}
function moveDirectory(sourcePath, targetPath, projectsDirectoryPath, callback) {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath), absoluteTargetPath = concatenatePaths(projectsDirectoryPath, targetPath), directoryEmpty = isDirectoryEmpty(absoluteSourcePath);
    if (!directoryEmpty) {
        var targetPath1 = sourcePath; ///
        callback(targetPath1);
        return;
    }
    (0, _fsExtra).move(absoluteSourcePath, absoluteTargetPath, function(error) {
        var success = !error;
        targetPath = success ? targetPath : sourcePath; ///
        callback(targetPath);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb3ZlUHJvamVjdEVudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IG1vdmUgfSBmcm9tIFwiZnMtZXh0cmFcIjtcbmltcG9ydCB7IHBhdGhVdGlsaXRpZXMsIGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IHJlbW92ZUVudHJ5IH0gZnJvbSBcIi4vcmVtb3ZlUHJvamVjdEVudHJpZXNcIjtcbmltcG9ydCB7IGFzeW5jaHJvbm91c0ZvckVhY2ggfSBmcm9tIFwiLi91dGlsaXRpZXMvcGF0aE1hcHNcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyBjaGVja0VudHJ5RXhpc3RzLCBpc0VudHJ5RGlyZWN0b3J5LCBpc0RpcmVjdG9yeUVtcHR5IH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uLFxuXHRcdCAgICB0YXJnZXRQYXRocyA9IFtdO1xuXG4gIGFzeW5jaHJvbm91c0ZvckVhY2goXG4gICAgcGF0aE1hcHMsXG4gICAgKHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIGRpcmVjdG9yeSwgbmV4dCwgZG9uZSwgaW5kZXgpID0+IHtcbiAgICAgIG1vdmVFbnRyeShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsICh0YXJnZXRQYXRoKSA9PiB7XG4gICAgICAgIHRhcmdldFBhdGhzLnB1c2godGFyZ2V0UGF0aCk7XG5cbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICAoKSA9PiB7XG4gICAgXHRjb25zdCBqc29uID0gdGFyZ2V0UGF0aHM7IC8vL1xuXG4gICAgICBjYWxsYmFjayhqc29uKTtcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlRW50cnkoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBpZiAodGFyZ2V0UGF0aCA9PT0gbnVsbCkge1xuICAgIHJlbW92ZUVudHJ5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNvdXJjZVBhdGggPT09IHRhcmdldFBhdGgpIHtcbiAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFic29sdXRlU291cmNlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VQYXRoKSxcbiAgICAgICAgc291cmNlRW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlU291cmNlUGF0aCk7XG5cbiAgaWYgKCFzb3VyY2VFbnRyeUV4aXN0cykge1xuICAgIHRhcmdldFBhdGggPSBudWxsO1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhYnNvbHV0ZVRhcmdldFBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0UGF0aCksXG4gICAgICAgIHRhcmdldEVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVRhcmdldFBhdGgpO1xuXG4gIGlmICh0YXJnZXRFbnRyeUV4aXN0cykge1xuICAgIHRhcmdldFBhdGggPSBzb3VyY2VQYXRoOyAgLy8vXG5cbiAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGVudHJ5RGlyZWN0b3J5ID0gaXNFbnRyeURpcmVjdG9yeShhYnNvbHV0ZVNvdXJjZVBhdGgpO1xuXG4gIGVudHJ5RGlyZWN0b3J5ID9cbiAgICBtb3ZlRGlyZWN0b3J5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIDpcbiAgICAgIG1vdmVGaWxlKHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBtb3ZlRmlsZShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFic29sdXRlU291cmNlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VQYXRoKSxcbiAgICAgICAgYWJzb2x1dGVUYXJnZXRQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldFBhdGgpO1xuXG4gIG1vdmUoYWJzb2x1dGVTb3VyY2VQYXRoLCBhYnNvbHV0ZVRhcmdldFBhdGgsIChlcnJvcikgPT4ge1xuICAgIGNvbnN0IHN1Y2Nlc3MgPSAhZXJyb3I7XG4gICAgXG4gICAgdGFyZ2V0UGF0aCA9IHN1Y2Nlc3MgP1xuICAgICAgICAgICAgICAgICAgIHRhcmdldFBhdGggOlxuICAgICAgICAgICAgICAgICAgICAgc291cmNlUGF0aDsgIC8vL1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtb3ZlRGlyZWN0b3J5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3QgYWJzb2x1dGVTb3VyY2VQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZVBhdGgpLFxuICAgICAgICBhYnNvbHV0ZVRhcmdldFBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0UGF0aCksXG4gICAgICAgIGRpcmVjdG9yeUVtcHR5ID0gaXNEaXJlY3RvcnlFbXB0eShhYnNvbHV0ZVNvdXJjZVBhdGgpO1xuXG4gIGlmICghZGlyZWN0b3J5RW1wdHkpIHtcbiAgICBjb25zdCB0YXJnZXRQYXRoID0gc291cmNlUGF0aDsgIC8vL1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBtb3ZlKGFic29sdXRlU291cmNlUGF0aCwgYWJzb2x1dGVUYXJnZXRQYXRoLCAoZXJyb3IpID0+IHtcbiAgICBjb25zdCBzdWNjZXNzID0gIWVycm9yO1xuXG4gICAgdGFyZ2V0UGF0aCA9IHN1Y2Nlc3MgP1xuICAgICAgICAgICAgICAgICAgIHRhcmdldFBhdGggOlxuICAgICAgICAgICAgICAgICAgICAgc291cmNlUGF0aDsgIC8vL1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7a0JBV1ksa0JBQWtCO1FBcUIxQixTQUFTLEdBQVQsU0FBUztBQTlCSixHQUFVLENBQVYsUUFBVTtBQUNvQixHQUFXLENBQVgsVUFBVztBQUVsQyxHQUF3QixDQUF4QixxQkFBd0I7QUFDaEIsR0FBc0IsQ0FBdEIsU0FBc0I7QUFFMUQsR0FBSyxDQUFHLGdCQUFnQixHQUwyQixVQUFXLGVBS3RELGdCQUFnQixFQUNoQixnQkFBZ0IsR0FOMkIsVUFBVyxxQkFNdEQsZ0JBQWdCLEVBQUUsZ0JBQWdCLEdBTlMsVUFBVyxxQkFNcEMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEdBTlQsVUFBVyxxQkFNbEIsZ0JBQWdCO1NBRXBDLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUNqRixHQUFLLENBQUcsUUFBUSxHQUFLLElBQUksQ0FBakIsUUFBUSxFQUNaLFdBQVc7UUFQbUIs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