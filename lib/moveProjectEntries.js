"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = moveProjectEntries;
exports.moveEntry = moveEntry;
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _removeProjectEntries = require("./removeProjectEntries");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, sourceEntryPaths = [], targetEntryPaths = [];
    (0, _pathMaps).asynchronousForEach(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        moveEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            sourceEntryPaths.push(sourceEntryPath);
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        var json1 = {
            sourceEntryPaths: sourceEntryPaths,
            targetEntryPaths: targetEntryPaths
        };
        callback(json1);
    });
}
function moveEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    if (targetEntryPath === null) {
        (0, _removeProjectEntries).removeEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
        return;
    }
    if (sourceEntryPath === targetEntryPath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath), entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        var targetEntryPath1 = null;
        callback(sourceEntryPath, targetEntryPath1);
        return;
    }
    entryDirectory ? moveDirectory(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : moveFile(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function moveFile(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        var sourceEntryPath1 = null;
        callback(sourceEntryPath1, targetEntryPath);
        return;
    }
    (0, _fsExtra).move(absoluteSourceFilePath, absoluteTargetFilePath, function(error) {
        if (error) {
            var sourceEntryPath = null;
            callback(sourceEntryPath, targetEntryPath);
            return;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function moveDirectory(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(absoluteTargetDirectoryPath), directoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!directoryEmpty) {
        var sourceEntryPath1 = null;
        callback(sourceEntryPath1, targetEntryPath);
        return;
    }
    if (targetDirectoryExists) {
        (0, _fsExtra).remove(absoluteSourceDirectoryPath, function(error) {
            if (error) {
                var sourceEntryPath = null;
                callback(sourceEntryPath, targetEntryPath);
                return;
            }
            callback(sourceEntryPath, targetEntryPath);
        });
        return;
    }
    (0, _fsExtra).move(absoluteSourceDirectoryPath, absoluteTargetDirectoryPath, function(error) {
        if (error) {
            var sourceEntryPath = null;
            callback(sourceEntryPath, targetEntryPath);
            return;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb3ZlUHJvamVjdEVudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IG1vdmUsIHJlbW92ZSB9IGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgcmVtb3ZlRW50cnkgfSBmcm9tIFwiLi9yZW1vdmVQcm9qZWN0RW50cmllc1wiO1xuaW1wb3J0IHsgYXN5bmNocm9ub3VzRm9yRWFjaCB9IGZyb20gXCIuL3V0aWxpdGllcy9wYXRoTWFwc1wiO1xuXG5jb25zdCB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IGNoZWNrRW50cnlFeGlzdHMsIGlzRW50cnlEaXJlY3RvcnksIGlzRGlyZWN0b3J5RW1wdHkgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1vdmVQcm9qZWN0RW50cmllcyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGpzb24sIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgcGF0aE1hcHMgfSA9IGpzb24sXG4gICAgICAgIHNvdXJjZUVudHJ5UGF0aHMgPSBbXSxcblx0XHQgICAgdGFyZ2V0RW50cnlQYXRocyA9IFtdO1xuXG4gIGFzeW5jaHJvbm91c0ZvckVhY2goXG4gICAgcGF0aE1hcHMsXG4gICAgKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBlbnRyeURpcmVjdG9yeSwgbmV4dCwgZG9uZSwgaW5kZXgpID0+IHtcbiAgICAgIG1vdmVFbnRyeShzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCAoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpID0+IHtcbiAgICAgICAgc291cmNlRW50cnlQYXRocy5wdXNoKHNvdXJjZUVudHJ5UGF0aCk7XG4gICAgICAgIHRhcmdldEVudHJ5UGF0aHMucHVzaCh0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgIFx0Y29uc3QganNvbiA9IHtcbiAgICAgICAgc291cmNlRW50cnlQYXRocyxcbiAgICAgICAgdGFyZ2V0RW50cnlQYXRoc1xuICAgICAgfTtcblxuICAgICAgY2FsbGJhY2soanNvbik7XG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZUVudHJ5KHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGlmICh0YXJnZXRFbnRyeVBhdGggPT09IG51bGwpIHtcbiAgICByZW1vdmVFbnRyeShzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjayk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc291cmNlRW50cnlQYXRoID09PSB0YXJnZXRFbnRyeVBhdGgpIHtcbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBzb3VyY2VFbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBlbnRyeURpcmVjdG9yeSA9IGlzRW50cnlEaXJlY3RvcnkoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghc291cmNlRW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIG1vdmVEaXJlY3Rvcnkoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIDpcbiAgICAgIG1vdmVGaWxlKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gbW92ZUZpbGUoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3Qgc291cmNlRmlsZVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsICAvLy9cbiAgICAgICAgdGFyZ2V0RmlsZVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsICAvLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VGaWxlUGF0aCksXG4gICAgICAgIGFic29sdXRlVGFyZ2V0RmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RmlsZVBhdGgpLFxuICAgICAgICB0YXJnZXRGaWxlRXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVRhcmdldEZpbGVQYXRoKTtcblxuICBpZiAodGFyZ2V0RmlsZUV4aXN0cykge1xuICAgIGNvbnN0IHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBtb3ZlKGFic29sdXRlU291cmNlRmlsZVBhdGgsIGFic29sdXRlVGFyZ2V0RmlsZVBhdGgsIChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc3Qgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbW92ZURpcmVjdG9yeShzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBzb3VyY2VEaXJlY3RvcnlQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RGlyZWN0b3J5UGF0aCA9IHRhcmdldEVudHJ5UGF0aCwgLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RGlyZWN0b3J5UGF0aCksXG4gICAgICAgIHRhcmdldERpcmVjdG9yeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgZGlyZWN0b3J5RW1wdHkgPSBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCk7XG5cbiAgaWYgKCFkaXJlY3RvcnlFbXB0eSkge1xuICAgIGNvbnN0IHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGFyZ2V0RGlyZWN0b3J5RXhpc3RzKSB7XG4gICAgcmVtb3ZlKGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc3Qgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgICAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBtb3ZlKGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoLCAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsibW92ZVByb2plY3RFbnRyaWVzIiwibW92ZUVudHJ5IiwiY29uY2F0ZW5hdGVQYXRocyIsImNoZWNrRW50cnlFeGlzdHMiLCJpc0VudHJ5RGlyZWN0b3J5IiwiaXNEaXJlY3RvcnlFbXB0eSIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwic291cmNlRW50cnlQYXRocyIsInRhcmdldEVudHJ5UGF0aHMiLCJzb3VyY2VFbnRyeVBhdGgiLCJ0YXJnZXRFbnRyeVBhdGgiLCJlbnRyeURpcmVjdG9yeSIsIm5leHQiLCJkb25lIiwiaW5kZXgiLCJwdXNoIiwiYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgiLCJzb3VyY2VFbnRyeUV4aXN0cyIsIm1vdmVEaXJlY3RvcnkiLCJtb3ZlRmlsZSIsInNvdXJjZUZpbGVQYXRoIiwidGFyZ2V0RmlsZVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoIiwiYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCIsInRhcmdldEZpbGVFeGlzdHMiLCJlcnJvciIsInNvdXJjZURpcmVjdG9yeVBhdGgiLCJ0YXJnZXREaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoIiwidGFyZ2V0RGlyZWN0b3J5RXhpc3RzIiwiZGlyZWN0b3J5RW1wdHkiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7a0JBV1lBLGtCQUFrQjtRQTBCMUJDLFNBQVMsR0FBVEEsU0FBUztBQW5DSSxHQUFVLENBQVYsUUFBVTtBQUNZLEdBQVcsQ0FBWCxVQUFXO0FBRWxDLEdBQXdCLENBQXhCLHFCQUF3QjtBQUNoQixHQUFzQixDQUF0QixTQUFzQjtBQUUxRCxHQUFLLENBQUdDLGdCQUFnQixHQUwyQixVQUFXLGVBS3REQSxnQkFBZ0IsRUFDaEJDLGdCQUFnQixHQU4yQixVQUFXLHFCQU10REEsZ0JBQWdCLEVBQUVDLGdCQUFnQixHQU5TLFVBQVcscUJBTXBDQSxnQkFBZ0IsRUFBRUMsZ0JBQWdCLEdBTlQsVUFBVyxxQkFNbEJBLGdCQUFnQjtTQUVwQ0wsa0JBQWtCLENBQUNNLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRSxDQUFDO0lBQ2pGLEdBQUssQ0FBR0MsUUFBUSxHQUFLRixJQUFJLENBQWpCRSxRQUFRLEVBQ1ZDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxFQUN2QkMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBUlMsU0FBc0Isc0JBV3RERixRQUFRLEVBQ1IsUUFBUSxDQUFQRyxlQUFlLEVBQUVDLGVBQWUsRUFBRUMsY0FBYyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFLLENBQUM7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