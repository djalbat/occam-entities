"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = moveProjectEntries;
exports.moveEntry = moveEntry;
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _removeProjectEntries = require("./removeProjectEntries");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, targetEntryPaths = [];
    (0, _pathMaps).asynchronousForEach(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        moveEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, function(targetEntryPath1) {
            targetEntryPaths.push(targetEntryPath1);
            next();
        });
    }, function() {
        var json1 = targetEntryPaths; ///
        callback(json1);
    });
}
function moveEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    if (targetEntryPath === null) {
        (0, _removeProjectEntries).removeEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
        return;
    }
    if (sourceEntryPath === targetEntryPath) {
        callback(targetEntryPath);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath), entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        targetEntryPath = null;
        callback(targetEntryPath);
        return;
    }
    entryDirectory ? moveDirectory(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : moveFile(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function moveFile(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        targetEntryPath = sourceEntryPath; ///
        callback(targetEntryPath);
        return;
    }
    (0, _fsExtra).move(absoluteSourceFilePath, absoluteTargetFilePath, function(error) {
        var success = !error;
        targetEntryPath = success ? targetEntryPath : sourceEntryPath; ///
        callback(targetEntryPath);
    });
}
function moveDirectory(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(targetDirectoryPath), directoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!directoryEmpty) {
        targetEntryPath = sourceEntryPath; ///
        callback(targetEntryPath);
        return;
    }
    if (targetDirectoryExists) {
        (0, _fsExtra).remove(absoluteSourceDirectoryPath, function(error) {
            var success = !error;
            targetEntryPath = success ? null : sourceEntryPath; ///
            callback(targetEntryPath);
        });
        return;
    }
    (0, _fsExtra).move(absoluteSourceDirectoryPath, absoluteTargetDirectoryPath, function(error) {
        var success = !error;
        targetEntryPath = success ? targetEntryPath : sourceEntryPath; ///
        callback(targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb3ZlUHJvamVjdEVudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IG1vdmUsIHJlbW92ZSB9IGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgcmVtb3ZlRW50cnkgfSBmcm9tIFwiLi9yZW1vdmVQcm9qZWN0RW50cmllc1wiO1xuaW1wb3J0IHsgYXN5bmNocm9ub3VzRm9yRWFjaCB9IGZyb20gXCIuL3V0aWxpdGllcy9wYXRoTWFwc1wiO1xuXG5jb25zdCB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IGNoZWNrRW50cnlFeGlzdHMsIGlzRW50cnlEaXJlY3RvcnksIGlzRGlyZWN0b3J5RW1wdHkgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1vdmVQcm9qZWN0RW50cmllcyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGpzb24sIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgcGF0aE1hcHMgfSA9IGpzb24sXG5cdFx0ICAgIHRhcmdldEVudHJ5UGF0aHMgPSBbXTtcblxuICBhc3luY2hyb25vdXNGb3JFYWNoKFxuICAgIHBhdGhNYXBzLFxuICAgIChzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgZW50cnlEaXJlY3RvcnksIG5leHQsIGRvbmUsIGluZGV4KSA9PiB7XG4gICAgICBtb3ZlRW50cnkoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgKHRhcmdldEVudHJ5UGF0aCkgPT4ge1xuICAgICAgICB0YXJnZXRFbnRyeVBhdGhzLnB1c2godGFyZ2V0RW50cnlQYXRoKTtcblxuICAgICAgICBuZXh0KCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgICgpID0+IHtcbiAgICBcdGNvbnN0IGpzb24gPSB0YXJnZXRFbnRyeVBhdGhzOyAvLy9cblxuICAgICAgY2FsbGJhY2soanNvbik7XG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZUVudHJ5KHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGlmICh0YXJnZXRFbnRyeVBhdGggPT09IG51bGwpIHtcbiAgICByZW1vdmVFbnRyeShzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjayk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc291cmNlRW50cnlQYXRoID09PSB0YXJnZXRFbnRyeVBhdGgpIHtcbiAgICBjYWxsYmFjayh0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRW50cnlQYXRoKSxcbiAgICAgICAgc291cmNlRW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlU291cmNlRW50cnlQYXRoKSxcbiAgICAgICAgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlU291cmNlRW50cnlQYXRoKTtcblxuICBpZiAoIXNvdXJjZUVudHJ5RXhpc3RzKSB7XG4gICAgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIGNhbGxiYWNrKHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgbW92ZURpcmVjdG9yeShzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgbW92ZUZpbGUoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBtb3ZlRmlsZShzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBzb3VyY2VGaWxlUGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgIC8vL1xuICAgICAgICB0YXJnZXRGaWxlUGF0aCA9IHRhcmdldEVudHJ5UGF0aCwgIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUZpbGVQYXRoKSxcbiAgICAgICAgYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXRGaWxlUGF0aCksXG4gICAgICAgIHRhcmdldEZpbGVFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlVGFyZ2V0RmlsZVBhdGgpO1xuXG4gIGlmICh0YXJnZXRGaWxlRXhpc3RzKSB7XG4gICAgdGFyZ2V0RW50cnlQYXRoID0gc291cmNlRW50cnlQYXRoOyAgLy8vXG5cbiAgICBjYWxsYmFjayh0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbW92ZShhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoLCBhYnNvbHV0ZVRhcmdldEZpbGVQYXRoLCAoZXJyb3IpID0+IHtcbiAgICBjb25zdCBzdWNjZXNzID0gIWVycm9yO1xuICAgIFxuICAgIHRhcmdldEVudHJ5UGF0aCA9IHN1Y2Nlc3MgP1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RW50cnlQYXRoIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlRW50cnlQYXRoOyAgLy8vXG5cbiAgICBjYWxsYmFjayh0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbW92ZURpcmVjdG9yeShzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBzb3VyY2VEaXJlY3RvcnlQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RGlyZWN0b3J5UGF0aCA9IHRhcmdldEVudHJ5UGF0aCwgLy9cbiAgICAgICAgYWJzb2x1dGVTb3VyY2VEaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RGlyZWN0b3J5UGF0aCksXG4gICAgICAgIHRhcmdldERpcmVjdG9yeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHModGFyZ2V0RGlyZWN0b3J5UGF0aCksXG4gICAgICAgIGRpcmVjdG9yeUVtcHR5ID0gaXNEaXJlY3RvcnlFbXB0eShhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgpO1xuXG4gIGlmICghZGlyZWN0b3J5RW1wdHkpIHtcbiAgICB0YXJnZXRFbnRyeVBhdGggPSBzb3VyY2VFbnRyeVBhdGg7ICAvLy9cblxuICAgIGNhbGxiYWNrKHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGFyZ2V0RGlyZWN0b3J5RXhpc3RzKSB7XG4gICAgcmVtb3ZlKGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgICBjb25zdCBzdWNjZXNzID0gIWVycm9yO1xuXG4gICAgICB0YXJnZXRFbnRyeVBhdGggPSBzdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlRW50cnlQYXRoOyAgLy8vXG5cbiAgICAgIGNhbGxiYWNrKHRhcmdldEVudHJ5UGF0aCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBtb3ZlKGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoLCAoZXJyb3IpID0+IHtcbiAgICBjb25zdCBzdWNjZXNzID0gIWVycm9yO1xuXG4gICAgdGFyZ2V0RW50cnlQYXRoID0gc3VjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbnRyeVBhdGggOlxuICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VFbnRyeVBhdGg7ICAvLy9cblxuICAgIGNhbGxiYWNrKHRhcmdldEVudHJ5UGF0aCk7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7a0JBV1ksa0JBQWtCO1FBcUIxQixTQUFTLEdBQVQsU0FBUztBQTlCSSxHQUFVLENBQVYsUUFBVTtBQUNZLEdBQVcsQ0FBWCxVQUFXO0FBRWxDLEdBQXdCLENBQXhCLHFCQUF3QjtBQUNoQixHQUFzQixDQUF0QixTQUFzQjtBQUUxRCxHQUFLLENBQUcsZ0JBQWdCLEdBTDJCLFVBQVcsZUFLdEQsZ0JBQWdCLEVBQ2hCLGdCQUFnQixHQU4yQixVQUFXLHFCQU10RCxnQkFBZ0IsRUFBRSxnQkFBZ0IsR0FOUyxVQUFXLHFCQU1wQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsR0FOVCxVQUFXLHFCQU1sQixnQkFBZ0I7U0FFcEMsa0JBQWtCLENBQUMscUJBQXFCLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQ2pGLEdBQUssQ0FBRyxRQUFRLEdBQUssSUFBSSxDQUFqQixRQUFRLEVBQ1osZ0JBQWdCO1FBUGMsU0FBc0Isc0JBVXRELFFBQVEsV0FDUCxlQUFlLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsSUFBSSxF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