'use strict';

var fsExtra = require('fs-extra'),
    necessary = require('necessary');

var constants = require('./constants'),
    pathMapsUtilities = require('./utilities/pathMaps');

var move = fsExtra.move,
    remove = fsExtra.remove,
    pathUtilities = necessary.pathUtilities,
    fileSystemUtilities = necessary.fileSystemUtilities,
    concatenatePaths = pathUtilities.concatenatePaths,
    asynchronousForEach = pathMapsUtilities.asynchronousForEach,
    DEST_ALREADY_EXISTS_MESSAGE = constants.DEST_ALREADY_EXISTS_MESSAGE,
    checkEntryExists = fileSystemUtilities.checkEntryExists,
    isEntryDirectory = fileSystemUtilities.isEntryDirectory,
    isDirectoryEmpty = fileSystemUtilities.isDirectoryEmpty;


function moveProjectEntries(projectsDirectoryPath, pathMaps, callback) {
  var targetPaths = [];

  asynchronousForEach(pathMaps, function (sourcePath, targetPath, directory, next, done, index) {
    moveEntry(sourcePath, targetPath, projectsDirectoryPath, function (targetPath) {
      targetPaths.push(targetPath);

      next();
    });
  }, function () {
    callback(targetPaths);
  });
}

module.exports = moveProjectEntries;

function moveEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
  if (targetPath === null) {
    callback(targetPath);
  } else {
    if (sourcePath === targetPath) {
      callback(targetPath);
    } else {
      var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
          entryExists = checkEntryExists(absoluteSourcePath);

      if (!entryExists) {
        targetPath = null;

        callback(targetPath);
      } else {
        var entryDirectory = isEntryDirectory(absoluteSourcePath);

        entryDirectory ? moveDirectory(sourcePath, targetPath, projectsDirectoryPath, callback) : moveFile(sourcePath, targetPath, projectsDirectoryPath, callback);
      }
    }
  }
}

function moveFile(sourcePath, targetPath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
      absoluteTargetPath = concatenatePaths(projectsDirectoryPath, targetPath);

  move(absoluteSourcePath, absoluteTargetPath, function (error) {
    var success = !error; ///

    targetPath = success ? targetPath : sourcePath;

    callback(targetPath);
  });
}

function moveDirectory(sourcePath, targetPath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
      absoluteTargetPath = concatenatePaths(projectsDirectoryPath, targetPath),
      directoryEmpty = isDirectoryEmpty(absoluteSourcePath);

  if (!directoryEmpty) {
    var _targetPath = sourcePath;

    callback(_targetPath);
  } else {
    move(absoluteSourcePath, absoluteTargetPath, function (error) {
      var success = !error; ///

      if (success) {
        callback(targetPath);
      } else {
        var message = error.message;


        if (message !== DEST_ALREADY_EXISTS_MESSAGE) {
          var _targetPath2 = sourcePath;

          callback(_targetPath2);
        } else {
          remove(absoluteSourcePath, function (error) {
            var success = !error; ///

            if (!success) {
              targetPath = sourcePath;
            }

            callback(targetPath);
          });
        }
      }
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,