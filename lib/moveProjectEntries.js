"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return moveProjectEntries;
    },
    moveEntryOperation: function() {
        return moveEntryOperation;
    },
    moveDirectory: function() {
        return moveDirectory;
    },
    moveFile: function() {
        return moveFile;
    }
});
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var _removeProjectEntries = require("./removeProjectEntries");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, pathWithoutBottommostNameFromPath = _necessary.pathUtilities.pathWithoutBottommostNameFromPath, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, renameFileEx = _necessary.fileSystemUtilities.renameFile, renameDirectoryEx = _necessary.fileSystemUtilities.renameDirectory, checkDirectoryExists = _necessary.fileSystemUtilities.checkEntryExists;
function moveProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps;
    moveEntries(pathMaps, projectsDirectoryPath, function(targetEntryPaths) {
        var _$json = {
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
function moveEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback) {
    if (targetEntryPath === null) {
        (0, _removeProjectEntries.removeEntryOperation)(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    entryDirectory ? moveDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : moveFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function moveDirectory(oldDirectoryPath, newDirectoryPath, callback) {
    var error = null;
    var newDirectoryPathWithoutBottommostName = pathWithoutBottommostNameFromPath(newDirectoryPath), newParentDirectoryPath = newDirectoryPathWithoutBottommostName, newParentDirectoryExists = checkDirectoryExists(newParentDirectoryPath);
    if (!newParentDirectoryExists) {
        error = "The new '".concat(newDirectoryPath, "' directory's parent directory does not exist.");
    } else {
        try {
            renameDirectoryEx(oldDirectoryPath);
        } catch (nativeError) {
            error = nativeError; ///
        }
    }
    callback(error);
}
function moveFile(oldFilePath, newFilePath, callback) {
    var error = null;
    var newFilePathWithoutBottommostName = pathWithoutBottommostNameFromPath(newFilePath), newParentDirectoryPath = newFilePathWithoutBottommostName, newParentDirectoryExists = checkFileExists(newParentDirectoryPath);
    if (!newParentDirectoryExists) {
        error = "The new '".concat(newFilePath, "' file's parent directory does not exist.");
    } else {
        try {
            renameFileEx(oldFilePath, newFilePath);
        } catch (nativeError) {
            error = nativeError; ///
        }
    }
    callback(error);
}
function moveEntries(pathMaps, projectsDirectoryPath, callback) {
    var targetEntryPaths = [];
    (0, _pathMaps.asynchronousForEach)(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        moveEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        callback(targetEntryPaths);
    });
}
function moveFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath, absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var oldFilePath = absoluteSourceFilePath, newFilePath = absoluteTargetFilePath; ///
    moveFile(oldFilePath, newFilePath, function(error) {
        if (error) {
            targetEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function moveDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath, absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), sourceDirectoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!sourceDirectoryEmpty) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        var directoryPath = absoluteSourceDirectoryPath; ///
        (0, _removeProjectEntries.removeEntry)(directoryPath, function(error) {
            if (error) {
                targetEntryPath = sourceEntryPath; ///
            }
            callback(sourceEntryPath, targetEntryPath);
        });
        return;
    }
    var oldDirectoryPath = absoluteSourceDirectoryPath, newDirectoryPath = absoluteTargetDirectoryPath; ///
    moveDirectory(oldDirectoryPath, newDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb3ZlUHJvamVjdEVudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHBhdGhVdGlsaXRpZXMsIGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IGFzeW5jaHJvbm91c0ZvckVhY2ggfSBmcm9tIFwiLi91dGlsaXRpZXMvcGF0aE1hcHNcIjtcbmltcG9ydCB7IHJlbW92ZUVudHJ5T3BlcmF0aW9uIH0gZnJvbSBcIi4vcmVtb3ZlUHJvamVjdEVudHJpZXNcIjtcbmltcG9ydCB7IHJlbW92ZUVudHJ5IGFzIHJlbW92ZURpcmVjdG9yeSB9IGZyb20gXCIuL3JlbW92ZVByb2plY3RFbnRyaWVzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocywgcGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZUZyb21QYXRoIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyBpc0RpcmVjdG9yeUVtcHR5LFxuICAgICAgICBjaGVja0VudHJ5RXhpc3RzLFxuICAgICAgICByZW5hbWVGaWxlOiByZW5hbWVGaWxlRXgsXG4gICAgICAgIHJlbmFtZURpcmVjdG9yeTogcmVuYW1lRGlyZWN0b3J5RXgsXG4gICAgICAgIGNoZWNrRW50cnlFeGlzdHM6IGNoZWNrRGlyZWN0b3J5RXhpc3RzIH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uO1xuXG4gIG1vdmVFbnRyaWVzKHBhdGhNYXBzLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsICh0YXJnZXRFbnRyeVBhdGhzKSA9PiB7XG4gICAgY29uc3QganNvbiA9IHtcbiAgICAgIHRhcmdldEVudHJ5UGF0aHNcbiAgICB9O1xuXG4gICAgY2FsbGJhY2soanNvbik7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZUVudHJ5T3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBlbnRyeURpcmVjdG9yeSwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBpZiAodGFyZ2V0RW50cnlQYXRoID09PSBudWxsKSB7XG4gICAgcmVtb3ZlRW50cnlPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIGVudHJ5RGlyZWN0b3J5LCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFic29sdXRlU291cmNlRW50cnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUVudHJ5UGF0aCksXG4gICAgICAgIHNvdXJjZUVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCk7XG5cbiAgaWYgKCFzb3VyY2VFbnRyeUV4aXN0cykge1xuICAgIHRhcmdldEVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgbW92ZURpcmVjdG9yeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgbW92ZUZpbGVPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZURpcmVjdG9yeShvbGREaXJlY3RvcnlQYXRoLCBuZXdEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBsZXQgZXJyb3IgPSBudWxsO1xuXG4gIGNvbnN0IG5ld0RpcmVjdG9yeVBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWUgPSBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lRnJvbVBhdGgobmV3RGlyZWN0b3J5UGF0aCksXG4gICAgICAgIG5ld1BhcmVudERpcmVjdG9yeVBhdGggPSBuZXdEaXJlY3RvcnlQYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lLCAvLy9cbiAgICAgICAgbmV3UGFyZW50RGlyZWN0b3J5RXhpc3RzID0gY2hlY2tEaXJlY3RvcnlFeGlzdHMobmV3UGFyZW50RGlyZWN0b3J5UGF0aCk7XG5cbiAgaWYgKCFuZXdQYXJlbnREaXJlY3RvcnlFeGlzdHMpIHtcbiAgICBlcnJvciA9IGBUaGUgbmV3ICcke25ld0RpcmVjdG9yeVBhdGh9JyBkaXJlY3RvcnkncyBwYXJlbnQgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0LmA7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlbmFtZURpcmVjdG9yeUV4KG9sZERpcmVjdG9yeVBhdGgpO1xuICAgIH0gY2F0Y2ggKG5hdGl2ZUVycm9yKSB7XG4gICAgICBlcnJvciA9IG5hdGl2ZUVycm9yOyAgLy8vXG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZUZpbGUob2xkRmlsZVBhdGgsIG5ld0ZpbGVQYXRoLCBjYWxsYmFjaykge1xuICBsZXQgZXJyb3IgPSBudWxsO1xuXG4gIGNvbnN0IG5ld0ZpbGVQYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lID0gcGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZUZyb21QYXRoKG5ld0ZpbGVQYXRoKSxcbiAgICAgICAgbmV3UGFyZW50RGlyZWN0b3J5UGF0aCA9IG5ld0ZpbGVQYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lLCAvLy9cbiAgICAgICAgbmV3UGFyZW50RGlyZWN0b3J5RXhpc3RzID0gY2hlY2tGaWxlRXhpc3RzKG5ld1BhcmVudERpcmVjdG9yeVBhdGgpO1xuXG4gIGlmICghbmV3UGFyZW50RGlyZWN0b3J5RXhpc3RzKSB7XG4gICAgZXJyb3IgPSBgVGhlIG5ldyAnJHtuZXdGaWxlUGF0aH0nIGZpbGUncyBwYXJlbnQgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0LmA7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlbmFtZUZpbGVFeChvbGRGaWxlUGF0aCwgbmV3RmlsZVBhdGgpO1xuICAgIH0gY2F0Y2ggKG5hdGl2ZUVycm9yKSB7XG4gICAgICBlcnJvciA9IG5hdGl2ZUVycm9yOyAgLy8vXG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBtb3ZlRW50cmllcyhwYXRoTWFwcywgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCB0YXJnZXRFbnRyeVBhdGhzID0gW107XG5cbiAgYXN5bmNocm9ub3VzRm9yRWFjaChcbiAgICBwYXRoTWFwcyxcbiAgICAoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIGVudHJ5RGlyZWN0b3J5LCBuZXh0LCBkb25lLCBpbmRleCkgPT4ge1xuICAgICAgbW92ZUVudHJ5T3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBlbnRyeURpcmVjdG9yeSwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCAoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpID0+IHtcbiAgICAgICAgdGFyZ2V0RW50cnlQYXRocy5wdXNoKHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICAoKSA9PiB7XG4gICAgICBjYWxsYmFjayh0YXJnZXRFbnRyeVBhdGhzKTtcbiAgICB9XG4gICk7XG59XG5cbmZ1bmN0aW9uIG1vdmVGaWxlT3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHNvdXJjZUZpbGVQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RmlsZVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUZpbGVQYXRoKSxcbiAgICAgICAgYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCB0YXJnZXRGaWxlUGF0aCksXG4gICAgICAgIHRhcmdldEZpbGVFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlVGFyZ2V0RmlsZVBhdGgpO1xuXG4gIGlmICh0YXJnZXRGaWxlRXhpc3RzKSB7XG4gICAgdGFyZ2V0RW50cnlQYXRoID0gc291cmNlRW50cnlQYXRoOyAgLy8vXG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBvbGRGaWxlUGF0aCA9IGFic29sdXRlU291cmNlRmlsZVBhdGgsIC8vL1xuICAgICAgICBuZXdGaWxlUGF0aCA9IGFic29sdXRlVGFyZ2V0RmlsZVBhdGg7IC8vL1xuXG4gIG1vdmVGaWxlKG9sZEZpbGVQYXRoLCBuZXdGaWxlUGF0aCwgKGVycm9yKSA9PiB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1vdmVEaXJlY3RvcnlPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3Qgc291cmNlRGlyZWN0b3J5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aCwgIC8vL1xuICAgICAgICB0YXJnZXREaXJlY3RvcnlQYXRoID0gdGFyZ2V0RW50cnlQYXRoLCAgLy8vXG4gICAgICAgIGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VEaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgc291cmNlRGlyZWN0b3J5RW1wdHkgPSBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCk7XG5cbiAgaWYgKCFzb3VyY2VEaXJlY3RvcnlFbXB0eSkge1xuICAgIHRhcmdldEVudHJ5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aDsgIC8vL1xuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldERpcmVjdG9yeVBhdGgpLFxuICAgICAgICB0YXJnZXREaXJlY3RvcnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCk7XG5cbiAgaWYgKHRhcmdldERpcmVjdG9yeUV4aXN0cykge1xuICAgIGNvbnN0IGRpcmVjdG9yeVBhdGggPSBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGg7ICAvLy9cblxuICAgIHJlbW92ZURpcmVjdG9yeShkaXJlY3RvcnlQYXRoLCAoZXJyb3IpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0YXJnZXRFbnRyeVBhdGggPSBzb3VyY2VFbnRyeVBhdGg7ICAvLy9cbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb2xkRGlyZWN0b3J5UGF0aCA9IGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgLy8vXG4gICAgICAgIG5ld0RpcmVjdG9yeVBhdGggPSBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGg7IC8vL1xuXG4gIG1vdmVEaXJlY3Rvcnkob2xkRGlyZWN0b3J5UGF0aCwgbmV3RGlyZWN0b3J5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB0YXJnZXRFbnRyeVBhdGggPSBzb3VyY2VFbnRyeVBhdGg7ICAvLy9cbiAgICB9XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbIm1vdmVQcm9qZWN0RW50cmllcyIsIm1vdmVFbnRyeU9wZXJhdGlvbiIsIm1vdmVEaXJlY3RvcnkiLCJtb3ZlRmlsZSIsImNvbmNhdGVuYXRlUGF0aHMiLCJwYXRoVXRpbGl0aWVzIiwicGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZUZyb21QYXRoIiwiaXNEaXJlY3RvcnlFbXB0eSIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJjaGVja0VudHJ5RXhpc3RzIiwicmVuYW1lRmlsZSIsInJlbmFtZUZpbGVFeCIsInJlbmFtZURpcmVjdG9yeSIsInJlbmFtZURpcmVjdG9yeUV4IiwiY2hlY2tEaXJlY3RvcnlFeGlzdHMiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsIm1vdmVFbnRyaWVzIiwidGFyZ2V0RW50cnlQYXRocyIsInNvdXJjZUVudHJ5UGF0aCIsInRhcmdldEVudHJ5UGF0aCIsImVudHJ5RGlyZWN0b3J5IiwicmVtb3ZlRW50cnlPcGVyYXRpb24iLCJhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCIsInNvdXJjZUVudHJ5RXhpc3RzIiwibW92ZURpcmVjdG9yeU9wZXJhdGlvbiIsIm1vdmVGaWxlT3BlcmF0aW9uIiwib2xkRGlyZWN0b3J5UGF0aCIsIm5ld0RpcmVjdG9yeVBhdGgiLCJlcnJvciIsIm5ld0RpcmVjdG9yeVBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWUiLCJuZXdQYXJlbnREaXJlY3RvcnlQYXRoIiwibmV3UGFyZW50RGlyZWN0b3J5RXhpc3RzIiwibmF0aXZlRXJyb3IiLCJvbGRGaWxlUGF0aCIsIm5ld0ZpbGVQYXRoIiwibmV3RmlsZVBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWUiLCJjaGVja0ZpbGVFeGlzdHMiLCJhc3luY2hyb25vdXNGb3JFYWNoIiwibmV4dCIsImRvbmUiLCJpbmRleCIsInB1c2giLCJzb3VyY2VGaWxlUGF0aCIsInRhcmdldEZpbGVQYXRoIiwiYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCIsImFic29sdXRlVGFyZ2V0RmlsZVBhdGgiLCJ0YXJnZXRGaWxlRXhpc3RzIiwic291cmNlRGlyZWN0b3J5UGF0aCIsInRhcmdldERpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgiLCJzb3VyY2VEaXJlY3RvcnlFbXB0eSIsImFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCIsInRhcmdldERpcmVjdG9yeUV4aXN0cyIsImRpcmVjdG9yeVBhdGgiLCJyZW1vdmVEaXJlY3RvcnkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQWVBLE9BVUM7ZUFWdUJBOztJQVlSQyxrQkFBa0I7ZUFBbEJBOztJQXVCQUMsYUFBYTtlQUFiQTs7SUFvQkFDLFFBQVE7ZUFBUkE7Ozt5QkFwRW1DO3dCQUVmO29DQUNDO0FBR3JDLElBQVFDLG1CQUF3REMsd0JBQWEsQ0FBckVELGtCQUFrQkUsb0NBQXNDRCx3QkFBYSxDQUFuREMsbUNBQ2xCQyxtQkFJMkNDLDhCQUFtQixDQUo5REQsa0JBQ0FFLG1CQUcyQ0QsOEJBQW1CLENBSDlEQyxrQkFDQUMsQUFBWUMsZUFFK0JILDhCQUFtQixDQUY5REUsWUFDQUUsQUFBaUJDLG9CQUMwQkwsOEJBQW1CLENBRDlESSxpQkFDQUgsQUFBa0JLLHVC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