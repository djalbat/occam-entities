"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return renameProjectEntry;
    },
    renameEntryOperation: function() {
        return renameEntryOperation;
    }
});
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var last = _necessary.arrayUtilities.last, concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory;
function renameProjectEntry(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, lastPathMap = last(pathMaps), pathMap = lastPathMap, sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath;
    renameEntryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
        var entryMissing = sourceEntryPath === null, entryUnmoved = sourceEntryPath === targetEntryPath, sourceEntryPaths = [], targetEntryPaths = [];
        pathMaps.forEach(function(pathMap) {
            var _$sourceEntryPath, _$targetEntryPath;
            if (false) {
            ///
            } else if (entryMissing) {
                _$sourceEntryPath = null;
                _$targetEntryPath = pathMap.targetEntryPath;
            } else if (entryUnmoved) {
                _$sourceEntryPath = pathMap.sourceEntryPath;
                _$targetEntryPath = _$sourceEntryPath; ///
            } else {
                var ref;
                ref = pathMap, _$sourceEntryPath = ref.sourceEntryPath, _$targetEntryPath = ref.targetEntryPath, ref;
            }
            sourceEntryPaths.push(_$sourceEntryPath);
            targetEntryPaths.push(_$targetEntryPath);
        });
        var _$json = {
            sourceEntryPaths: sourceEntryPaths,
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
function renameEntryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    entryDirectory ? renameDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : renameFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function renameFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath; ///
    if (sourceFilePath === targetFilePath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath), sourceFileExists = checkEntryExists(absoluteSourceFilePath);
    if (!sourceFileExists) {
        sourceEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra.move)(absoluteSourceFilePath, absoluteTargetFilePath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function renameDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath; //
    if (sourceDirectoryPath === targetDirectoryPath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), sourceDirectoryExists = checkEntryExists(absoluteSourceDirectoryPath);
    if (!sourceDirectoryExists) {
        sourceEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra.move)(absoluteSourceDirectoryPath, absoluteTargetDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,