"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    versionFromNode: function() {
        return versionFromNode;
    },
    repositoryFromNode: function() {
        return repositoryFromNode;
    },
    dependenciesFromNode: function() {
        return dependenciesFromNode;
    },
    dependencyNamesFromNode: function() {
        return dependencyNamesFromNode;
    },
    default: function() {
        return _default;
    }
});
var _version = /*#__PURE__*/ _interopRequireDefault(require("../version"));
var _dependency = /*#__PURE__*/ _interopRequireDefault(require("../dependency"));
var _dependencies = /*#__PURE__*/ _interopRequireDefault(require("../dependencies"));
var _shortenedVersion = /*#__PURE__*/ _interopRequireDefault(require("../shortenedVersion"));
var _content = require("../utilities/content");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var dependencyNodesQuery = (0, _query.nodesQuery)("//dependencies/dependency"), repositoryTerminalNodeQuery = (0, _query.nodeQuery)("//repository!/@*!"), versionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//version!/versionNumber!/@*!"), dependencyNameTerminalNodeQuery = (0, _query.nodeQuery)("/dependency/name!/@*!"), shortenedVersionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//dependency/shortenedVersionNumber/@*!");
function versionFromNode(node) {
    var version = null;
    if (node !== null) {
        var versionNumberTerminalNode = versionNumberTerminalNodeQuery(node), versionNumberTerminalNodeContent = versionNumberTerminalNode.getContent(), versionNumber = (0, _content.trimDoubleQuotes)(versionNumberTerminalNodeContent); //
        version = _version.default.fromVersionNumber(versionNumber);
    }
    return version;
}
function repositoryFromNode(node) {
    var repository = null;
    if (node !== null) {
        var repositoryTerminalNode = repositoryTerminalNodeQuery(node), repositoryTerminalNodeContent = repositoryTerminalNode.getContent();
        repository = (0, _content.trimDoubleQuotes)(repositoryTerminalNodeContent); //
    }
    return repository;
}
function dependenciesFromNode(node) {
    var dependencies = _dependencies.default.fromNothing();
    if (node !== null) {
        var dependencyNodes = dependencyNodesQuery(node);
        dependencyNodes.forEach(function(dependencyNode) {
            var dependencyNameTerminalNode = dependencyNameTerminalNodeQuery(dependencyNode), shortenedVersionNumberTerminalNode = shortenedVersionNumberTerminalNodeQuery(dependencyNode), dependencyNameTerminalNodeContent = dependencyNameTerminalNode.getContent(), shortenedVersionNumberTerminalNodeContent = shortenedVersionNumberTerminalNode.getContent(), string = (0, _content.trimDoubleQuotes)(shortenedVersionNumberTerminalNodeContent), name = (0, _content.trimDoubleQuotes)(dependencyNameTerminalNodeContent), shortenedVersion = _shortenedVersion.default.fromString(string), dependency = _dependency.default.fromNameAndShortenedVersion(name, shortenedVersion);
            dependencies.addDependency(dependency);
        });
    }
    return dependencies;
}
function dependencyNamesFromNode(node) {
    var dependencies = this.dependenciesFromNode(node), dependencyNames = dependencies.mapDependency(function(dependency) {
        var dependencyName = dependency.getName();
        return dependencyName;
    });
    return dependencyNames;
}
var _default = {
    versionFromNode: versionFromNode,
    repositoryFromNode: repositoryFromNode,
    dependenciesFromNode: dependenciesFromNode,
    dependencyNamesFromNode: dependencyNamesFromNode
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YUpTT04uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBWZXJzaW9uIGZyb20gXCIuLi92ZXJzaW9uXCI7XG5pbXBvcnQgRGVwZW5kZW5jeSBmcm9tIFwiLi4vZGVwZW5kZW5jeVwiO1xuaW1wb3J0IERlcGVuZGVuY2llcyBmcm9tIFwiLi4vZGVwZW5kZW5jaWVzXCI7XG5pbXBvcnQgU2hvcnRlbmVkVmVyc2lvbiBmcm9tIFwiLi4vc2hvcnRlbmVkVmVyc2lvblwiO1xuXG5pbXBvcnQgeyB0cmltRG91YmxlUXVvdGVzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9jb250ZW50XCI7XG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGRlcGVuZGVuY3lOb2Rlc1F1ZXJ5ID0gbm9kZXNRdWVyeShcIi8vZGVwZW5kZW5jaWVzL2RlcGVuZGVuY3lcIiksXG4gICAgICByZXBvc2l0b3J5VGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvL3JlcG9zaXRvcnkhL0AqIVwiKSxcbiAgICAgIHZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi8vdmVyc2lvbiEvdmVyc2lvbk51bWJlciEvQCohXCIpLFxuICAgICAgZGVwZW5kZW5jeU5hbWVUZXJtaW5hbE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9kZXBlbmRlbmN5L25hbWUhL0AqIVwiKSxcbiAgICAgIHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi8vZGVwZW5kZW5jeS9zaG9ydGVuZWRWZXJzaW9uTnVtYmVyL0AqIVwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZlcnNpb25Gcm9tTm9kZShub2RlKSB7XG4gIGxldCB2ZXJzaW9uID0gbnVsbDtcblxuICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGUgPSB2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlUXVlcnkobm9kZSksXG4gICAgICAgICAgdmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZUNvbnRlbnQgPSB2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlLmdldENvbnRlbnQoKSxcbiAgICAgICAgICB2ZXJzaW9uTnVtYmVyID0gdHJpbURvdWJsZVF1b3Rlcyh2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCk7IC8vXG5cbiAgICB2ZXJzaW9uID0gVmVyc2lvbi5mcm9tVmVyc2lvbk51bWJlcih2ZXJzaW9uTnVtYmVyKTtcbiAgfVxuXG4gIHJldHVybiB2ZXJzaW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwb3NpdG9yeUZyb21Ob2RlKG5vZGUpIHtcbiAgbGV0IHJlcG9zaXRvcnkgPSBudWxsO1xuXG4gIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcmVwb3NpdG9yeVRlcm1pbmFsTm9kZSA9IHJlcG9zaXRvcnlUZXJtaW5hbE5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgICByZXBvc2l0b3J5VGVybWluYWxOb2RlQ29udGVudCA9IHJlcG9zaXRvcnlUZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpO1xuXG4gICAgcmVwb3NpdG9yeSA9IHRyaW1Eb3VibGVRdW90ZXMocmVwb3NpdG9yeVRlcm1pbmFsTm9kZUNvbnRlbnQpOyAvL1xuICB9XG5cbiAgcmV0dXJuIHJlcG9zaXRvcnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXBlbmRlbmNpZXNGcm9tTm9kZShub2RlKSB7XG4gIGNvbnN0IGRlcGVuZGVuY2llcyA9IERlcGVuZGVuY2llcy5mcm9tTm90aGluZygpO1xuXG4gIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgZGVwZW5kZW5jeU5vZGVzID0gZGVwZW5kZW5jeU5vZGVzUXVlcnkobm9kZSk7XG5cbiAgICBkZXBlbmRlbmN5Tm9kZXMuZm9yRWFjaCgoZGVwZW5kZW5jeU5vZGUpID0+IHtcbiAgICAgIGNvbnN0IGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlID0gZGVwZW5kZW5jeU5hbWVUZXJtaW5hbE5vZGVRdWVyeShkZXBlbmRlbmN5Tm9kZSksXG4gICAgICAgICAgICBzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlID0gc2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZVF1ZXJ5KGRlcGVuZGVuY3lOb2RlKSxcbiAgICAgICAgICAgIGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlQ29udGVudCA9IGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlLmdldENvbnRlbnQoKSxcbiAgICAgICAgICAgIHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVDb250ZW50ID0gc2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgICAgICBzdHJpbmcgPSB0cmltRG91YmxlUXVvdGVzKHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVDb250ZW50KSwgIC8vL1xuICAgICAgICAgICAgbmFtZSA9IHRyaW1Eb3VibGVRdW90ZXMoZGVwZW5kZW5jeU5hbWVUZXJtaW5hbE5vZGVDb250ZW50KSwvLy9cbiAgICAgICAgICAgIHNob3J0ZW5lZFZlcnNpb24gPSBTaG9ydGVuZWRWZXJzaW9uLmZyb21TdHJpbmcoc3RyaW5nKSxcbiAgICAgICAgICAgIGRlcGVuZGVuY3kgPSBEZXBlbmRlbmN5LmZyb21OYW1lQW5kU2hvcnRlbmVkVmVyc2lvbihuYW1lLCBzaG9ydGVuZWRWZXJzaW9uKTtcblxuICAgICAgZGVwZW5kZW5jaWVzLmFkZERlcGVuZGVuY3koZGVwZW5kZW5jeSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZGVwZW5kZW5jaWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVwZW5kZW5jeU5hbWVzRnJvbU5vZGUobm9kZSkge1xuICBjb25zdCBkZXBlbmRlbmNpZXMgPSB0aGlzLmRlcGVuZGVuY2llc0Zyb21Ob2RlKG5vZGUpLFxuICAgICAgICBkZXBlbmRlbmN5TmFtZXMgPSBkZXBlbmRlbmNpZXMubWFwRGVwZW5kZW5jeSgoZGVwZW5kZW5jeSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRlcGVuZGVuY3lOYW1lID0gZGVwZW5kZW5jeS5nZXROYW1lKCk7XG5cbiAgICAgICAgICByZXR1cm4gZGVwZW5kZW5jeU5hbWU7XG4gICAgICAgIH0pXG5cbiAgcmV0dXJuIGRlcGVuZGVuY3lOYW1lcztcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICB2ZXJzaW9uRnJvbU5vZGUsXG4gIHJlcG9zaXRvcnlGcm9tTm9kZSxcbiAgZGVwZW5kZW5jaWVzRnJvbU5vZGUsXG4gIGRlcGVuZGVuY3lOYW1lc0Zyb21Ob2RlXG59O1xuIl0sIm5hbWVzIjpbInZlcnNpb25Gcm9tTm9kZSIsInJlcG9zaXRvcnlGcm9tTm9kZSIsImRlcGVuZGVuY2llc0Zyb21Ob2RlIiwiZGVwZW5kZW5jeU5hbWVzRnJvbU5vZGUiLCJkZXBlbmRlbmN5Tm9kZXNRdWVyeSIsIm5vZGVzUXVlcnkiLCJyZXBvc2l0b3J5VGVybWluYWxOb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlUXVlcnkiLCJkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZVF1ZXJ5Iiwic2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZVF1ZXJ5Iiwibm9kZSIsInZlcnNpb24iLCJ2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlIiwidmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZUNvbnRlbnQiLCJnZXRDb250ZW50IiwidmVyc2lvbk51bWJlciIsInRyaW1Eb3VibGVRdW90ZXMiLCJWZXJzaW9uIiwiZnJvbVZlcnNpb25OdW1iZXIiLCJyZXBvc2l0b3J5IiwicmVwb3NpdG9yeVRlcm1pbmFsTm9kZSIsInJlcG9zaXRvcnlUZXJtaW5hbE5vZGVDb250ZW50IiwiZGVwZW5kZW5jaWVzIiwiRGVwZW5kZW5jaWVzIiwiZnJvbU5vdGhpbmciLCJkZXBlbmRlbmN5Tm9kZXMiLCJmb3JFYWNoIiwiZGVwZW5kZW5jeU5vZGUiLCJkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZSIsInNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGUiLCJkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZUNvbnRlbnQiLCJzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCIsInN0cmluZyIsIm5hbWUiLCJzaG9ydGVuZWRWZXJzaW9uIiwiU2hvcnRlbmVkVmVyc2lvbiIsImZyb21TdHJpbmciLCJkZXBlbmRlbmN5IiwiRGVwZW5kZW5jeSIsImZyb21OYW1lQW5kU2hvcnRlbmVkVmVyc2lvbiIsImFkZERlcGVuZGVuY3kiLCJkZXBlbmRlbmN5TmFtZXMiLCJtYXBEZXBlbmRlbmN5IiwiZGVwZW5kZW5jeU5hbWUiLCJnZXROYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFnQmdCQSxlQUFlO2VBQWZBOztJQWNBQyxrQkFBa0I7ZUFBbEJBOztJQWFBQyxvQkFBb0I7ZUFBcEJBOztJQXVCQUMsdUJBQXVCO2VBQXZCQTs7SUFXaEIsT0FLRTtlQUxGOzs7NERBM0VvQjsrREFDRztpRUFDRTtxRUFDSTt1QkFFSTtxQkFDSzs7Ozs7O0FBRXRDLElBQU1DLHVCQUF1QkMsSUFBQUEsaUJBQVUsRUFBQyw4QkFDbENDLDhCQUE4QkMsSUFBQUEsZ0JBQVMsRUFBQyxzQkFDeENDLGlDQUFpQ0QsSUFBQUEsZ0JBQVMsRUFBQyxrQ0FDM0NFLGtDQUFrQ0YsSUFBQUEsZ0JBQVMsRUFBQywwQkFDNUNHLDBDQUEwQ0gsSUFBQUEsZ0JBQVMsRUFBQztBQUVuRCxTQUFTUCxnQkFBZ0JXLElBQUksRUFBRTtJQUNwQyxJQUFJQyxVQUFVLElBQUk7SUFFbEIsSUFBSUQsU0FBUyxJQUFJLEVBQUU7UUFDakIsSUFBTUUsNEJBQTRCTCwrQkFBK0JHLE9BQzNERyxtQ0FBbUNELDBCQUEwQkUsVUFBVSxJQUN2RUMsZ0JBQWdCQyxJQUFBQSx5QkFBZ0IsRUFBQ0gsbUNBQW1DLEVBQUU7UUFFNUVGLFVBQVVNLGdCQUFPLENBQUNDLGlCQUFpQixDQUFDSDtJQUN0QyxDQUFDO0lBRUQsT0FBT0o7QUFDVDtBQUVPLFNBQVNYLG1CQUFtQlUsSUFBSSxFQUFFO0lBQ3ZDLElBQUlTLGFBQWEsSUFBSTtJQUVyQixJQUFJVCxTQUFTLElBQUksRUFBRTtRQUNqQixJQUFNVSx5QkFBeUJmLDRCQUE0QkssT0FDckRXLGdDQUFnQ0QsdUJBQXVCTixVQUFVO1FBRXZFSyxhQUFhSCxJQUFBQSx5QkFBZ0IsRUFBQ0ssZ0NBQWdDLEVBQUU7SUFDbEUsQ0FBQztJQUVELE9BQU9GO0FBQ1Q7QUFFTyxTQUFTbEIscUJBQXFCUyxJQUFJLEVBQUU7SUFDekMsSUFBTVksZUFBZUMscUJBQVksQ0FBQ0MsV0FBVztJQUU3QyxJQUFJZCxTQUFTLElBQUksRUFBRTtRQUNqQixJQUFNZSxrQkFBa0J0QixxQkFBcUJPO1FBRTdDZSxnQkFBZ0JDLE9BQU8sQ0FBQyxTQUFDQyxnQkFBbUI7WUFDMUMsSUFBTUMsNkJBQTZCcEIsZ0NBQWdDbUIsaUJBQzdERSxxQ0FBcUNwQix3Q0FBd0NrQixpQkFDN0VHLG9DQUFvQ0YsMkJBQTJCZCxVQUFVLElBQ3pFaUIsNENBQTRDRixtQ0FBbUNmLFVBQVUsSUFDekZrQixTQUFTaEIsSUFBQUEseUJBQWdCLEVBQUNlLDRDQUMxQkUsT0FBT2pCLElBQUFBLHlCQUFnQixFQUFDYyxvQ0FDeEJJLG1CQUFtQkMseUJBQWdCLENBQUNDLFVBQVUsQ0FBQ0osU0FDL0NLLGFBQWFDLG1CQUFVLENBQUNDLDJCQUEyQixDQUFDTixNQUFNQztZQUVoRVosYUFBYWtCLGFBQWEsQ0FBQ0g7UUFDN0I7SUFDRixDQUFDO0lBRUQsT0FBT2Y7QUFDVDtBQUVPLFNBQVNwQix3QkFBd0JRLElBQUksRUFBRTtJQUM1QyxJQUFNWSxlQUFlLElBQUksQ0FBQ3JCLG9CQUFvQixDQUFDUyxPQUN6QytCLGtCQUFrQm5CLGFBQWFvQixhQUFhLENBQUMsU0FBQ0wsWUFBZTtRQUMzRCxJQUFNTSxpQkFBaUJOLFdBQVdPLE9BQU87UUFFekMsT0FBT0Q7SUFDVDtJQUVOLE9BQU9GO0FBQ1Q7SUFFQSxXQUFlO0lBQ2IxQyxpQkFBQUE7SUFDQUMsb0JBQUFBO0lBQ0FDLHNCQUFBQTtJQUNBQyx5QkFBQUE7QUFDRiJ9