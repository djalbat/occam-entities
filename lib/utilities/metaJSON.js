"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    versionFromNode: function() {
        return versionFromNode;
    },
    repositoryFromNode: function() {
        return repositoryFromNode;
    },
    dependenciesFromNode: function() {
        return dependenciesFromNode;
    },
    dependencyNamesFromNode: function() {
        return dependencyNamesFromNode;
    },
    default: function() {
        return _default;
    }
});
var _version = /*#__PURE__*/ _interopRequireDefault(require("../version"));
var _dependency = /*#__PURE__*/ _interopRequireDefault(require("../dependency"));
var _dependencies = /*#__PURE__*/ _interopRequireDefault(require("../dependencies"));
var _shortenedVersion = /*#__PURE__*/ _interopRequireDefault(require("../shortenedVersion"));
var _content = require("../utilities/content");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var dependencyNodesQuery = (0, _query.nodesQuery)("//dependencies/dependency"), repositoryTerminalNodeQuery = (0, _query.nodeQuery)("//repository!/@*!"), versionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//version!/versionNumber!/@*!"), dependencyNameTerminalNodeQuery = (0, _query.nodeQuery)("/dependency/name!/@*!"), shortenedVersionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//dependency/shortenedVersionNumber/@*!");
function versionFromNode(node) {
    var version = null;
    if (node !== null) {
        var versionNumberTerminalNode = versionNumberTerminalNodeQuery(node), versionNumberTerminalNodeContent = versionNumberTerminalNode.getContent(), versionNumber = (0, _content.trimDoubleQuotes)(versionNumberTerminalNodeContent); //
        version = _version.default.fromVersionNumber(versionNumber);
    }
    return version;
}
function repositoryFromNode(node) {
    var repository = null;
    if (node !== null) {
        var repositoryTerminalNode = repositoryTerminalNodeQuery(node), repositoryTerminalNodeContent = repositoryTerminalNode.getContent();
        repository = (0, _content.trimDoubleQuotes)(repositoryTerminalNodeContent); //
    }
    return repository;
}
function dependenciesFromNode(node) {
    var dependencies = _dependencies.default.fromNothing();
    if (node !== null) {
        var dependencyNodes = dependencyNodesQuery(node);
        dependencyNodes.forEach(function(dependencyNode) {
            var dependencyNameTerminalNode = dependencyNameTerminalNodeQuery(dependencyNode), shortenedVersionNumberTerminalNode = shortenedVersionNumberTerminalNodeQuery(dependencyNode), dependencyNameTerminalNodeContent = dependencyNameTerminalNode.getContent(), shortenedVersionNumberTerminalNodeContent = shortenedVersionNumberTerminalNode.getContent(), string = (0, _content.trimDoubleQuotes)(shortenedVersionNumberTerminalNodeContent), name = (0, _content.trimDoubleQuotes)(dependencyNameTerminalNodeContent), shortenedVersion = _shortenedVersion.default.fromString(string), dependency = _dependency.default.fromNameAndShortenedVersion(name, shortenedVersion);
            dependencies.addDependency(dependency);
        });
    }
    return dependencies;
}
function dependencyNamesFromNode(node) {
    var dependencies = dependenciesFromNode(node), dependencyNames = dependencies.mapDependency(function(dependency) {
        var dependencyName = dependency.getName();
        return dependencyName;
    });
    return dependencyNames;
}
var _default = {
    versionFromNode: versionFromNode,
    repositoryFromNode: repositoryFromNode,
    dependenciesFromNode: dependenciesFromNode,
    dependencyNamesFromNode: dependencyNamesFromNode
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YUpTT04uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBWZXJzaW9uIGZyb20gXCIuLi92ZXJzaW9uXCI7XG5pbXBvcnQgRGVwZW5kZW5jeSBmcm9tIFwiLi4vZGVwZW5kZW5jeVwiO1xuaW1wb3J0IERlcGVuZGVuY2llcyBmcm9tIFwiLi4vZGVwZW5kZW5jaWVzXCI7XG5pbXBvcnQgU2hvcnRlbmVkVmVyc2lvbiBmcm9tIFwiLi4vc2hvcnRlbmVkVmVyc2lvblwiO1xuXG5pbXBvcnQgeyB0cmltRG91YmxlUXVvdGVzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9jb250ZW50XCI7XG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGRlcGVuZGVuY3lOb2Rlc1F1ZXJ5ID0gbm9kZXNRdWVyeShcIi8vZGVwZW5kZW5jaWVzL2RlcGVuZGVuY3lcIiksXG4gICAgICByZXBvc2l0b3J5VGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvL3JlcG9zaXRvcnkhL0AqIVwiKSxcbiAgICAgIHZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi8vdmVyc2lvbiEvdmVyc2lvbk51bWJlciEvQCohXCIpLFxuICAgICAgZGVwZW5kZW5jeU5hbWVUZXJtaW5hbE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9kZXBlbmRlbmN5L25hbWUhL0AqIVwiKSxcbiAgICAgIHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi8vZGVwZW5kZW5jeS9zaG9ydGVuZWRWZXJzaW9uTnVtYmVyL0AqIVwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZlcnNpb25Gcm9tTm9kZShub2RlKSB7XG4gIGxldCB2ZXJzaW9uID0gbnVsbDtcblxuICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGUgPSB2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlUXVlcnkobm9kZSksXG4gICAgICAgICAgdmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZUNvbnRlbnQgPSB2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlLmdldENvbnRlbnQoKSxcbiAgICAgICAgICB2ZXJzaW9uTnVtYmVyID0gdHJpbURvdWJsZVF1b3Rlcyh2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCk7IC8vXG5cbiAgICB2ZXJzaW9uID0gVmVyc2lvbi5mcm9tVmVyc2lvbk51bWJlcih2ZXJzaW9uTnVtYmVyKTtcbiAgfVxuXG4gIHJldHVybiB2ZXJzaW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwb3NpdG9yeUZyb21Ob2RlKG5vZGUpIHtcbiAgbGV0IHJlcG9zaXRvcnkgPSBudWxsO1xuXG4gIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcmVwb3NpdG9yeVRlcm1pbmFsTm9kZSA9IHJlcG9zaXRvcnlUZXJtaW5hbE5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgICByZXBvc2l0b3J5VGVybWluYWxOb2RlQ29udGVudCA9IHJlcG9zaXRvcnlUZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpO1xuXG4gICAgcmVwb3NpdG9yeSA9IHRyaW1Eb3VibGVRdW90ZXMocmVwb3NpdG9yeVRlcm1pbmFsTm9kZUNvbnRlbnQpOyAvL1xuICB9XG5cbiAgcmV0dXJuIHJlcG9zaXRvcnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXBlbmRlbmNpZXNGcm9tTm9kZShub2RlKSB7XG4gIGNvbnN0IGRlcGVuZGVuY2llcyA9IERlcGVuZGVuY2llcy5mcm9tTm90aGluZygpO1xuXG4gIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgZGVwZW5kZW5jeU5vZGVzID0gZGVwZW5kZW5jeU5vZGVzUXVlcnkobm9kZSk7XG5cbiAgICBkZXBlbmRlbmN5Tm9kZXMuZm9yRWFjaCgoZGVwZW5kZW5jeU5vZGUpID0+IHtcbiAgICAgIGNvbnN0IGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlID0gZGVwZW5kZW5jeU5hbWVUZXJtaW5hbE5vZGVRdWVyeShkZXBlbmRlbmN5Tm9kZSksXG4gICAgICAgICAgICBzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlID0gc2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZVF1ZXJ5KGRlcGVuZGVuY3lOb2RlKSxcbiAgICAgICAgICAgIGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlQ29udGVudCA9IGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlLmdldENvbnRlbnQoKSxcbiAgICAgICAgICAgIHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVDb250ZW50ID0gc2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgICAgICBzdHJpbmcgPSB0cmltRG91YmxlUXVvdGVzKHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVDb250ZW50KSwgIC8vL1xuICAgICAgICAgICAgbmFtZSA9IHRyaW1Eb3VibGVRdW90ZXMoZGVwZW5kZW5jeU5hbWVUZXJtaW5hbE5vZGVDb250ZW50KSwvLy9cbiAgICAgICAgICAgIHNob3J0ZW5lZFZlcnNpb24gPSBTaG9ydGVuZWRWZXJzaW9uLmZyb21TdHJpbmcoc3RyaW5nKSxcbiAgICAgICAgICAgIGRlcGVuZGVuY3kgPSBEZXBlbmRlbmN5LmZyb21OYW1lQW5kU2hvcnRlbmVkVmVyc2lvbihuYW1lLCBzaG9ydGVuZWRWZXJzaW9uKTtcblxuICAgICAgZGVwZW5kZW5jaWVzLmFkZERlcGVuZGVuY3koZGVwZW5kZW5jeSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZGVwZW5kZW5jaWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVwZW5kZW5jeU5hbWVzRnJvbU5vZGUobm9kZSkge1xuICBjb25zdCBkZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXNGcm9tTm9kZShub2RlKSxcbiAgICAgICAgZGVwZW5kZW5jeU5hbWVzID0gZGVwZW5kZW5jaWVzLm1hcERlcGVuZGVuY3koKGRlcGVuZGVuY3kpID0+IHtcbiAgICAgICAgICBjb25zdCBkZXBlbmRlbmN5TmFtZSA9IGRlcGVuZGVuY3kuZ2V0TmFtZSgpO1xuXG4gICAgICAgICAgcmV0dXJuIGRlcGVuZGVuY3lOYW1lO1xuICAgICAgICB9KTtcblxuICByZXR1cm4gZGVwZW5kZW5jeU5hbWVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHZlcnNpb25Gcm9tTm9kZSxcbiAgcmVwb3NpdG9yeUZyb21Ob2RlLFxuICBkZXBlbmRlbmNpZXNGcm9tTm9kZSxcbiAgZGVwZW5kZW5jeU5hbWVzRnJvbU5vZGVcbn07XG4iXSwibmFtZXMiOlsidmVyc2lvbkZyb21Ob2RlIiwicmVwb3NpdG9yeUZyb21Ob2RlIiwiZGVwZW5kZW5jaWVzRnJvbU5vZGUiLCJkZXBlbmRlbmN5TmFtZXNGcm9tTm9kZSIsImRlcGVuZGVuY3lOb2Rlc1F1ZXJ5Iiwibm9kZXNRdWVyeSIsInJlcG9zaXRvcnlUZXJtaW5hbE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVRdWVyeSIsImRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlUXVlcnkiLCJzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlUXVlcnkiLCJub2RlIiwidmVyc2lvbiIsInZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGUiLCJ2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCIsImdldENvbnRlbnQiLCJ2ZXJzaW9uTnVtYmVyIiwidHJpbURvdWJsZVF1b3RlcyIsIlZlcnNpb24iLCJmcm9tVmVyc2lvbk51bWJlciIsInJlcG9zaXRvcnkiLCJyZXBvc2l0b3J5VGVybWluYWxOb2RlIiwicmVwb3NpdG9yeVRlcm1pbmFsTm9kZUNvbnRlbnQiLCJkZXBlbmRlbmNpZXMiLCJEZXBlbmRlbmNpZXMiLCJmcm9tTm90aGluZyIsImRlcGVuZGVuY3lOb2RlcyIsImZvckVhY2giLCJkZXBlbmRlbmN5Tm9kZSIsImRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlIiwic2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZSIsImRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlQ29udGVudCIsInNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVDb250ZW50Iiwic3RyaW5nIiwibmFtZSIsInNob3J0ZW5lZFZlcnNpb24iLCJTaG9ydGVuZWRWZXJzaW9uIiwiZnJvbVN0cmluZyIsImRlcGVuZGVuY3kiLCJEZXBlbmRlbmN5IiwiZnJvbU5hbWVBbmRTaG9ydGVuZWRWZXJzaW9uIiwiYWRkRGVwZW5kZW5jeSIsImRlcGVuZGVuY3lOYW1lcyIsIm1hcERlcGVuZGVuY3kiLCJkZXBlbmRlbmN5TmFtZSIsImdldE5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQWdCZ0JBLGVBQWU7ZUFBZkE7O0lBY0FDLGtCQUFrQjtlQUFsQkE7O0lBYUFDLG9CQUFvQjtlQUFwQkE7O0lBdUJBQyx1QkFBdUI7ZUFBdkJBOztJQVdoQixPQUtFO2VBTEY7Ozs0REEzRW9COytEQUNHO2lFQUNFO3FFQUNJO3VCQUVJO3FCQUNLOzs7Ozs7QUFFdEMsSUFBTUMsdUJBQXVCQyxJQUFBQSxpQkFBVSxFQUFDLDhCQUNsQ0MsOEJBQThCQyxJQUFBQSxnQkFBUyxFQUFDLHNCQUN4Q0MsaUNBQWlDRCxJQUFBQSxnQkFBUyxFQUFDLGtDQUMzQ0Usa0NBQWtDRixJQUFBQSxnQkFBUyxFQUFDLDBCQUM1Q0csMENBQTBDSCxJQUFBQSxnQkFBUyxFQUFDO0FBRW5ELFNBQVNQLGdCQUFnQlcsSUFBSSxFQUFFO0lBQ3BDLElBQUlDLFVBQVUsSUFBSTtJQUVsQixJQUFJRCxTQUFTLElBQUksRUFBRTtRQUNqQixJQUFNRSw0QkFBNEJMLCtCQUErQkcsT0FDM0RHLG1DQUFtQ0QsMEJBQTBCRSxVQUFVLElBQ3ZFQyxnQkFBZ0JDLElBQUFBLHlCQUFnQixFQUFDSCxtQ0FBbUMsRUFBRTtRQUU1RUYsVUFBVU0sZ0JBQU8sQ0FBQ0MsaUJBQWlCLENBQUNIO0lBQ3RDLENBQUM7SUFFRCxPQUFPSjtBQUNUO0FBRU8sU0FBU1gsbUJBQW1CVSxJQUFJLEVBQUU7SUFDdkMsSUFBSVMsYUFBYSxJQUFJO0lBRXJCLElBQUlULFNBQVMsSUFBSSxFQUFFO1FBQ2pCLElBQU1VLHlCQUF5QmYsNEJBQTRCSyxPQUNyRFcsZ0NBQWdDRCx1QkFBdUJOLFVBQVU7UUFFdkVLLGFBQWFILElBQUFBLHlCQUFnQixFQUFDSyxnQ0FBZ0MsRUFBRTtJQUNsRSxDQUFDO0lBRUQsT0FBT0Y7QUFDVDtBQUVPLFNBQVNsQixxQkFBcUJTLElBQUksRUFBRTtJQUN6QyxJQUFNWSxlQUFlQyxxQkFBWSxDQUFDQyxXQUFXO0lBRTdDLElBQUlkLFNBQVMsSUFBSSxFQUFFO1FBQ2pCLElBQU1lLGtCQUFrQnRCLHFCQUFxQk87UUFFN0NlLGdCQUFnQkMsT0FBTyxDQUFDLFNBQUNDLGdCQUFtQjtZQUMxQyxJQUFNQyw2QkFBNkJwQixnQ0FBZ0NtQixpQkFDN0RFLHFDQUFxQ3BCLHdDQUF3Q2tCLGlCQUM3RUcsb0NBQW9DRiwyQkFBMkJkLFVBQVUsSUFDekVpQiw0Q0FBNENGLG1DQUFtQ2YsVUFBVSxJQUN6RmtCLFNBQVNoQixJQUFBQSx5QkFBZ0IsRUFBQ2UsNENBQzFCRSxPQUFPakIsSUFBQUEseUJBQWdCLEVBQUNjLG9DQUN4QkksbUJBQW1CQyx5QkFBZ0IsQ0FBQ0MsVUFBVSxDQUFDSixTQUMvQ0ssYUFBYUMsbUJBQVUsQ0FBQ0MsMkJBQTJCLENBQUNOLE1BQU1DO1lBRWhFWixhQUFha0IsYUFBYSxDQUFDSDtRQUM3QjtJQUNGLENBQUM7SUFFRCxPQUFPZjtBQUNUO0FBRU8sU0FBU3BCLHdCQUF3QlEsSUFBSSxFQUFFO0lBQzVDLElBQU1ZLGVBQWVyQixxQkFBcUJTLE9BQ3BDK0Isa0JBQWtCbkIsYUFBYW9CLGFBQWEsQ0FBQyxTQUFDTCxZQUFlO1FBQzNELElBQU1NLGlCQUFpQk4sV0FBV08sT0FBTztRQUV6QyxPQUFPRDtJQUNUO0lBRU4sT0FBT0Y7QUFDVDtJQUVBLFdBQWU7SUFDYjFDLGlCQUFBQTtJQUNBQyxvQkFBQUE7SUFDQUMsc0JBQUFBO0lBQ0FDLHlCQUFBQTtBQUNGIn0=