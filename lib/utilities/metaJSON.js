"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    versionFromNode: function() {
        return versionFromNode;
    },
    repositoryFromNode: function() {
        return repositoryFromNode;
    },
    dependenciesFromNode: function() {
        return dependenciesFromNode;
    },
    dependencyNamesFromNode: function() {
        return dependencyNamesFromNode;
    },
    metaJSONNodeFromMetaJSONFile: function() {
        return metaJSONNodeFromMetaJSONFile;
    },
    default: function() {
        return _default;
    }
});
var _occamGrammars = require("occam-grammars");
var _version = /*#__PURE__*/ _interopRequireDefault(require("../version"));
var _dependency = /*#__PURE__*/ _interopRequireDefault(require("../dependency"));
var _dependencies = /*#__PURE__*/ _interopRequireDefault(require("../dependencies"));
var _shortenedVersion = /*#__PURE__*/ _interopRequireDefault(require("../shortenedVersion"));
var _content = require("../utilities/content");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metaJSONLexer = _occamGrammars.MetaJSONLexer.fromNothing(), metaJSONParser = _occamGrammars.MetaJSONParser.fromNothing(), dependencyNodesQuery = (0, _query.nodesQuery)("//dependencies/dependency"), repositoryTerminalNodeQuery = (0, _query.nodeQuery)("//repository!/@*!"), versionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//version!/versionNumber!/@*!"), dependencyNameTerminalNodeQuery = (0, _query.nodeQuery)("/dependency/name!/@*!"), shortenedVersionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//dependency/shortenedVersionNumber/@*!");
function versionFromNode(node) {
    var version = null;
    if (node !== null) {
        var versionNumberTerminalNode = versionNumberTerminalNodeQuery(node), versionNumberTerminalNodeContent = versionNumberTerminalNode.getContent(), string = (0, _content.trimDoubleQuotes)(versionNumberTerminalNodeContent); //
        version = _version.default.fromString(string);
    }
    return version;
}
function repositoryFromNode(node) {
    var repository = null;
    if (node !== null) {
        var repositoryTerminalNode = repositoryTerminalNodeQuery(node), repositoryTerminalNodeContent = repositoryTerminalNode.getContent();
        repository = (0, _content.trimDoubleQuotes)(repositoryTerminalNodeContent); //
    }
    return repository;
}
function dependenciesFromNode(node) {
    var dependencies = _dependencies.default.fromNothing();
    if (node !== null) {
        var dependencyNodes = dependencyNodesQuery(node);
        dependencyNodes.forEach(function(dependencyNode) {
            var dependencyNameTerminalNode = dependencyNameTerminalNodeQuery(dependencyNode), shortenedVersionNumberTerminalNode = shortenedVersionNumberTerminalNodeQuery(dependencyNode), dependencyNameTerminalNodeContent = dependencyNameTerminalNode.getContent(), shortenedVersionNumberTerminalNodeContent = shortenedVersionNumberTerminalNode.getContent(), string = (0, _content.trimDoubleQuotes)(shortenedVersionNumberTerminalNodeContent), name = (0, _content.trimDoubleQuotes)(dependencyNameTerminalNodeContent), shortenedVersion = _shortenedVersion.default.fromString(string), dependency = _dependency.default.fromNameAndShortenedVersion(name, shortenedVersion);
            dependencies.addDependency(dependency);
        });
    }
    return dependencies;
}
function dependencyNamesFromNode(node) {
    var dependencies = dependenciesFromNode(node), dependencyNames = dependencies.mapDependency(function(dependency) {
        var dependencyName = dependency.getName();
        return dependencyName;
    });
    return dependencyNames;
}
function metaJSONNodeFromMetaJSONFile(metaJSONFile) {
    var metaJSONNode = null;
    if (metaJSONFile !== null) {
        var content = metaJSONFile.getContent(), tokens = metaJSONLexer.tokenise(content), node = metaJSONParser.parse(tokens);
        metaJSONNode = node; ///
    }
    return metaJSONNode;
}
var _default = {
    versionFromNode: versionFromNode,
    repositoryFromNode: repositoryFromNode,
    dependenciesFromNode: dependenciesFromNode,
    dependencyNamesFromNode: dependencyNamesFromNode,
    metaJSONNodeFromMetaJSONFile: metaJSONNodeFromMetaJSONFile
};

//# sourceMappingURL=data:application/json;base64,