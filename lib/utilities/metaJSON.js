"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    versionFromNode: function() {
        return versionFromNode;
    },
    repositoryFromNode: function() {
        return repositoryFromNode;
    },
    dependenciesFromNode: function() {
        return dependenciesFromNode;
    },
    dependencyNamesFromNode: function() {
        return dependencyNamesFromNode;
    },
    metaJSONNodeFromMetaJSONFile: function() {
        return metaJSONNodeFromMetaJSONFile;
    },
    default: function() {
        return _default;
    }
});
var _occamGrammars = require("occam-grammars");
var _version = /*#__PURE__*/ _interopRequireDefault(require("../version"));
var _dependency = /*#__PURE__*/ _interopRequireDefault(require("../dependency"));
var _dependencies = /*#__PURE__*/ _interopRequireDefault(require("../dependencies"));
var _shortenedVersion = /*#__PURE__*/ _interopRequireDefault(require("../shortenedVersion"));
var _content = require("../utilities/content");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metaJSONLexer = _occamGrammars.MetaJSONLexer.fromNothing(), metaJSONParser = _occamGrammars.MetaJSONParser.fromNothing(), dependencyNodesQuery = (0, _query.nodesQuery)("//dependencies/dependency"), repositoryTerminalNodeQuery = (0, _query.nodeQuery)("//repository!/@*!"), versionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//version!/versionNumber!/@*!"), dependencyNameTerminalNodeQuery = (0, _query.nodeQuery)("/dependency/name!/@*!"), shortenedVersionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//dependency/shortenedVersionNumber/@*!");
function versionFromNode(node) {
    var version = null;
    if (node !== null) {
        var versionNumberTerminalNode = versionNumberTerminalNodeQuery(node), versionNumberTerminalNodeContent = versionNumberTerminalNode.getContent(), string = (0, _content.trimDoubleQuotes)(versionNumberTerminalNodeContent); //
        version = _version.default.fromString(string);
    }
    return version;
}
function repositoryFromNode(node) {
    var repository = null;
    if (node !== null) {
        var repositoryTerminalNode = repositoryTerminalNodeQuery(node), repositoryTerminalNodeContent = repositoryTerminalNode.getContent();
        repository = (0, _content.trimDoubleQuotes)(repositoryTerminalNodeContent); //
    }
    return repository;
}
function dependenciesFromNode(node) {
    var dependencies = _dependencies.default.fromNothing();
    if (node !== null) {
        var dependencyNodes = dependencyNodesQuery(node);
        dependencyNodes.forEach(function(dependencyNode) {
            var dependencyNameTerminalNode = dependencyNameTerminalNodeQuery(dependencyNode), shortenedVersionNumberTerminalNode = shortenedVersionNumberTerminalNodeQuery(dependencyNode), dependencyNameTerminalNodeContent = dependencyNameTerminalNode.getContent(), shortenedVersionNumberTerminalNodeContent = shortenedVersionNumberTerminalNode.getContent(), string = (0, _content.trimDoubleQuotes)(shortenedVersionNumberTerminalNodeContent), name = (0, _content.trimDoubleQuotes)(dependencyNameTerminalNodeContent), shortenedVersion = _shortenedVersion.default.fromString(string), dependency = _dependency.default.fromNameAndShortenedVersion(name, shortenedVersion);
            dependencies.addDependency(dependency);
        });
    }
    return dependencies;
}
function dependencyNamesFromNode(node) {
    var dependencies = dependenciesFromNode(node), dependencyNames = dependencies.mapDependency(function(dependency) {
        var dependencyName = dependency.getName();
        return dependencyName;
    });
    return dependencyNames;
}
function metaJSONNodeFromMetaJSONFile(metaJSONFile) {
    var content = metaJSONFile.getContent(), tokens = metaJSONLexer.tokenise(content), node = metaJSONParser.parse(tokens), metaJSONNode = node; ///
    return metaJSONNode;
}
var _default = {
    versionFromNode: versionFromNode,
    repositoryFromNode: repositoryFromNode,
    dependenciesFromNode: dependenciesFromNode,
    dependencyNamesFromNode: dependencyNamesFromNode
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YUpTT04uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IE1ldGFKU09OTGV4ZXIsIE1ldGFKU09OUGFyc2VyIH0gZnJvbSBcIm9jY2FtLWdyYW1tYXJzXCI7XG5cbmltcG9ydCBWZXJzaW9uIGZyb20gXCIuLi92ZXJzaW9uXCI7XG5pbXBvcnQgRGVwZW5kZW5jeSBmcm9tIFwiLi4vZGVwZW5kZW5jeVwiO1xuaW1wb3J0IERlcGVuZGVuY2llcyBmcm9tIFwiLi4vZGVwZW5kZW5jaWVzXCI7XG5pbXBvcnQgU2hvcnRlbmVkVmVyc2lvbiBmcm9tIFwiLi4vc2hvcnRlbmVkVmVyc2lvblwiO1xuXG5pbXBvcnQgeyB0cmltRG91YmxlUXVvdGVzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9jb250ZW50XCI7XG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IG1ldGFKU09OTGV4ZXIgPSBNZXRhSlNPTkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBtZXRhSlNPTlBhcnNlciA9IE1ldGFKU09OUGFyc2VyLmZyb21Ob3RoaW5nKCksXG4gICAgICBkZXBlbmRlbmN5Tm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvL2RlcGVuZGVuY2llcy9kZXBlbmRlbmN5XCIpLFxuICAgICAgcmVwb3NpdG9yeVRlcm1pbmFsTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiLy9yZXBvc2l0b3J5IS9AKiFcIiksXG4gICAgICB2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvL3ZlcnNpb24hL3ZlcnNpb25OdW1iZXIhL0AqIVwiKSxcbiAgICAgIGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvZGVwZW5kZW5jeS9uYW1lIS9AKiFcIiksXG4gICAgICBzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvL2RlcGVuZGVuY3kvc2hvcnRlbmVkVmVyc2lvbk51bWJlci9AKiFcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiB2ZXJzaW9uRnJvbU5vZGUobm9kZSkge1xuICBsZXQgdmVyc2lvbiA9IG51bGw7XG5cbiAgaWYgKG5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCB2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlID0gdmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZVF1ZXJ5KG5vZGUpLFxuICAgICAgICAgIHZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVDb250ZW50ID0gdmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgICAgc3RyaW5nID0gdHJpbURvdWJsZVF1b3Rlcyh2ZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCk7IC8vXG5cbiAgICB2ZXJzaW9uID0gVmVyc2lvbi5mcm9tU3RyaW5nKHN0cmluZyk7XG4gIH1cblxuICByZXR1cm4gdmVyc2lvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcG9zaXRvcnlGcm9tTm9kZShub2RlKSB7XG4gIGxldCByZXBvc2l0b3J5ID0gbnVsbDtcblxuICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJlcG9zaXRvcnlUZXJtaW5hbE5vZGUgPSByZXBvc2l0b3J5VGVybWluYWxOb2RlUXVlcnkobm9kZSksXG4gICAgICAgICAgcmVwb3NpdG9yeVRlcm1pbmFsTm9kZUNvbnRlbnQgPSByZXBvc2l0b3J5VGVybWluYWxOb2RlLmdldENvbnRlbnQoKTtcblxuICAgIHJlcG9zaXRvcnkgPSB0cmltRG91YmxlUXVvdGVzKHJlcG9zaXRvcnlUZXJtaW5hbE5vZGVDb250ZW50KTsgLy9cbiAgfVxuXG4gIHJldHVybiByZXBvc2l0b3J5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVwZW5kZW5jaWVzRnJvbU5vZGUobm9kZSkge1xuICBjb25zdCBkZXBlbmRlbmNpZXMgPSBEZXBlbmRlbmNpZXMuZnJvbU5vdGhpbmcoKTtcblxuICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGRlcGVuZGVuY3lOb2RlcyA9IGRlcGVuZGVuY3lOb2Rlc1F1ZXJ5KG5vZGUpO1xuXG4gICAgZGVwZW5kZW5jeU5vZGVzLmZvckVhY2goKGRlcGVuZGVuY3lOb2RlKSA9PiB7XG4gICAgICBjb25zdCBkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZSA9IGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlUXVlcnkoZGVwZW5kZW5jeU5vZGUpLFxuICAgICAgICAgICAgc2hvcnRlbmVkVmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZSA9IHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVRdWVyeShkZXBlbmRlbmN5Tm9kZSksXG4gICAgICAgICAgICBkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZUNvbnRlbnQgPSBkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgICAgICBzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCA9IHNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpLFxuICAgICAgICAgICAgc3RyaW5nID0gdHJpbURvdWJsZVF1b3RlcyhzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCksICAvLy9cbiAgICAgICAgICAgIG5hbWUgPSB0cmltRG91YmxlUXVvdGVzKGRlcGVuZGVuY3lOYW1lVGVybWluYWxOb2RlQ29udGVudCksLy8vXG4gICAgICAgICAgICBzaG9ydGVuZWRWZXJzaW9uID0gU2hvcnRlbmVkVmVyc2lvbi5mcm9tU3RyaW5nKHN0cmluZyksXG4gICAgICAgICAgICBkZXBlbmRlbmN5ID0gRGVwZW5kZW5jeS5mcm9tTmFtZUFuZFNob3J0ZW5lZFZlcnNpb24obmFtZSwgc2hvcnRlbmVkVmVyc2lvbik7XG5cbiAgICAgIGRlcGVuZGVuY2llcy5hZGREZXBlbmRlbmN5KGRlcGVuZGVuY3kpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlcGVuZGVuY3lOYW1lc0Zyb21Ob2RlKG5vZGUpIHtcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzRnJvbU5vZGUobm9kZSksXG4gICAgICAgIGRlcGVuZGVuY3lOYW1lcyA9IGRlcGVuZGVuY2llcy5tYXBEZXBlbmRlbmN5KChkZXBlbmRlbmN5KSA9PiB7XG4gICAgICAgICAgY29uc3QgZGVwZW5kZW5jeU5hbWUgPSBkZXBlbmRlbmN5LmdldE5hbWUoKTtcblxuICAgICAgICAgIHJldHVybiBkZXBlbmRlbmN5TmFtZTtcbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIGRlcGVuZGVuY3lOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGFKU09OTm9kZUZyb21NZXRhSlNPTkZpbGUobWV0YUpTT05GaWxlKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBtZXRhSlNPTkZpbGUuZ2V0Q29udGVudCgpLFxuICAgICAgICB0b2tlbnMgPSBtZXRhSlNPTkxleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gbWV0YUpTT05QYXJzZXIucGFyc2UodG9rZW5zKSxcbiAgICAgICAgbWV0YUpTT05Ob2RlID0gbm9kZTsgIC8vL1xuXG4gIHJldHVybiBtZXRhSlNPTk5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdmVyc2lvbkZyb21Ob2RlLFxuICByZXBvc2l0b3J5RnJvbU5vZGUsXG4gIGRlcGVuZGVuY2llc0Zyb21Ob2RlLFxuICBkZXBlbmRlbmN5TmFtZXNGcm9tTm9kZVxufTtcbiJdLCJuYW1lcyI6WyJ2ZXJzaW9uRnJvbU5vZGUiLCJyZXBvc2l0b3J5RnJvbU5vZGUiLCJkZXBlbmRlbmNpZXNGcm9tTm9kZSIsImRlcGVuZGVuY3lOYW1lc0Zyb21Ob2RlIiwibWV0YUpTT05Ob2RlRnJvbU1ldGFKU09ORmlsZSIsIm1ldGFKU09OTGV4ZXIiLCJNZXRhSlNPTkxleGVyIiwiZnJvbU5vdGhpbmciLCJtZXRhSlNPTlBhcnNlciIsIk1ldGFKU09OUGFyc2VyIiwiZGVwZW5kZW5jeU5vZGVzUXVlcnkiLCJub2Rlc1F1ZXJ5IiwicmVwb3NpdG9yeVRlcm1pbmFsTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwidmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZVF1ZXJ5IiwiZGVwZW5kZW5jeU5hbWVUZXJtaW5hbE5vZGVRdWVyeSIsInNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVRdWVyeSIsIm5vZGUiLCJ2ZXJzaW9uIiwidmVyc2lvbk51bWJlclRlcm1pbmFsTm9kZSIsInZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGVDb250ZW50IiwiZ2V0Q29udGVudCIsInN0cmluZyIsInRyaW1Eb3VibGVRdW90ZXMiLCJWZXJzaW9uIiwiZnJvbVN0cmluZyIsInJlcG9zaXRvcnkiLCJyZXBvc2l0b3J5VGVybWluYWxOb2RlIiwicmVwb3NpdG9yeVRlcm1pbmFsTm9kZUNvbnRlbnQiLCJkZXBlbmRlbmNpZXMiLCJEZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmN5Tm9kZXMiLCJmb3JFYWNoIiwiZGVwZW5kZW5jeU5vZGUiLCJkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZSIsInNob3J0ZW5lZFZlcnNpb25OdW1iZXJUZXJtaW5hbE5vZGUiLCJkZXBlbmRlbmN5TmFtZVRlcm1pbmFsTm9kZUNvbnRlbnQiLCJzaG9ydGVuZWRWZXJzaW9uTnVtYmVyVGVybWluYWxOb2RlQ29udGVudCIsIm5hbWUiLCJzaG9ydGVuZWRWZXJzaW9uIiwiU2hvcnRlbmVkVmVyc2lvbiIsImRlcGVuZGVuY3kiLCJEZXBlbmRlbmN5IiwiZnJvbU5hbWVBbmRTaG9ydGVuZWRWZXJzaW9uIiwiYWRkRGVwZW5kZW5jeSIsImRlcGVuZGVuY3lOYW1lcyIsIm1hcERlcGVuZGVuY3kiLCJkZXBlbmRlbmN5TmFtZSIsImdldE5hbWUiLCJtZXRhSlNPTkZpbGUiLCJjb250ZW50IiwidG9rZW5zIiwidG9rZW5pc2UiLCJwYXJzZSIsIm1ldGFKU09OTm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBb0JnQkEsZUFBZTtlQUFmQTs7SUFjQUMsa0JBQWtCO2VBQWxCQTs7SUFhQUMsb0JBQW9CO2VBQXBCQTs7SUF1QkFDLHVCQUF1QjtlQUF2QkE7O0lBV0FDLDRCQUE0QjtlQUE1QkE7O0lBU2hCLE9BS0U7ZUFMRjs7OzZCQXhGOEM7NERBRTFCOytEQUNHO2lFQUNFO3FFQUNJO3VCQUVJO3FCQUNLOzs7Ozs7QUFFdEMsSUFBTUMsZ0JBQWdCQyw0QkFBYSxDQUFDQyxXQUFXLElBQ3pDQyxpQkFBaUJDLDZCQUFjLENBQUNGLFdBQVcsSUFDM0NHLHVCQUF1QkMsSUFBQUEsaUJBQVUsRUFBQyw4QkFDbENDLDhCQUE4QkMsSUFBQUEsZ0JBQVMsRUFBQyxzQkFDeENDLGlDQUFpQ0QsSUFBQUEsZ0JBQVMsRUFBQyxrQ0FDM0NFLGtDQUFrQ0YsSUFBQUEsZ0JBQVMsRUFBQywwQkFDNUNHLDBDQUEwQ0gsSUFBQUEsZ0JBQVMsRUFBQztBQUVuRCxTQUFTYixnQkFBZ0JpQixJQUFJLEVBQUU7SUFDcEMsSUFBSUMsVUFBVSxJQUFJO0lBRWxCLElBQUlELFNBQVMsSUFBSSxFQUFFO1FBQ2pCLElBQU1FLDRCQUE0QkwsK0JBQStCRyxPQUMzREcsbUNBQW1DRCwwQkFBMEJFLFVBQVUsSUFDdkVDLFNBQVNDLElBQUFBLHlCQUFnQixFQUFDSCxtQ0FBbUMsRUFBRTtRQUVyRUYsVUFBVU0sZ0JBQU8sQ0FBQ0MsVUFBVSxDQUFDSDtJQUMvQixDQUFDO0lBRUQsT0FBT0o7QUFDVDtBQUVPLFNBQVNqQixtQkFBbUJnQixJQUFJLEVBQUU7SUFDdkMsSUFBSVMsYUFBYSxJQUFJO0lBRXJCLElBQUlULFNBQVMsSUFBSSxFQUFFO1FBQ2pCLElBQU1VLHlCQUF5QmYsNEJBQTRCSyxPQUNyRFcsZ0NBQWdDRCx1QkFBdUJOLFVBQVU7UUFFdkVLLGFBQWFILElBQUFBLHlCQUFnQixFQUFDSyxnQ0FBZ0MsRUFBRTtJQUNsRSxDQUFDO0lBRUQsT0FBT0Y7QUFDVDtBQUVPLFNBQVN4QixxQkFBcUJlLElBQUksRUFBRTtJQUN6QyxJQUFNWSxlQUFlQyxxQkFBWSxDQUFDdkIsV0FBVztJQUU3QyxJQUFJVSxTQUFTLElBQUksRUFBRTtRQUNqQixJQUFNYyxrQkFBa0JyQixxQkFBcUJPO1FBRTdDYyxnQkFBZ0JDLE9BQU8sQ0FBQyxTQUFDQyxnQkFBbUI7WUFDMUMsSUFBTUMsNkJBQTZCbkIsZ0NBQWdDa0IsaUJBQzdERSxxQ0FBcUNuQix3Q0FBd0NpQixpQkFDN0VHLG9DQUFvQ0YsMkJBQTJCYixVQUFVLElBQ3pFZ0IsNENBQTRDRixtQ0FBbUNkLFVBQVUsSUFDekZDLFNBQVNDLElBQUFBLHlCQUFnQixFQUFDYyw0Q0FDMUJDLE9BQU9mLElBQUFBLHlCQUFnQixFQUFDYSxvQ0FDeEJHLG1CQUFtQkMseUJBQWdCLENBQUNmLFVBQVUsQ0FBQ0gsU0FDL0NtQixhQUFhQyxtQkFBVSxDQUFDQywyQkFBMkIsQ0FBQ0wsTUFBTUM7WUFFaEVWLGFBQWFlLGFBQWEsQ0FBQ0g7UUFDN0I7SUFDRixDQUFDO0lBRUQsT0FBT1o7QUFDVDtBQUVPLFNBQVMxQix3QkFBd0JjLElBQUksRUFBRTtJQUM1QyxJQUFNWSxlQUFlM0IscUJBQXFCZSxPQUNwQzRCLGtCQUFrQmhCLGFBQWFpQixhQUFhLENBQUMsU0FBQ0wsWUFBZTtRQUMzRCxJQUFNTSxpQkFBaUJOLFdBQVdPLE9BQU87UUFFekMsT0FBT0Q7SUFDVDtJQUVOLE9BQU9GO0FBQ1Q7QUFFTyxTQUFTekMsNkJBQTZCNkMsWUFBWSxFQUFFO0lBQ3pELElBQU1DLFVBQVVELGFBQWE1QixVQUFVLElBQ2pDOEIsU0FBUzlDLGNBQWMrQyxRQUFRLENBQUNGLFVBQ2hDakMsT0FBT1QsZUFBZTZDLEtBQUssQ0FBQ0YsU0FDNUJHLGVBQWVyQyxNQUFPLEdBQUc7SUFFL0IsT0FBT3FDO0FBQ1Q7SUFFQSxXQUFlO0lBQ2J0RCxpQkFBQUE7SUFDQUMsb0JBQUFBO0lBQ0FDLHNCQUFBQTtJQUNBQyx5QkFBQUE7QUFDRiJ9