"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    dependenciesFromDocumentNode: function() {
        return dependenciesFromDocumentNode;
    },
    dependencyNamesFromDocumentNode: function() {
        return dependencyNamesFromDocumentNode;
    },
    documentNodeFromMetaJSONFile: function() {
        return documentNodeFromMetaJSONFile;
    },
    isMetaJSONFileValid: function() {
        return isMetaJSONFileValid;
    },
    repositoryFromDocumentNode: function() {
        return repositoryFromDocumentNode;
    },
    updateMetaJSONFileVersion: function() {
        return updateMetaJSONFileVersion;
    },
    versionFromDocumentNode: function() {
        return versionFromDocumentNode;
    }
});
var _occamgrammars = require("occam-grammars");
var _version = /*#__PURE__*/ _interop_require_default(require("../version"));
var _dependency = /*#__PURE__*/ _interop_require_default(require("../dependency"));
var _dependencies = /*#__PURE__*/ _interop_require_default(require("../dependencies"));
var _shortenedVersion = /*#__PURE__*/ _interop_require_default(require("../shortenedVersion"));
var _constants = require("../constants");
var _content = require("../utilities/content");
var _query = require("../utilities/query");
var _validate = require("../utilities/validate");
var _propertyNames = require("../propertyNames");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var jsonLexer = _occamgrammars.JSONLexer.fromNothing(), jsonParser = _occamgrammars.JSONParser.fromNothing();
var errorNodesQuery = (0, _query.nodesQuery)("//error"), propertyNodesQuery = (0, _query.nodesQuery)("/property/json/object/property"), documentPropertyNodesQuery = (0, _query.nodesQuery)("/document/json/object/property"), propertyStringLiteralTerminalNodeQuery = (0, _query.nodeQuery)("/property/@string-literal"), propertyJSONStringLiteralTerminalNodeQuery = (0, _query.nodeQuery)("/property/json/@string-literal!");
function isMetaJSONFileValid(metaJSONFile) {
    var metaJSONFileValid = false;
    var documentNode = documentNodeFromMetaJSONFile(metaJSONFile);
    if (documentNode !== null) {
        var errorNodes = errorNodesQuery(documentNode), errorNodesLength = errorNodes.length;
        if (errorNodesLength === 0) {
            var version = versionFromDocumentNode(documentNode), repository = repositoryFromDocumentNode(documentNode), dependencies = dependenciesFromDocumentNode(documentNode);
            metaJSONFileValid = version !== null && repository !== null && dependencies !== null;
        }
    }
    return metaJSONFileValid;
}
function updateMetaJSONFileVersion(metaJSONFile, version) {
    var documentNode = documentNodeFromMetaJSONFile(metaJSONFile), repository = repositoryFromDocumentNode(documentNode);
    var dependencies = dependenciesFromDocumentNode(documentNode);
    var string = version.toString(), dependenciesJSON = dependencies.toJSON();
    version = string; ///
    dependencies = dependenciesJSON; ///
    var metaJSON = {
        version: version,
        repository: repository,
        dependencies: dependencies
    }, metaJSONString = JSON.stringify(metaJSON, null, _constants.DOUBLE_SPACE), metaJSONFileContent = metaJSONString; ///
    metaJSONFile.setContent(metaJSONFileContent);
}
function documentNodeFromMetaJSONFile(metaJSONFile) {
    var documentNode = null;
    if (metaJSONFile !== null) {
        var content = metaJSONFile.getContent(), tokens = jsonLexer.tokenise(content), node = jsonParser.parse(tokens);
        documentNode = node; ///
    }
    return documentNode;
}
function versionFromDocumentNode(documentNode) {
    var version = null;
    var documentPropertyNodes = documentPropertyNodesFromDocumentNode(documentNode);
    documentPropertyNodes.some(function(documentPropertyNode) {
        var propertyNode = documentPropertyNode, propertyName = propertyNameFromPropertyNode(propertyNode);
        if (propertyName === _propertyNames.VERSION_PROPERTY_NAME) {
            var stringPropertyValue = stringPropertyValueFromPropertyNode(propertyNode), string = stringPropertyValue, stringVersionString = (0, _validate.isStringVersionString)(string);
            if (stringVersionString) {
                version = _version.default.fromString(string);
            }
            return true;
        }
    });
    return version;
}
function repositoryFromDocumentNode(documentNode) {
    var repository = null;
    var documentPropertyNodes = documentPropertyNodesFromDocumentNode(documentNode);
    documentPropertyNodes.some(function(documentPropertyNode) {
        var propertyNode = documentPropertyNode, propertyName = propertyNameFromPropertyNode(propertyNode);
        if (propertyName === _propertyNames.REPOSITORY_PROPERTY_NAME) {
            var stringPropertyValue = stringPropertyValueFromPropertyNode(propertyNode);
            repository = stringPropertyValue; ///
            return true;
        }
    });
    return repository;
}
function dependenciesFromDocumentNode(documentNode) {
    var dependencies = null;
    var dependenciesPropertyNode = dependenciesPropertyNodeFromDocumentNode(documentNode);
    if (dependenciesPropertyNode !== null) {
        dependencies = _dependencies.default.fromNothing();
        var propertyNode = dependenciesPropertyNode, propertyNodes = propertyNodesQuery(propertyNode);
        propertyNodes.forEach(function(propertyNode) {
            var stringPropertyValue = stringPropertyValueFromPropertyNode(propertyNode), string = stringPropertyValue, stringShortenedVersionString = (0, _validate.isStringShortenedVersionString)(string);
            if (stringShortenedVersionString) {
                var propertyName = propertyNameFromPropertyNode(propertyNode), name = propertyName, shortenedVersion = _shortenedVersion.default.fromString(string), dependency = _dependency.default.fromNameAndShortenedVersion(name, shortenedVersion);
                dependencies.addDependency(dependency);
            }
        });
    }
    return dependencies;
}
function dependencyNamesFromDocumentNode(documentNode) {
    var dependencyNames = null;
    var dependenciesPropertyNode = dependenciesPropertyNodeFromDocumentNode(documentNode);
    if (dependenciesPropertyNode !== null) {
        dependencyNames = [];
        var propertyNode = dependenciesPropertyNode, propertyNodes = propertyNodesQuery(propertyNode);
        propertyNodes.forEach(function(propertyNode) {
            var stringPropertyValue = stringPropertyValueFromPropertyNode(propertyNode), string = stringPropertyValue, stringShortenedVersionString = (0, _validate.isStringShortenedVersionString)(string);
            if (stringShortenedVersionString) {
                var propertyName = propertyNameFromPropertyNode(propertyNode), dependencyName = propertyName; ///
                dependencyNames.push(dependencyName);
            }
        });
    }
    return dependencyNames;
}
var _default = {
    isMetaJSONFileValid: isMetaJSONFileValid,
    updateMetaJSONFileVersion: updateMetaJSONFileVersion,
    documentNodeFromMetaJSONFile: documentNodeFromMetaJSONFile,
    versionFromDocumentNode: versionFromDocumentNode,
    repositoryFromDocumentNode: repositoryFromDocumentNode,
    dependenciesFromDocumentNode: dependenciesFromDocumentNode,
    dependencyNamesFromDocumentNode: dependencyNamesFromDocumentNode
};
function propertyNameFromPropertyNode(propertyNode) {
    var propertyStringLiteralTerminalNode = propertyStringLiteralTerminalNodeQuery(propertyNode), propertyStringLiteralTerminalNodeContent = propertyStringLiteralTerminalNode.getContent(), propertyName = (0, _content.trimDoubleQuotes)(propertyStringLiteralTerminalNodeContent); ///
    return propertyName;
}
function stringPropertyValueFromPropertyNode(propertyNode) {
    var propertyJSONStringLiteralTerminalNode = propertyJSONStringLiteralTerminalNodeQuery(propertyNode), propertyJSONStringLiteralTerminalNodeContent = propertyJSONStringLiteralTerminalNode.getContent(), stringPropertyValue = (0, _content.trimDoubleQuotes)(propertyJSONStringLiteralTerminalNodeContent); ///
    return stringPropertyValue;
}
function documentPropertyNodesFromDocumentNode(documentNode) {
    var documentPropertyNodes = documentPropertyNodesQuery(documentNode);
    return documentPropertyNodes;
}
function dependenciesPropertyNodeFromDocumentNode(documentNode) {
    var dependenciesPropertyNode = null;
    var documentPropertyNodes = documentPropertyNodesFromDocumentNode(documentNode);
    documentPropertyNodes.some(function(documentPropertyNode) {
        var propertyNode = documentPropertyNode, propertyName = propertyNameFromPropertyNode(propertyNode);
        if (propertyName === _propertyNames.DEPENDENCIES_PROPERTY_NAME) {
            dependenciesPropertyNode = propertyNode; ///
            return true;
        }
    });
    return dependenciesPropertyNode;
}

//# sourceMappingURL=data:application/json;base64,