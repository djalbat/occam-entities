"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    dependenciesFromNode: function() {
        return dependenciesFromNode;
    },
    dependencyNamesFromNode: function() {
        return dependencyNamesFromNode;
    },
    isMetaJSONFileValid: function() {
        return isMetaJSONFileValid;
    },
    metaJSONNodeFromMetaJSONFile: function() {
        return metaJSONNodeFromMetaJSONFile;
    },
    repositoryFromNode: function() {
        return repositoryFromNode;
    },
    updateMetaJSONFileVersion: function() {
        return updateMetaJSONFileVersion;
    },
    versionFromNode: function() {
        return versionFromNode;
    }
});
var _occamgrammars = require("occam-grammars");
var _version = /*#__PURE__*/ _interop_require_default(require("../version"));
var _dependency = /*#__PURE__*/ _interop_require_default(require("../dependency"));
var _dependencies = /*#__PURE__*/ _interop_require_default(require("../dependencies"));
var _shortenedVersion = /*#__PURE__*/ _interop_require_default(require("../shortenedVersion"));
var _constants = require("../constants");
var _content = require("../utilities/content");
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metaJSONLexer = _occamgrammars.MetaJSONLexer.fromNothing(), metaJSONParser = _occamgrammars.MetaJSONParser.fromNothing(), errorNodesQuery = (0, _query.nodesQuery)("//error"), dependencyNodesQuery = (0, _query.nodesQuery)("//dependencies/dependency"), repositoryTerminalNodeQuery = (0, _query.nodeQuery)("//repository!/@*!"), versionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//version!/versionNumber!/@*!"), dependencyNameTerminalNodeQuery = (0, _query.nodeQuery)("/dependency/name!/@*!"), shortenedVersionNumberTerminalNodeQuery = (0, _query.nodeQuery)("//dependency/shortenedVersionNumber/@*!");
function versionFromNode(node) {
    var version = null;
    if (node !== null) {
        var versionNumberTerminalNode = versionNumberTerminalNodeQuery(node), versionNumberTerminalNodeContent = versionNumberTerminalNode.getContent(), string = (0, _content.trimDoubleQuotes)(versionNumberTerminalNodeContent); //
        version = _version.default.fromString(string);
    }
    return version;
}
function repositoryFromNode(node) {
    var repository = null;
    if (node !== null) {
        var repositoryTerminalNode = repositoryTerminalNodeQuery(node), repositoryTerminalNodeContent = repositoryTerminalNode.getContent();
        repository = (0, _content.trimDoubleQuotes)(repositoryTerminalNodeContent); //
    }
    return repository;
}
function isMetaJSONFileValid(metaJSONFile) {
    var metaJSONFileValid = false;
    var metaJSONNode = metaJSONNodeFromMetaJSONFile(metaJSONFile);
    if (metaJSONNode !== null) {
        var node = metaJSONNode, errorNodes = errorNodesQuery(node), errorNodesLength = errorNodes.length;
        if (errorNodesLength === 0) {
            metaJSONFileValid = true;
        }
    }
    return metaJSONFileValid;
}
function dependenciesFromNode(node) {
    var dependencies = _dependencies.default.fromNothing();
    if (node !== null) {
        var dependencyNodes = dependencyNodesQuery(node);
        dependencyNodes.forEach(function(dependencyNode) {
            var dependencyNameTerminalNode = dependencyNameTerminalNodeQuery(dependencyNode), shortenedVersionNumberTerminalNode = shortenedVersionNumberTerminalNodeQuery(dependencyNode), dependencyNameTerminalNodeContent = dependencyNameTerminalNode.getContent(), shortenedVersionNumberTerminalNodeContent = shortenedVersionNumberTerminalNode.getContent(), string = (0, _content.trimDoubleQuotes)(shortenedVersionNumberTerminalNodeContent), name = (0, _content.trimDoubleQuotes)(dependencyNameTerminalNodeContent), shortenedVersion = _shortenedVersion.default.fromString(string), dependency = _dependency.default.fromNameAndShortenedVersion(name, shortenedVersion);
            dependencies.addDependency(dependency);
        });
    }
    return dependencies;
}
function dependencyNamesFromNode(node) {
    var dependencies = dependenciesFromNode(node), dependencyNames = dependencies.mapDependency(function(dependency) {
        var dependencyName = dependency.getName();
        return dependencyName;
    });
    return dependencyNames;
}
function updateMetaJSONFileVersion(metaJSONFile, version) {
    var metaJSONNode = metaJSONNodeFromMetaJSONFile(metaJSONFile), node = metaJSONNode, repository = repositoryFromNode(node);
    var dependencies = dependenciesFromNode(node);
    var string = version.toString(), dependenciesJSON = dependencies.toJSON();
    version = string; ///
    dependencies = dependenciesJSON; ///
    var metaJSON = {
        version: version,
        repository: repository,
        dependencies: dependencies
    }, metaJSONString = JSON.stringify(metaJSON, null, _constants.DOUBLE_SPACE), metaJSONFileContent = metaJSONString; ///
    metaJSONFile.setContent(metaJSONFileContent);
}
function metaJSONNodeFromMetaJSONFile(metaJSONFile) {
    var metaJSONNode = null;
    if (metaJSONFile !== null) {
        var content = metaJSONFile.getContent(), tokens = metaJSONLexer.tokenise(content), node = metaJSONParser.parse(tokens);
        metaJSONNode = node; ///
    }
    return metaJSONNode;
}
var _default = {
    versionFromNode: versionFromNode,
    repositoryFromNode: repositoryFromNode,
    isMetaJSONFileValid: isMetaJSONFileValid,
    dependenciesFromNode: dependenciesFromNode,
    dependencyNamesFromNode: dependencyNamesFromNode,
    updateMetaJSONFileVersion: updateMetaJSONFileVersion,
    metaJSONNodeFromMetaJSONFile: metaJSONNodeFromMetaJSONFile
};

//# sourceMappingURL=data:application/json;base64,