"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    readmeFileFromFiles: function() {
        return readmeFileFromFiles;
    },
    metaJSONFileFromFiles: function() {
        return metaJSONFileFromFiles;
    },
    florenceFilesFromFiles: function() {
        return florenceFilesFromFiles;
    },
    contextJSONFileFromFiles: function() {
        return contextJSONFileFromFiles;
    },
    customGrammarBNFFilesFromFiles: function() {
        return customGrammarBNFFilesFromFiles;
    },
    customGrammarPatternFilesFromFiles: function() {
        return customGrammarPatternFilesFromFiles;
    }
});
var _filePath = require("../utilities/filePath");
function readmeFileFromFiles(files) {
    var readmeFile = null;
    files.someFile(function(file) {
        var filePath = file.getPath(), filePathReadmeFilePath = (0, _filePath.isFilePathReadmeFilePath)(filePath);
        if (filePathReadmeFilePath) {
            readmeFile = file; ///
            return true;
        }
    });
    return readmeFile;
}
function metaJSONFileFromFiles(files) {
    var metaJSONFile = null;
    files.someFile(function(file) {
        var filePath = file.getPath(), filePathMetaJSONFilePath = (0, _filePath.isFilePathMetaJSONFilePath)(filePath);
        if (filePathMetaJSONFilePath) {
            metaJSONFile = file; ///
            return true;
        }
    });
    return metaJSONFile;
}
function florenceFilesFromFiles(files) {
    var florenceFiles = files.reduceFile(function(florenceFiles, file) {
        var filePath = file.getPath(), filePathFlorenceFilePath = (0, _filePath.isFilePathFlorenceFilePath)(filePath), fileFlorenceFile = filePathFlorenceFilePath; ///
        if (fileFlorenceFile) {
            var florenceFile = file; ///
            florenceFiles.push(florenceFile);
        }
        return florenceFiles;
    }, []);
    return florenceFiles;
}
function contextJSONFileFromFiles(files) {
    var contextJSONFile = null;
    files.someFile(function(file) {
        var filePath = file.getPath(), filePathContextJSONFilePath = (0, _filePath.isFilePathContextJSONFilePath)(filePath);
        if (filePathContextJSONFilePath) {
            contextJSONFile = file; ///
            return true;
        }
    });
    return contextJSONFile;
}
function customGrammarBNFFilesFromFiles(files) {
    var customGrammarBNFFiles = files.reduceFile(function(customGrammarBNFFiles, file) {
        var filePath = file.getPath(), filePathCustomGrammarBNFFilePath = (0, _filePath.isFilePathCustomGrammarBNFFilePath)(filePath), fileCustomGrammarBNFFile = filePathCustomGrammarBNFFilePath; ///
        if (fileCustomGrammarBNFFile) {
            var customGrammarBNFFile = file; ///
            customGrammarBNFFiles.push(customGrammarBNFFile);
        }
        return customGrammarBNFFiles;
    }, []);
    return customGrammarBNFFiles;
}
function customGrammarPatternFilesFromFiles(files) {
    var customGrammarPatternFiles = files.reduceFile(function(customGrammarPatternFiles, file) {
        var filePath = file.getPath(), filePathCustomGrammarPatternFilePath = (0, _filePath.isFilePathCustomGrammarPatternFilePath)(filePath), fileCustomGrammarPatternFile = filePathCustomGrammarPatternFilePath; ///
        if (fileCustomGrammarPatternFile) {
            var customGrammarPatternFile = file; ///
            customGrammarPatternFiles.push(customGrammarPatternFile);
        }
        return customGrammarPatternFiles;
    }, []);
    return customGrammarPatternFiles;
}

//# sourceMappingURL=data:application/json;base64,