"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    customGrammarBNFFilesFromFiles: function() {
        return customGrammarBNFFilesFromFiles;
    },
    customGrammarPatternFilesFromFiles: function() {
        return customGrammarPatternFilesFromFiles;
    },
    metaJSONFileFromFiles: function() {
        return metaJSONFileFromFiles;
    },
    nominalFilesFromFiles: function() {
        return nominalFilesFromFiles;
    },
    readmeFileFromFiles: function() {
        return readmeFileFromFiles;
    }
});
var _filePath = require("../utilities/filePath");
function readmeFileFromFiles(files) {
    var readmeFile = null;
    files.someFile(function(file) {
        var filePath = file.getPath(), filePathReadmeFilePath = (0, _filePath.isFilePathReadmeFilePath)(filePath);
        if (filePathReadmeFilePath) {
            readmeFile = file; ///
            return true;
        }
    });
    return readmeFile;
}
function metaJSONFileFromFiles(files) {
    var metaJSONFile = null;
    files.someFile(function(file) {
        var filePath = file.getPath(), filePathMetaJSONFilePath = (0, _filePath.isFilePathMetaJSONFilePath)(filePath);
        if (filePathMetaJSONFilePath) {
            metaJSONFile = file; ///
            return true;
        }
    });
    return metaJSONFile;
}
function nominalFilesFromFiles(files) {
    var nominalFiles = files.reduceFile(function(nominalFiles, file) {
        var filePath = file.getPath(), filePathNominalFilePath = (0, _filePath.isFilePathNominalFilePath)(filePath), fileNominalFile = filePathNominalFilePath; ///
        if (fileNominalFile) {
            var nominalFile = file; ///
            nominalFiles.push(nominalFile);
        }
        return nominalFiles;
    }, []);
    return nominalFiles;
}
function customGrammarBNFFilesFromFiles(files) {
    var customGrammarBNFFiles = files.reduceFile(function(customGrammarBNFFiles, file) {
        var filePath = file.getPath(), filePathCustomGrammarBNFFilePath = (0, _filePath.isFilePathCustomGrammarBNFFilePath)(filePath), fileCustomGrammarBNFFile = filePathCustomGrammarBNFFilePath; ///
        if (fileCustomGrammarBNFFile) {
            var customGrammarBNFFile = file; ///
            customGrammarBNFFiles.push(customGrammarBNFFile);
        }
        return customGrammarBNFFiles;
    }, []);
    return customGrammarBNFFiles;
}
function customGrammarPatternFilesFromFiles(files) {
    var customGrammarPatternFiles = files.reduceFile(function(customGrammarPatternFiles, file) {
        var filePath = file.getPath(), filePathCustomGrammarPatternFilePath = (0, _filePath.isFilePathCustomGrammarPatternFilePath)(filePath), fileCustomGrammarPatternFile = filePathCustomGrammarPatternFilePath; ///
        if (fileCustomGrammarPatternFile) {
            var customGrammarPatternFile = file; ///
            customGrammarPatternFiles.push(customGrammarPatternFile);
        }
        return customGrammarPatternFiles;
    }, []);
    return customGrammarPatternFiles;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCxcbiAgICAgICAgIGlzRmlsZVBhdGhOb21pbmFsRmlsZVBhdGgsXG4gICAgICAgICBpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCxcbiAgICAgICAgIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgsXG4gICAgICAgICBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aCB9IGZyb20gXCIuLi91dGlsaXRpZXMvZmlsZVBhdGhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRtZUZpbGVGcm9tRmlsZXMoZmlsZXMpIHtcbiAgbGV0IHJlYWRtZUZpbGUgPSBudWxsO1xuXG4gIGZpbGVzLnNvbWVGaWxlKChmaWxlKSA9PiB7XG4gICAgY29uc3QgZmlsZVBhdGggPSBmaWxlLmdldFBhdGgoKSxcbiAgICAgICAgICBmaWxlUGF0aFJlYWRtZUZpbGVQYXRoID0gaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoKGZpbGVQYXRoKTtcblxuICAgIGlmIChmaWxlUGF0aFJlYWRtZUZpbGVQYXRoKSB7XG4gICAgICByZWFkbWVGaWxlID0gZmlsZTsgIC8vL1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZWFkbWVGaWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWV0YUpTT05GaWxlRnJvbUZpbGVzKGZpbGVzKSB7XG4gIGxldCBtZXRhSlNPTkZpbGUgPSBudWxsO1xuXG4gIGZpbGVzLnNvbWVGaWxlKChmaWxlKSA9PiB7XG4gICAgY29uc3QgZmlsZVBhdGggPSBmaWxlLmdldFBhdGgoKSxcbiAgICAgICAgICBmaWxlUGF0aE1ldGFKU09ORmlsZVBhdGggPSBpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aChmaWxlUGF0aCk7XG5cbiAgICBpZiAoZmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoKSB7XG4gICAgICBtZXRhSlNPTkZpbGUgPSBmaWxlOyAgLy8vXG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG1ldGFKU09ORmlsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vbWluYWxGaWxlc0Zyb21GaWxlcyhmaWxlcykge1xuICBjb25zdCBub21pbmFsRmlsZXMgPSBmaWxlcy5yZWR1Y2VGaWxlKChub21pbmFsRmlsZXMsIGZpbGUpID0+IHtcbiAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGZpbGUuZ2V0UGF0aCgpLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoTm9taW5hbEZpbGVQYXRoID0gaXNGaWxlUGF0aE5vbWluYWxGaWxlUGF0aChmaWxlUGF0aCksXG4gICAgICAgICAgICAgICAgZmlsZU5vbWluYWxGaWxlID0gZmlsZVBhdGhOb21pbmFsRmlsZVBhdGg7ICAvLy9cblxuICAgICAgICAgIGlmIChmaWxlTm9taW5hbEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vbWluYWxGaWxlID0gZmlsZTsgIC8vL1xuXG4gICAgICAgICAgICBub21pbmFsRmlsZXMucHVzaChub21pbmFsRmlsZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5vbWluYWxGaWxlcztcbiAgICAgICAgfSwgW10pO1xuXG4gIHJldHVybiBub21pbmFsRmlsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21HcmFtbWFyQk5GRmlsZXNGcm9tRmlsZXMoZmlsZXMpIHtcbiAgY29uc3QgY3VzdG9tR3JhbW1hckJORkZpbGVzID0gZmlsZXMucmVkdWNlRmlsZSgoY3VzdG9tR3JhbW1hckJORkZpbGVzLCBmaWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBmaWxlLmdldFBhdGgoKSxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCA9IGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgoZmlsZVBhdGgpLFxuICAgICAgICAgICAgICAgIGZpbGVDdXN0b21HcmFtbWFyQk5GRmlsZSA9IGZpbGVQYXRoQ3VzdG9tR3JhbW1hckJORkZpbGVQYXRoOyAgLy8vXG5cbiAgICAgICAgICBpZiAoZmlsZUN1c3RvbUdyYW1tYXJCTkZGaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21HcmFtbWFyQk5GRmlsZSA9IGZpbGU7ICAvLy9cblxuICAgICAgICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGVzLnB1c2goY3VzdG9tR3JhbW1hckJORkZpbGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjdXN0b21HcmFtbWFyQk5GRmlsZXM7XG4gICAgICAgIH0sIFtdKTtcblxuICByZXR1cm4gY3VzdG9tR3JhbW1hckJORkZpbGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlc0Zyb21GaWxlcyhmaWxlcykge1xuICBjb25zdCBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzID0gZmlsZXMucmVkdWNlRmlsZSgoY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcywgZmlsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gZmlsZS5nZXRQYXRoKCksXG4gICAgICAgICAgICAgICAgZmlsZVBhdGhDdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoID0gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgoZmlsZVBhdGgpLFxuICAgICAgICAgICAgICAgIGZpbGVDdXN0b21HcmFtbWFyUGF0dGVybkZpbGUgPSBmaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGg7ICAvLy9cblxuICAgICAgICAgIGlmIChmaWxlQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUgPSBmaWxlOyAgLy8vXG5cbiAgICAgICAgICAgIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMucHVzaChjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzO1xuICAgICAgICB9LCBbXSk7XG5cbiAgcmV0dXJuIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXM7XG59XG4iXSwibmFtZXMiOlsiY3VzdG9tR3JhbW1hckJORkZpbGVzRnJvbUZpbGVzIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlc0Zyb21GaWxlcyIsIm1ldGFKU09ORmlsZUZyb21GaWxlcyIsIm5vbWluYWxGaWxlc0Zyb21GaWxlcyIsInJlYWRtZUZpbGVGcm9tRmlsZXMiLCJmaWxlcyIsInJlYWRtZUZpbGUiLCJzb21lRmlsZSIsImZpbGUiLCJmaWxlUGF0aCIsImdldFBhdGgiLCJmaWxlUGF0aFJlYWRtZUZpbGVQYXRoIiwiaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoIiwibWV0YUpTT05GaWxlIiwiZmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoIiwiaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgiLCJub21pbmFsRmlsZXMiLCJyZWR1Y2VGaWxlIiwiZmlsZVBhdGhOb21pbmFsRmlsZVBhdGgiLCJpc0ZpbGVQYXRoTm9taW5hbEZpbGVQYXRoIiwiZmlsZU5vbWluYWxGaWxlIiwibm9taW5hbEZpbGUiLCJwdXNoIiwiY3VzdG9tR3JhbW1hckJORkZpbGVzIiwiZmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgiLCJpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckJORkZpbGVQYXRoIiwiZmlsZUN1c3RvbUdyYW1tYXJCTkZGaWxlIiwiY3VzdG9tR3JhbW1hckJORkZpbGUiLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzIiwiZmlsZVBhdGhDdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoIiwiaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgiLCJmaWxlQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUE0RGdCQSw4QkFBOEI7ZUFBOUJBOztJQWtCQUMsa0NBQWtDO2VBQWxDQTs7SUFyREFDLHFCQUFxQjtlQUFyQkE7O0lBaUJBQyxxQkFBcUI7ZUFBckJBOztJQWxDQUMsbUJBQW1CO2VBQW5CQTs7O3dCQUZ1QztBQUVoRCxTQUFTQSxvQkFBb0JDLEtBQUs7SUFDdkMsSUFBSUMsYUFBYTtJQUVqQkQsTUFBTUUsUUFBUSxDQUFDLFNBQUNDO1FBQ2QsSUFBTUMsV0FBV0QsS0FBS0UsT0FBTyxJQUN2QkMseUJBQXlCQyxJQUFBQSxrQ0FBd0IsRUFBQ0g7UUFFeEQsSUFBSUUsd0JBQXdCO1lBQzFCTCxhQUFhRSxNQUFPLEdBQUc7WUFFdkIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPRjtBQUNUO0FBRU8sU0FBU0osc0JBQXNCRyxLQUFLO0lBQ3pDLElBQUlRLGVBQWU7SUFFbkJSLE1BQU1FLFFBQVEsQ0FBQyxTQUFDQztRQUNkLElBQU1DLFdBQVdELEtBQUtFLE9BQU8sSUFDdkJJLDJCQUEyQkMsSUFBQUEsb0NBQTBCLEVBQUNOO1FBRTVELElBQUlLLDBCQUEwQjtZQUM1QkQsZUFBZUwsTUFBTyxHQUFHO1lBRXpCLE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBT0s7QUFDVDtBQUVPLFNBQVNWLHNCQUFzQkUsS0FBSztJQUN6QyxJQUFNVyxlQUFlWCxNQUFNWSxVQUFVLENBQUMsU0FBQ0QsY0FBY1I7UUFDN0MsSUFBTUMsV0FBV0QsS0FBS0UsT0FBTyxJQUN2QlEsMEJBQTBCQyxJQUFBQSxtQ0FBeUIsRUFBQ1YsV0FDcERXLGtCQUFrQkYseUJBQTBCLEdBQUc7UUFFckQsSUFBSUUsaUJBQWlCO1lBQ25CLElBQU1DLGNBQWNiLE1BQU8sR0FBRztZQUU5QlEsYUFBYU0sSUFBSSxDQUFDRDtRQUNwQjtRQUVBLE9BQU9MO0lBQ1QsR0FBRyxFQUFFO0lBRVgsT0FBT0E7QUFDVDtBQUVPLFNBQVNoQiwrQkFBK0JLLEtBQUs7SUFDbEQsSUFBTWtCLHdCQUF3QmxCLE1BQU1ZLFVBQVUsQ0FBQyxTQUFDTSx1QkFBdUJmO1FBQy9ELElBQU1DLFdBQVdELEtBQUtFLE9BQU8sSUFDdkJjLG1DQUFtQ0MsSUFBQUEsNENBQWtDLEVBQUNoQixXQUN0RWlCLDJCQUEyQkYsa0NBQW1DLEdBQUc7UUFFdkUsSUFBSUUsMEJBQTBCO1lBQzVCLElBQU1DLHVCQUF1Qm5CLE1BQU8sR0FBRztZQUV2Q2Usc0JBQXNCRCxJQUFJLENBQUNLO1FBQzdCO1FBRUEsT0FBT0o7SUFDVCxHQUFHLEVBQUU7SUFFWCxPQUFPQTtBQUNUO0FBRU8sU0FBU3RCLG1DQUFtQ0ksS0FBSztJQUN0RCxJQUFNdUIsNEJBQTRCdkIsTUFBTVksVUFBVSxDQUFDLFNBQUNXLDJCQUEyQnBCO1FBQ3ZFLElBQU1DLFdBQVdELEtBQUtFLE9BQU8sSUFDdkJtQix1Q0FBdUNDLElBQUFBLGdEQUFzQyxFQUFDckIsV0FDOUVzQiwrQkFBK0JGLHNDQUF1QyxHQUFHO1FBRS9FLElBQUlFLDhCQUE4QjtZQUNoQyxJQUFNQywyQkFBMkJ4QixNQUFPLEdBQUc7WUFFM0NvQiwwQkFBMEJOLElBQUksQ0FBQ1U7UUFDakM7UUFFQSxPQUFPSjtJQUNULEdBQUcsRUFBRTtJQUVYLE9BQU9BO0FBQ1QifQ==