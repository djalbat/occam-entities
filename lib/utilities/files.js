"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    readmeFileFromFiles: function() {
        return readmeFileFromFiles;
    },
    metaJSONFileFromFiles: function() {
        return metaJSONFileFromFiles;
    },
    florenceFilesFromFiles: function() {
        return florenceFilesFromFiles;
    },
    customGrammarBNFFilesFromFiles: function() {
        return customGrammarBNFFilesFromFiles;
    },
    customGrammarPatternFilesFromFiles: function() {
        return customGrammarPatternFilesFromFiles;
    },
    default: function() {
        return _default;
    }
});
var _filePath = require("../utilities/filePath");
function readmeFileFromFiles(files) {
    var readmeFile = null;
    files.someFile(function(file) {
        var filePath = file.getPath(), filePathReadmeFilePath = (0, _filePath.isFilePathReadmeFilePath)(filePath);
        if (filePathReadmeFilePath) {
            readmeFile = file; ///
            return true;
        }
    });
    return readmeFile;
}
function metaJSONFileFromFiles(files) {
    var metaJSONFile = null;
    files.someFile(function(file) {
        var filePath = file.getPath(), filePathMetaJSONFilePath = (0, _filePath.isFilePathMetaJSONFilePath)(filePath);
        if (filePathMetaJSONFilePath) {
            metaJSONFile = file; ///
            return true;
        }
    });
    return metaJSONFile;
}
function florenceFilesFromFiles(files) {
    var florenceFiles = files.reduceFile(function(florenceFiles, file) {
        var filePath = file.getPath(), filePathFlorenceFilePath = (0, _filePath.isFilePathFlorenceFilePath)(filePath), fileFlorenceFile = filePathFlorenceFilePath; ///
        if (fileFlorenceFile) {
            var florenceFile = file; ///
            florenceFiles.push(florenceFile);
        }
        return florenceFiles;
    }, []);
    return florenceFiles;
}
function customGrammarBNFFilesFromFiles(files) {
    var customGrammarBNFFiles = files.reduceFile(function(customGrammarBNFFiles, file) {
        var filePath = file.getPath(), filePathCustomGrammarBNFFilePath = (0, _filePath.isFilePathCustomGrammarBNFFilePath)(filePath), fileCustomGrammarBNFFile = filePathCustomGrammarBNFFilePath; ///
        if (fileCustomGrammarBNFFile) {
            var customGrammarBNFFile = file; ///
            customGrammarBNFFiles.push(customGrammarBNFFile);
        }
        return customGrammarBNFFiles;
    }, []);
    return customGrammarBNFFiles;
}
function customGrammarPatternFilesFromFiles(files) {
    var customGrammarPatternFiles = files.reduceFile(function(customGrammarPatternFiles, file) {
        var filePath = file.getPath(), filePathCustomGrammarPatternFilePath = (0, _filePath.isFilePathCustomGrammarPatternFilePath)(filePath), fileCustomGrammarPatternFile = filePathCustomGrammarPatternFilePath; ///
        if (fileCustomGrammarPatternFile) {
            var customGrammarPatternFile = file; ///
            customGrammarPatternFiles.push(customGrammarPatternFile);
        }
        return customGrammarPatternFiles;
    }, []);
    return customGrammarPatternFiles;
}
var _default = {
    readmeFileFromFiles: readmeFileFromFiles,
    metaJSONFileFromFiles: metaJSONFileFromFiles,
    florenceFilesFromFiles: florenceFilesFromFiles,
    customGrammarBNFFilesFromFiles: customGrammarBNFFilesFromFiles,
    customGrammarPatternFilesFromFiles: customGrammarPatternFilesFromFiles
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCxcbiAgICAgICAgIGlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoLFxuICAgICAgICAgaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgsXG4gICAgICAgICBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hckJORkZpbGVQYXRoLFxuICAgICAgICAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbGVQYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkbWVGaWxlRnJvbUZpbGVzKGZpbGVzKSB7XG4gIGxldCByZWFkbWVGaWxlID0gbnVsbDtcblxuICBmaWxlcy5zb21lRmlsZSgoZmlsZSkgPT4ge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gZmlsZS5nZXRQYXRoKCksXG4gICAgICAgICAgZmlsZVBhdGhSZWFkbWVGaWxlUGF0aCA9IGlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aChmaWxlUGF0aCk7XG5cbiAgICBpZiAoZmlsZVBhdGhSZWFkbWVGaWxlUGF0aCkge1xuICAgICAgcmVhZG1lRmlsZSA9IGZpbGU7ICAvLy9cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVhZG1lRmlsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGFKU09ORmlsZUZyb21GaWxlcyhmaWxlcykge1xuICBsZXQgbWV0YUpTT05GaWxlID0gbnVsbDtcblxuICBmaWxlcy5zb21lRmlsZSgoZmlsZSkgPT4ge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gZmlsZS5nZXRQYXRoKCksXG4gICAgICAgICAgZmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoID0gaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgoZmlsZVBhdGgpO1xuXG4gICAgaWYgKGZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCkge1xuICAgICAgbWV0YUpTT05GaWxlID0gZmlsZTsgIC8vL1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBtZXRhSlNPTkZpbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbG9yZW5jZUZpbGVzRnJvbUZpbGVzKGZpbGVzKSB7XG4gIGNvbnN0IGZsb3JlbmNlRmlsZXMgPSBmaWxlcy5yZWR1Y2VGaWxlKChmbG9yZW5jZUZpbGVzLCBmaWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBmaWxlLmdldFBhdGgoKSxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGggPSBpc0ZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aChmaWxlUGF0aCksXG4gICAgICAgICAgICAgICAgZmlsZUZsb3JlbmNlRmlsZSA9IGZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aDsgIC8vL1xuXG4gICAgICAgICAgaWYgKGZpbGVGbG9yZW5jZUZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZsb3JlbmNlRmlsZSA9IGZpbGU7ICAvLy9cblxuICAgICAgICAgICAgZmxvcmVuY2VGaWxlcy5wdXNoKGZsb3JlbmNlRmlsZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZsb3JlbmNlRmlsZXM7XG4gICAgICAgIH0sIFtdKTtcblxuICByZXR1cm4gZmxvcmVuY2VGaWxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUdyYW1tYXJCTkZGaWxlc0Zyb21GaWxlcyhmaWxlcykge1xuICBjb25zdCBjdXN0b21HcmFtbWFyQk5GRmlsZXMgPSBmaWxlcy5yZWR1Y2VGaWxlKChjdXN0b21HcmFtbWFyQk5GRmlsZXMsIGZpbGUpID0+IHtcbiAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGZpbGUuZ2V0UGF0aCgpLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoQ3VzdG9tR3JhbW1hckJORkZpbGVQYXRoID0gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aChmaWxlUGF0aCksXG4gICAgICAgICAgICAgICAgZmlsZUN1c3RvbUdyYW1tYXJCTkZGaWxlID0gZmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGg7ICAvLy9cblxuICAgICAgICAgIGlmIChmaWxlQ3VzdG9tR3JhbW1hckJORkZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbUdyYW1tYXJCTkZGaWxlID0gZmlsZTsgIC8vL1xuXG4gICAgICAgICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZXMucHVzaChjdXN0b21HcmFtbWFyQk5GRmlsZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGN1c3RvbUdyYW1tYXJCTkZGaWxlcztcbiAgICAgICAgfSwgW10pO1xuXG4gIHJldHVybiBjdXN0b21HcmFtbWFyQk5GRmlsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzRnJvbUZpbGVzKGZpbGVzKSB7XG4gIGNvbnN0IGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMgPSBmaWxlcy5yZWR1Y2VGaWxlKChjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVzLCBmaWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBmaWxlLmdldFBhdGgoKSxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGggPSBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aChmaWxlUGF0aCksXG4gICAgICAgICAgICAgICAgZmlsZUN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZSA9IGZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aDsgIC8vL1xuXG4gICAgICAgICAgaWYgKGZpbGVDdXN0b21HcmFtbWFyUGF0dGVybkZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZSA9IGZpbGU7ICAvLy9cblxuICAgICAgICAgICAgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcy5wdXNoKGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXM7XG4gICAgICAgIH0sIFtdKTtcblxuICByZXR1cm4gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICByZWFkbWVGaWxlRnJvbUZpbGVzLFxuICBtZXRhSlNPTkZpbGVGcm9tRmlsZXMsXG4gIGZsb3JlbmNlRmlsZXNGcm9tRmlsZXMsXG4gIGN1c3RvbUdyYW1tYXJCTkZGaWxlc0Zyb21GaWxlcyxcbiAgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlc0Zyb21GaWxlc1xufTtcbiJdLCJuYW1lcyI6WyJyZWFkbWVGaWxlRnJvbUZpbGVzIiwibWV0YUpTT05GaWxlRnJvbUZpbGVzIiwiZmxvcmVuY2VGaWxlc0Zyb21GaWxlcyIsImN1c3RvbUdyYW1tYXJCTkZGaWxlc0Zyb21GaWxlcyIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXNGcm9tRmlsZXMiLCJmaWxlcyIsInJlYWRtZUZpbGUiLCJzb21lRmlsZSIsImZpbGUiLCJmaWxlUGF0aCIsImdldFBhdGgiLCJmaWxlUGF0aFJlYWRtZUZpbGVQYXRoIiwiaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoIiwibWV0YUpTT05GaWxlIiwiZmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoIiwiaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgiLCJmbG9yZW5jZUZpbGVzIiwicmVkdWNlRmlsZSIsImZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aCIsImlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoIiwiZmlsZUZsb3JlbmNlRmlsZSIsImZsb3JlbmNlRmlsZSIsInB1c2giLCJjdXN0b21HcmFtbWFyQk5GRmlsZXMiLCJmaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgiLCJmaWxlQ3VzdG9tR3JhbW1hckJORkZpbGUiLCJjdXN0b21HcmFtbWFyQk5GRmlsZSIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZXMiLCJmaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgiLCJpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aCIsImZpbGVDdXN0b21HcmFtbWFyUGF0dGVybkZpbGUiLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVFnQkEsbUJBQW1CO2VBQW5CQTs7SUFpQkFDLHFCQUFxQjtlQUFyQkE7O0lBaUJBQyxzQkFBc0I7ZUFBdEJBOztJQWtCQUMsOEJBQThCO2VBQTlCQTs7SUFrQkFDLGtDQUFrQztlQUFsQ0E7O0lBa0JoQixPQU1FO2VBTkY7Ozt3QkExRnVEO0FBRWhELFNBQVNKLG9CQUFvQkssS0FBSyxFQUFFO0lBQ3pDLElBQUlDLGFBQWEsSUFBSTtJQUVyQkQsTUFBTUUsUUFBUSxDQUFDLFNBQUNDLE1BQVM7UUFDdkIsSUFBTUMsV0FBV0QsS0FBS0UsT0FBTyxJQUN2QkMseUJBQXlCQyxJQUFBQSxrQ0FBd0IsRUFBQ0g7UUFFeEQsSUFBSUUsd0JBQXdCO1lBQzFCTCxhQUFhRSxNQUFPLEdBQUc7WUFFdkIsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNIO0lBRUEsT0FBT0Y7QUFDVDtBQUVPLFNBQVNMLHNCQUFzQkksS0FBSyxFQUFFO0lBQzNDLElBQUlRLGVBQWUsSUFBSTtJQUV2QlIsTUFBTUUsUUFBUSxDQUFDLFNBQUNDLE1BQVM7UUFDdkIsSUFBTUMsV0FBV0QsS0FBS0UsT0FBTyxJQUN2QkksMkJBQTJCQyxJQUFBQSxvQ0FBMEIsRUFBQ047UUFFNUQsSUFBSUssMEJBQTBCO1lBQzVCRCxlQUFlTCxNQUFPLEdBQUc7WUFFekIsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNIO0lBRUEsT0FBT0s7QUFDVDtBQUVPLFNBQVNYLHVCQUF1QkcsS0FBSyxFQUFFO0lBQzVDLElBQU1XLGdCQUFnQlgsTUFBTVksVUFBVSxDQUFDLFNBQUNELGVBQWVSLE1BQVM7UUFDeEQsSUFBTUMsV0FBV0QsS0FBS0UsT0FBTyxJQUN2QlEsMkJBQTJCQyxJQUFBQSxvQ0FBMEIsRUFBQ1YsV0FDdERXLG1CQUFtQkYsMEJBQTJCLEdBQUc7UUFFdkQsSUFBSUUsa0JBQWtCO1lBQ3BCLElBQU1DLGVBQWViLE1BQU8sR0FBRztZQUUvQlEsY0FBY00sSUFBSSxDQUFDRDtRQUNyQixDQUFDO1FBRUQsT0FBT0w7SUFDVCxHQUFHLEVBQUU7SUFFWCxPQUFPQTtBQUNUO0FBRU8sU0FBU2IsK0JBQStCRSxLQUFLLEVBQUU7SUFDcEQsSUFBTWtCLHdCQUF3QmxCLE1BQU1ZLFVBQVUsQ0FBQyxTQUFDTSx1QkFBdUJmLE1BQVM7UUFDeEUsSUFBTUMsV0FBV0QsS0FBS0UsT0FBTyxJQUN2QmMsbUNBQW1DQyxJQUFBQSw0Q0FBa0MsRUFBQ2hCLFdBQ3RFaUIsMkJBQTJCRixrQ0FBbUMsR0FBRztRQUV2RSxJQUFJRSwwQkFBMEI7WUFDNUIsSUFBTUMsdUJBQXVCbkIsTUFBTyxHQUFHO1lBRXZDZSxzQkFBc0JELElBQUksQ0FBQ0s7UUFDN0IsQ0FBQztRQUVELE9BQU9KO0lBQ1QsR0FBRyxFQUFFO0lBRVgsT0FBT0E7QUFDVDtBQUVPLFNBQVNuQixtQ0FBbUNDLEtBQUssRUFBRTtJQUN4RCxJQUFNdUIsNEJBQTRCdkIsTUFBTVksVUFBVSxDQUFDLFNBQUNXLDJCQUEyQnBCLE1BQVM7UUFDaEYsSUFBTUMsV0FBV0QsS0FBS0UsT0FBTyxJQUN2Qm1CLHVDQUF1Q0MsSUFBQUEsZ0RBQXNDLEVBQUNyQixXQUM5RXNCLCtCQUErQkYsc0NBQXVDLEdBQUc7UUFFL0UsSUFBSUUsOEJBQThCO1lBQ2hDLElBQU1DLDJCQUEyQnhCLE1BQU8sR0FBRztZQUUzQ29CLDBCQUEwQk4sSUFBSSxDQUFDVTtRQUNqQyxDQUFDO1FBRUQsT0FBT0o7SUFDVCxHQUFHLEVBQUU7SUFFWCxPQUFPQTtBQUNUO0lBRUEsV0FBZTtJQUNiNUIscUJBQUFBO0lBQ0FDLHVCQUFBQTtJQUNBQyx3QkFBQUE7SUFDQUMsZ0NBQUFBO0lBQ0FDLG9DQUFBQTtBQUNGIn0=