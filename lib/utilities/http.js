"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.post = post;
exports.default = void 0;
var _stream = require("stream");
var _necessary = require("necessary");
var _methods = require("../methods");
var _statusCodes = require("../statusCodes");
var _contentTypes = require("../contentTypes");
var _constants = require("../constants");
var makeRequest = _necessary.requestUtilities.request;
function post(host, uri, query, json1, callback) {
    var content = JSON.stringify(json1), method = _methods.POST_METHOD, headers = {
    }, contentType = _contentTypes.APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE, contentLength = content.length;
    headers[_constants.CONTENT_TYPE] = contentType;
    headers[_constants.CONTENT_LENGTH] = contentLength;
    var request = makeRequest(host, uri, query, method, headers, function(error, response) {
        var statusCode = response.statusCode;
        error = error || statusCode !== _statusCodes.OKAY_200_STATUS_CODE;
        if (error) {
            var json = null;
            callback(json);
            return;
        }
        bodyFromResponse(response, function(body) {
            var json = null;
            try {
                json = JSON.parse(body);
            } catch (error) {
            } ///
            callback(json);
        });
    }), readable = _stream.Readable.from(content);
    readable.pipe(request);
}
var _default = {
    post: post
};
exports.default = _default;
function bodyFromResponse(response, callback) {
    var body = _constants.EMPTY_STRING;
    response.on(_constants.DATA, function(data) {
        body += data;
    });
    response.on(_constants.END, function() {
        callback(body);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaHR0cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmltcG9ydCB7IHJlcXVlc3RVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgcmVxdWVzdDogbWFrZVJlcXVlc3QgfSA9IHJlcXVlc3RVdGlsaXRpZXM7XG5cbmltcG9ydCB7IFBPU1RfTUVUSE9EIH0gZnJvbSBcIi4uL21ldGhvZHNcIjtcbmltcG9ydCB7IE9LQVlfMjAwX1NUQVRVU19DT0RFIH0gZnJvbSBcIi4uL3N0YXR1c0NvZGVzXCI7XG5pbXBvcnQgeyBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOF9DT05URU5UX1RZUEUgfSBmcm9tIFwiLi4vY29udGVudFR5cGVzXCJcbmltcG9ydCB7IEVORCwgREFUQSwgRU1QVFlfU1RSSU5HLCBDT05URU5UX1RZUEUsIENPTlRFTlRfTEVOR1RIIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcG9zdChob3N0LCB1cmksIHF1ZXJ5LCBqc29uLCBjYWxsYmFjaykge1xuXHRjb25zdCBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoanNvbiksXHQvLy9cblx0XHRcdFx0bWV0aG9kID0gUE9TVF9NRVRIT0QsXG5cdFx0XHRcdGhlYWRlcnMgPSB7fSxcblx0XHRcdFx0Y29udGVudFR5cGUgPSBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOF9DT05URU5UX1RZUEUsXG5cdFx0XHRcdGNvbnRlbnRMZW5ndGggPSBjb250ZW50Lmxlbmd0aDtcblxuXHRoZWFkZXJzW0NPTlRFTlRfVFlQRV0gPSBjb250ZW50VHlwZTtcblxuXHRoZWFkZXJzW0NPTlRFTlRfTEVOR1RIXSA9IGNvbnRlbnRMZW5ndGg7XG5cblx0Y29uc3QgcmVxdWVzdCA9IG1ha2VSZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIG1ldGhvZCwgaGVhZGVycywgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHsgc3RhdHVzQ29kZSB9ID0gcmVzcG9uc2U7XG5cblx0XHRcdFx0XHRlcnJvciA9IGVycm9yIHx8IChzdGF0dXNDb2RlICE9PSBPS0FZXzIwMF9TVEFUVVNfQ09ERSk7XG5cblx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGpzb24gPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRjYWxsYmFjayhqc29uKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJvZHlGcm9tUmVzcG9uc2UocmVzcG9uc2UsIChib2R5KSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQganNvbiA9IG51bGw7XG5cblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGpzb24gPSBKU09OLnBhcnNlKGJvZHkpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHt9XHQvLy9cblxuXHRcdFx0XHRcdFx0Y2FsbGJhY2soanNvbik7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRyZWFkYWJsZSA9IFJlYWRhYmxlLmZyb20oY29udGVudCk7XG5cblx0cmVhZGFibGUucGlwZShyZXF1ZXN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXHRwb3N0XG59O1xuXG5mdW5jdGlvbiBib2R5RnJvbVJlc3BvbnNlKHJlc3BvbnNlLCBjYWxsYmFjaykge1xuXHRsZXQgYm9keSA9IEVNUFRZX1NUUklORztcblxuXHRyZXNwb25zZS5vbihEQVRBLCAoZGF0YSkgPT4ge1xuXHRcdGJvZHkgKz0gZGF0YTtcblx0fSk7XG5cblx0cmVzcG9uc2Uub24oRU5ELCAoKSA9PiB7XG5cdFx0Y2FsbGJhY2soYm9keSk7XG5cdH0pO1xufVxuIl0sIm5hbWVzIjpbInBvc3QiLCJtYWtlUmVxdWVzdCIsInJlcXVlc3QiLCJob3N0IiwidXJpIiwicXVlcnkiLCJqc29uIiwiY2FsbGJhY2siLCJjb250ZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ldGhvZCIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsImNvbnRlbnRMZW5ndGgiLCJsZW5ndGgiLCJyZXNwb25zZSIsImVycm9yIiwic3RhdHVzQ29kZSIsImJvZHlGcm9tUmVzcG9uc2UiLCJib2R5IiwicGFyc2UiLCJyZWFkYWJsZSIsImZyb20iLCJwaXBlIiwib24iLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7O1FBYUlBLElBQUksR0FBSkEsSUFBSTs7QUFYSyxHQUFRLENBQVIsT0FBUTtBQUVBLEdBQVcsQ0FBWCxVQUFXO0FBSWhCLEdBQVksQ0FBWixRQUFZO0FBQ0gsR0FBZ0IsQ0FBaEIsWUFBZ0I7QUFDTSxHQUFpQixDQUFqQixhQUFpQjtBQUNOLEdBQWMsQ0FBZCxVQUFjO0FBTHBGLEdBQUssQ0FBWUMsV0FBVyxHQUZLLFVBQVcsa0JBRXBDQyxPQUFPO1NBT0NGLElBQUksQ0FBQ0csSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsS0FBSSxFQUFFQyxRQUFRLEVBQUUsQ0FBQztJQUN2RCxHQUFLLENBQUNDLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxTQUFTLENBQUNKLEtBQUksR0FDaENLLE1BQU0sR0FQa0IsUUFBWSxjQVFwQ0MsT0FBTyxHQUFHLENBQUM7SUFBQSxDQUFDLEVBQ1pDLFdBQVcsR0FQNEMsYUFBaUIsNkNBUXhFQyxhQUFhLEdBQUdOLE9BQU8sQ0FBQ08sTUFBTTtJQUVqQ0gsT0FBTyxDQVQ4RCxVQUFjLGlCQVMzREMsV0FBVztJQUVuQ0QsT0FBTyxDQVg4RCxVQUFjLG1CQVd6REUsYUFBYTtJQUV2QyxHQUFLLENBQUNaLE9BQU8sR0FBR0QsV0FBVyxDQUFDRSxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFTSxNQUFNLEVBQUVDLE9BQU8sRUFBRSxRQUFRSSxDQUFQQyxLQUFLLEVBQUVELFFBQVEsRUFBSyxDQUFDO1FBQ2pGLEdBQUssQ0FBR0UsVUFBVSxHQUFLRixRQUFRLENBQXZCRSxVQUFVO1FBRWxCRCxLQUFLLEdBQUdBLEtBQUssSUFBS0MsVUFBVSxLQWxCSSxZQUFnQjtRQW9CaEQsRUFBRSxFQUFFRCxLQUFLLEVBQUUsQ0FBQztZQUNYLEdBQUssQ0FBQ1gsSUFBSSxHQUFHLElBQUk7WUFFakJDLFFBQVEsQ0FBQ0QsSUFBSTtZQUViLE1BQU07UUFDUCxDQUFDO1FBRURhLGdCQUFnQixDQUFDSCxRQUFRLEVBQUUsUUFBUSxDQUFQSSxJQUFJLEVBQUssQ0FBQztZQUNyQyxHQUFHLENBQUNkLElBQUksR0FBRyxJQUFJO1lBRWYsR0FBRyxDQUFDLENBQUM7Z0JBQ0pBLElBQUksR0FBR0csSUFBSSxDQUFDWSxLQUFLLENBQUNELElBQUk7WUFDdkIsQ0FBQyxDQUFDLEtBQUssRUFBRUgsS0FBSyxFQUFFLENBQUM7WUFBQSxDQUFDLEFBQUMsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1lBRXRCVixRQUFRLENBQUNELElBQUk7UUFDZCxDQUFDO0lBQ0YsQ0FBQyxHQUNEZ0IsUUFBUSxHQTdDYSxPQUFRLFVBNkNUQyxJQUFJLENBQUNmLE9BQU87SUFFbkNjLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDdEIsT0FBTztBQUN0QixDQUFDO2VBRWMsQ0FBQztJQUNmRixJQUFJLEVBQUpBLElBQUk7QUFDTCxDQUFDOztTQUVRbUIsZ0JBQWdCLENBQUNILFFBQVEsRUFBRVQsUUFBUSxFQUFFLENBQUM7SUFDOUMsR0FBRyxDQUFDYSxJQUFJLEdBOUM2RCxVQUFjO0lBZ0RuRkosUUFBUSxDQUFDUyxFQUFFLENBaEQwRCxVQUFjLE9BZ0RqRSxRQUFRLENBQVBDLElBQUksRUFBSyxDQUFDO1FBQzVCTixJQUFJLElBQUlNLElBQUk7SUFDYixDQUFDO0lBRURWLFFBQVEsQ0FBQ1MsRUFBRSxDQXBEMEQsVUFBYyxNQW9EbEUsUUFDbEIsR0FEd0IsQ0FBQztRQUN2QmxCLFFBQVEsQ0FBQ2EsSUFBSTtJQUNkLENBQUM7QUFDRixDQUFDIn0=