"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.post = post;
exports.default = void 0;
var _stream = require("stream");
var _necessary = require("necessary");
var _methods = require("../methods");
var _statusCodes = require("../statusCodes");
var _constants = require("../constants");
var _contentTypes = require("../contentTypes");
var makeRequest = _necessary.requestUtilities.request;
function post(host, uri, query, json1, callback) {
    var content1 = JSON.stringify(json1), method = _methods.POST_METHOD, headers = {
    }, contentType = _contentTypes.APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE;
    headers[_constants.CONTENT_TYPE] = contentType;
    var request = makeRequest(host, uri, query, method, headers, function(error, response) {
        var statusCode = response.statusCode;
        error = error || statusCode !== _statusCodes.OKAY_200_STATUS_CODE;
        if (error) {
            var json = null;
            callback(json);
            return;
        }
        contentFromResponse(response, function(content) {
            var json = null;
            try {
                json = JSON.parse(content);
            } catch (error) {
            } ///
            callback(json);
        });
    }), readable = _stream.Readable.from(content1);
    readable.pipe(request);
}
var _default = {
    post: post
};
exports.default = _default;
function contentFromResponse(response, callback) {
    var content = _constants.EMPTY_STRING;
    response.on(_constants.DATA, function(data) {
        content += data;
    });
    response.on(_constants.END, function() {
        callback(content);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaHR0cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmltcG9ydCB7IHJlcXVlc3RVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgcmVxdWVzdDogbWFrZVJlcXVlc3QgfSA9IHJlcXVlc3RVdGlsaXRpZXM7XG5cbmltcG9ydCB7IFBPU1RfTUVUSE9EIH0gZnJvbSBcIi4uL21ldGhvZHNcIjtcbmltcG9ydCB7IE9LQVlfMjAwX1NUQVRVU19DT0RFIH0gZnJvbSBcIi4uL3N0YXR1c0NvZGVzXCI7XG5pbXBvcnQgeyBFTkQsIERBVEEsIEVNUFRZX1NUUklORywgQ09OVEVOVF9UWVBFIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQVBQTElDQVRJT05fSlNPTl9DSEFSU0VUX1VURjhfQ09OVEVOVF9UWVBFIH0gZnJvbSBcIi4uL2NvbnRlbnRUeXBlc1wiXG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0KGhvc3QsIHVyaSwgcXVlcnksIGpzb24sIGNhbGxiYWNrKSB7XG5cdGNvbnN0IGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShqc29uKSxcdC8vL1xuXHRcdFx0XHRtZXRob2QgPSBQT1NUX01FVEhPRCxcblx0XHRcdFx0aGVhZGVycyA9IHt9LFxuXHRcdFx0XHRjb250ZW50VHlwZSA9IEFQUExJQ0FUSU9OX0pTT05fQ0hBUlNFVF9VVEY4X0NPTlRFTlRfVFlQRTtcblxuXHRoZWFkZXJzW0NPTlRFTlRfVFlQRV0gPSBjb250ZW50VHlwZTtcblxuXHRjb25zdCByZXF1ZXN0ID0gbWFrZVJlcXVlc3QoaG9zdCwgdXJpLCBxdWVyeSwgbWV0aG9kLCBoZWFkZXJzLCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgeyBzdGF0dXNDb2RlIH0gPSByZXNwb25zZTtcblxuXHRcdFx0XHRcdGVycm9yID0gZXJyb3IgfHwgKHN0YXR1c0NvZGUgIT09IE9LQVlfMjAwX1NUQVRVU19DT0RFKTtcblxuXHRcdFx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRcdFx0Y29uc3QganNvbiA9IG51bGw7XG5cblx0XHRcdFx0XHRcdGNhbGxiYWNrKGpzb24pO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29udGVudEZyb21SZXNwb25zZShyZXNwb25zZSwgKGNvbnRlbnQpID0+IHtcblx0XHRcdFx0XHRcdGxldCBqc29uID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0anNvbiA9IEpTT04ucGFyc2UoY29udGVudCk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnJvcikge31cdC8vL1xuXG5cdFx0XHRcdFx0XHRjYWxsYmFjayhqc29uKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdHJlYWRhYmxlID0gUmVhZGFibGUuZnJvbShjb250ZW50KTtcblxuXHRyZWFkYWJsZS5waXBlKHJlcXVlc3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG5cdHBvc3Rcbn07XG5cbmZ1bmN0aW9uIGNvbnRlbnRGcm9tUmVzcG9uc2UocmVzcG9uc2UsIGNhbGxiYWNrKSB7XG5cdGxldCBjb250ZW50ID0gRU1QVFlfU1RSSU5HO1xuXG5cdHJlc3BvbnNlLm9uKERBVEEsIChkYXRhKSA9PiB7XG5cdFx0Y29udGVudCArPSBkYXRhO1xuXHR9KTtcblxuXHRyZXNwb25zZS5vbihFTkQsICgpID0+IHtcblx0XHRjYWxsYmFjayhjb250ZW50KTtcblx0fSk7XG59XG4iXSwibmFtZXMiOlsicG9zdCIsIm1ha2VSZXF1ZXN0IiwicmVxdWVzdCIsImhvc3QiLCJ1cmkiLCJxdWVyeSIsImpzb24iLCJjYWxsYmFjayIsImNvbnRlbnQiLCJKU09OIiwic3RyaW5naWZ5IiwibWV0aG9kIiwiaGVhZGVycyIsImNvbnRlbnRUeXBlIiwicmVzcG9uc2UiLCJlcnJvciIsInN0YXR1c0NvZGUiLCJjb250ZW50RnJvbVJlc3BvbnNlIiwicGFyc2UiLCJyZWFkYWJsZSIsImZyb20iLCJwaXBlIiwib24iLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7O1FBYUlBLElBQUksR0FBSkEsSUFBSTs7QUFYSyxHQUFRLENBQVIsT0FBUTtBQUVBLEdBQVcsQ0FBWCxVQUFXO0FBSWhCLEdBQVksQ0FBWixRQUFZO0FBQ0gsR0FBZ0IsQ0FBaEIsWUFBZ0I7QUFDQyxHQUFjLENBQWQsVUFBYztBQUNULEdBQWlCLENBQWpCLGFBQWlCO0FBTDVFLEdBQUssQ0FBWUMsV0FBVyxHQUZLLFVBQVcsa0JBRXBDQyxPQUFPO1NBT0NGLElBQUksQ0FBQ0csSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsS0FBSSxFQUFFQyxRQUFRLEVBQUUsQ0FBQztJQUN2RCxHQUFLLENBQUNDLFFBQU8sR0FBR0MsSUFBSSxDQUFDQyxTQUFTLENBQUNKLEtBQUksR0FDaENLLE1BQU0sR0FQa0IsUUFBWSxjQVFwQ0MsT0FBTyxHQUFHLENBQUM7SUFBQSxDQUFDLEVBQ1pDLFdBQVcsR0FONEMsYUFBaUI7SUFRM0VELE9BQU8sQ0FUOEMsVUFBYyxpQkFTM0NDLFdBQVc7SUFFbkMsR0FBSyxDQUFDWCxPQUFPLEdBQUdELFdBQVcsQ0FBQ0UsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRU0sTUFBTSxFQUFFQyxPQUFPLEVBQUUsUUFBUUUsQ0FBUEMsS0FBSyxFQUFFRCxRQUFRLEVBQUssQ0FBQztRQUNqRixHQUFLLENBQUdFLFVBQVUsR0FBS0YsUUFBUSxDQUF2QkUsVUFBVTtRQUVsQkQsS0FBSyxHQUFHQSxLQUFLLElBQUtDLFVBQVUsS0FmSSxZQUFnQjtRQWlCaEQsRUFBRSxFQUFFRCxLQUFLLEVBQUUsQ0FBQztZQUNYLEdBQUssQ0FBQ1QsSUFBSSxHQUFHLElBQUk7WUFFakJDLFFBQVEsQ0FBQ0QsSUFBSTtZQUViLE1BQU07UUFDUCxDQUFDO1FBRURXLG1CQUFtQixDQUFDSCxRQUFRLEVBQUUsUUFBUSxDQUFQTixPQUFPLEVBQUssQ0FBQztZQUMzQyxHQUFHLENBQUNGLElBQUksR0FBRyxJQUFJO1lBRWYsR0FBRyxDQUFDLENBQUM7Z0JBQ0pBLElBQUksR0FBR0csSUFBSSxDQUFDUyxLQUFLLENBQUNWLE9BQU87WUFDMUIsQ0FBQyxDQUFDLEtBQUssRUFBRU8sS0FBSyxFQUFFLENBQUM7WUFBQSxDQUFDLEFBQUMsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1lBRXRCUixRQUFRLENBQUNELElBQUk7UUFDZCxDQUFDO0lBQ0YsQ0FBQyxHQUNEYSxRQUFRLEdBMUNhLE9BQVEsVUEwQ1RDLElBQUksQ0FBQ1osUUFBTztJQUVuQ1csUUFBUSxDQUFDRSxJQUFJLENBQUNuQixPQUFPO0FBQ3RCLENBQUM7ZUFFYyxDQUFDO0lBQ2ZGLElBQUksRUFBSkEsSUFBSTtBQUNMLENBQUM7O1NBRVFpQixtQkFBbUIsQ0FBQ0gsUUFBUSxFQUFFUCxRQUFRLEVBQUUsQ0FBQztJQUNqRCxHQUFHLENBQUNDLE9BQU8sR0E1QzBDLFVBQWM7SUE4Q25FTSxRQUFRLENBQUNRLEVBQUUsQ0E5QzBDLFVBQWMsT0E4Q2pELFFBQVEsQ0FBUEMsSUFBSSxFQUFLLENBQUM7UUFDNUJmLE9BQU8sSUFBSWUsSUFBSTtJQUNoQixDQUFDO0lBRURULFFBQVEsQ0FBQ1EsRUFBRSxDQWxEMEMsVUFBYyxNQWtEbEQsUUFDbEIsR0FEd0IsQ0FBQztRQUN2QmYsUUFBUSxDQUFDQyxPQUFPO0lBQ2pCLENBQUM7QUFDRixDQUFDIn0=