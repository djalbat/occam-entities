"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.post = post;
exports.default = void 0;
var _stream = require("stream");
var _necessary = require("necessary");
var _methods = require("../methods");
var _statusCodes = require("../statusCodes");
var _constants = require("../constants");
var _contentTypes = require("../contentTypes");
var createRequest = _necessary.requestUtilities.createRequest;
function post(host, uri, query, json1, callback) {
    var content1 = JSON.stringify(json1), method = _methods.POST_METHOD, headers = {}, contentType = _contentTypes.APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE;
    headers[_constants.CONTENT_TYPE] = contentType;
    var request = createRequest(host, uri, query, method, headers, function(error, response) {
        if (response === null) {
            error = true;
        } else {
            var statusCode = response.statusCode;
            if (statusCode !== _statusCodes.OKAY_200_STATUS_CODE) {
                error = true;
            }
        }
        if (error) {
            var json = null;
            callback(json);
            return;
        }
        contentFromResponse(response, function(content) {
            var json = null;
            try {
                json = JSON.parse(content);
            } catch (error) {} ///
            callback(json);
        });
    }), readable = _stream.Readable.from(content1);
    readable.pipe(request);
}
var _default = {
    post: post
};
exports.default = _default;
function contentFromResponse(response, callback) {
    var content = _constants.EMPTY_STRING;
    response.on(_constants.DATA, function(data) {
        content += data;
    });
    response.on(_constants.END, function() {
        callback(content);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaHR0cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmltcG9ydCB7IHJlcXVlc3RVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgY3JlYXRlUmVxdWVzdCB9ID0gcmVxdWVzdFV0aWxpdGllcztcblxuaW1wb3J0IHsgUE9TVF9NRVRIT0QgfSBmcm9tIFwiLi4vbWV0aG9kc1wiO1xuaW1wb3J0IHsgT0tBWV8yMDBfU1RBVFVTX0NPREUgfSBmcm9tIFwiLi4vc3RhdHVzQ29kZXNcIjtcbmltcG9ydCB7IEVORCwgREFUQSwgRU1QVFlfU1RSSU5HLCBDT05URU5UX1RZUEUgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOF9DT05URU5UX1RZUEUgfSBmcm9tIFwiLi4vY29udGVudFR5cGVzXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3QoaG9zdCwgdXJpLCBxdWVyeSwganNvbiwgY2FsbGJhY2spIHtcblx0Y29uc3QgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KGpzb24pLFx0Ly8vXG5cdFx0XHRcdG1ldGhvZCA9IFBPU1RfTUVUSE9ELFxuXHRcdFx0XHRoZWFkZXJzID0ge30sXG5cdFx0XHRcdGNvbnRlbnRUeXBlID0gQVBQTElDQVRJT05fSlNPTl9DSEFSU0VUX1VURjhfQ09OVEVOVF9UWVBFO1xuXG5cdGhlYWRlcnNbQ09OVEVOVF9UWVBFXSA9IGNvbnRlbnRUeXBlO1xuXG5cdGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIG1ldGhvZCwgaGVhZGVycywgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuXHRcdFx0XHRcdGlmIChyZXNwb25zZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0ZXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zdCB7IHN0YXR1c0NvZGUgfSA9IHJlc3BvbnNlO1xuXG5cdFx0XHRcdFx0XHRpZiAoc3RhdHVzQ29kZSAhPT0gT0tBWV8yMDBfU1RBVFVTX0NPREUpIHtcblx0XHRcdFx0XHRcdFx0ZXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChlcnJvcikge1xuXHRcdFx0XHRcdFx0Y29uc3QganNvbiA9IG51bGw7XG5cblx0XHRcdFx0XHRcdGNhbGxiYWNrKGpzb24pO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29udGVudEZyb21SZXNwb25zZShyZXNwb25zZSwgKGNvbnRlbnQpID0+IHtcblx0XHRcdFx0XHRcdGxldCBqc29uID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0anNvbiA9IEpTT04ucGFyc2UoY29udGVudCk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnJvcikge31cdC8vL1xuXG5cdFx0XHRcdFx0XHRjYWxsYmFjayhqc29uKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdHJlYWRhYmxlID0gUmVhZGFibGUuZnJvbShjb250ZW50KTtcblxuXHRyZWFkYWJsZS5waXBlKHJlcXVlc3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG5cdHBvc3Rcbn07XG5cbmZ1bmN0aW9uIGNvbnRlbnRGcm9tUmVzcG9uc2UocmVzcG9uc2UsIGNhbGxiYWNrKSB7XG5cdGxldCBjb250ZW50ID0gRU1QVFlfU1RSSU5HO1xuXG5cdHJlc3BvbnNlLm9uKERBVEEsIChkYXRhKSA9PiB7XG5cdFx0Y29udGVudCArPSBkYXRhO1xuXHR9KTtcblxuXHRyZXNwb25zZS5vbihFTkQsICgpID0+IHtcblx0XHRjYWxsYmFjayhjb250ZW50KTtcblx0fSk7XG59XG4iXSwibmFtZXMiOlsicG9zdCIsImNyZWF0ZVJlcXVlc3QiLCJob3N0IiwidXJpIiwicXVlcnkiLCJqc29uIiwiY2FsbGJhY2siLCJjb250ZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ldGhvZCIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsImVycm9yIiwic3RhdHVzQ29kZSIsImNvbnRlbnRGcm9tUmVzcG9uc2UiLCJwYXJzZSIsInJlYWRhYmxlIiwiZnJvbSIsInBpcGUiLCJvbiIsImRhdGEiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7UUFhSUEsSUFBSSxHQUFKQSxJQUFJOztBQVhLLEdBQVEsQ0FBUixPQUFRO0FBRUEsR0FBVyxDQUFYLFVBQVc7QUFJaEIsR0FBWSxDQUFaLFFBQVk7QUFDSCxHQUFnQixDQUFoQixZQUFnQjtBQUNDLEdBQWMsQ0FBZCxVQUFjO0FBQ1QsR0FBaUIsQ0FBakIsYUFBaUI7QUFMNUUsR0FBSyxDQUFHQyxhQUFhLEdBRlksVUFBVyxrQkFFcENBLGFBQWE7U0FPTEQsSUFBSSxDQUFDRSxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxLQUFJLEVBQUVDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZELEdBQUssQ0FBQ0MsUUFBTyxHQUFHQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0osS0FBSSxHQUNoQ0ssTUFBTSxHQVBrQixRQUFZLGNBUXBDQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQ1pDLFdBQVcsR0FONEMsYUFBaUI7SUFRM0VELE9BQU8sQ0FUOEMsVUFBYyxpQkFTM0NDLFdBQVc7SUFFbkMsR0FBSyxDQUFDQyxPQUFPLEdBQUdaLGFBQWEsQ0FBQ0MsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRU0sTUFBTSxFQUFFQyxPQUFPLEVBQUUsUUFBUUcsQ0FBUEMsS0FBSyxFQUFFRCxRQUFRLEVBQUssQ0FBQztRQUNuRixFQUFFLEVBQUVBLFFBQVEsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUN2QkMsS0FBSyxHQUFHLElBQUk7UUFDYixDQUFDLE1BQU0sQ0FBQztZQUNQLEdBQUssQ0FBR0MsVUFBVSxHQUFLRixRQUFRLENBQXZCRSxVQUFVO1lBRWxCLEVBQUUsRUFBRUEsVUFBVSxLQWxCaUIsWUFBZ0IsdUJBa0JOLENBQUM7Z0JBQ3pDRCxLQUFLLEdBQUcsSUFBSTtZQUNiLENBQUM7UUFDRixDQUFDO1FBRUQsRUFBRSxFQUFFQSxLQUFLLEVBQUUsQ0FBQztZQUNYLEdBQUssQ0FBQ1YsSUFBSSxHQUFHLElBQUk7WUFFakJDLFFBQVEsQ0FBQ0QsSUFBSTtZQUViLE1BQU07UUFDUCxDQUFDO1FBRURZLG1CQUFtQixDQUFDSCxRQUFRLEVBQUUsUUFBUSxDQUFQUCxPQUFPLEVBQUssQ0FBQztZQUMzQyxHQUFHLENBQUNGLElBQUksR0FBRyxJQUFJO1lBRWYsR0FBRyxDQUFDLENBQUM7Z0JBQ0pBLElBQUksR0FBR0csSUFBSSxDQUFDVSxLQUFLLENBQUNYLE9BQU87WUFDMUIsQ0FBQyxDQUFDLEtBQUssRUFBRVEsS0FBSyxFQUFFLENBQUMsQ0FBQyxBQUFDLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztZQUV0QlQsUUFBUSxDQUFDRCxJQUFJO1FBQ2QsQ0FBQztJQUNGLENBQUMsR0FDRGMsUUFBUSxHQWhEYSxPQUFRLFVBZ0RUQyxJQUFJLENBQUNiLFFBQU87SUFFbkNZLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDUixPQUFPO0FBQ3RCLENBQUM7ZUFFYyxDQUFDO0lBQ2ZiLElBQUksRUFBSkEsSUFBSTtBQUNMLENBQUM7O1NBRVFpQixtQkFBbUIsQ0FBQ0gsUUFBUSxFQUFFUixRQUFRLEVBQUUsQ0FBQztJQUNqRCxHQUFHLENBQUNDLE9BQU8sR0FsRDBDLFVBQWM7SUFvRG5FTyxRQUFRLENBQUNRLEVBQUUsQ0FwRDBDLFVBQWMsT0FvRGpELFFBQVEsQ0FBUEMsSUFBSSxFQUFLLENBQUM7UUFDNUJoQixPQUFPLElBQUlnQixJQUFJO0lBQ2hCLENBQUM7SUFFRFQsUUFBUSxDQUFDUSxFQUFFLENBeEQwQyxVQUFjLE1Bd0RsRCxRQUNsQixHQUR3QixDQUFDO1FBQ3ZCaEIsUUFBUSxDQUFDQyxPQUFPO0lBQ2pCLENBQUM7QUFDRixDQUFDIn0=