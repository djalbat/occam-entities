"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.post = post;
exports.default = void 0;
var _stream = require("stream");
var _necessary = require("necessary");
var _methods = require("../methods");
var _statusCodes = require("../statusCodes");
var _constants = require("../constants");
var _contentTypes = require("../contentTypes");
var createRequest = _necessary.requestUtilities.createRequest;
function post(host, uri, query, json, callback) {
    var content = JSON.stringify(json), method = _methods.POST_METHOD, headers = {
    }, contentType = _contentTypes.APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE;
    headers[_constants.CONTENT_TYPE] = contentType;
    var request = createRequest(host, uri, query, method, headers, function(error, response) {
        if (response === null) {
            error = true;
        } else {
            var statusCode = response.statusCode;
            if (statusCode !== _statusCodes.OKAY_200_STATUS_CODE) {
                error = true;
            }
        }
        if (error) {
            var json = null;
            callback(json);
            return;
        }
        contentFromResponse(response, function(content) {
            var json = null;
            try {
                json = JSON.parse(content);
            } catch (error) {
            } ///
            callback(json);
        });
    }), readable = _stream.Readable.from(content);
    readable.pipe(request);
}
var _default = {
    post: post
};
exports.default = _default;
function contentFromResponse(response, callback) {
    var content = _constants.EMPTY_STRING;
    response.on(_constants.DATA, function(data) {
        content += data;
    });
    response.on(_constants.END, function() {
        callback(content);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaHR0cC5qcyJdLCJuYW1lcyI6WyJSZWFkYWJsZSIsInJlcXVlc3RVdGlsaXRpZXMiLCJjcmVhdGVSZXF1ZXN0IiwiUE9TVF9NRVRIT0QiLCJPS0FZXzIwMF9TVEFUVVNfQ09ERSIsIkVORCIsIkRBVEEiLCJFTVBUWV9TVFJJTkciLCJDT05URU5UX1RZUEUiLCJBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOF9DT05URU5UX1RZUEUiLCJwb3N0IiwiaG9zdCIsInVyaSIsInF1ZXJ5IiwianNvbiIsImNhbGxiYWNrIiwiY29udGVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRob2QiLCJoZWFkZXJzIiwiY29udGVudFR5cGUiLCJyZXF1ZXN0IiwiZXJyb3IiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJjb250ZW50RnJvbVJlc3BvbnNlIiwicGFyc2UiLCJyZWFkYWJsZSIsImZyb20iLCJwaXBlIiwib24iLCJkYXRhIl0sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZOzs7O1FBYUksSUFBSSxHQUFKLElBQUk7O0FBWEssR0FBUSxDQUFSLE9BQVE7QUFFQSxHQUFXLENBQVgsVUFBVztBQUloQixHQUFZLENBQVosUUFBWTtBQUNILEdBQWdCLENBQWhCLFlBQWdCO0FBQ0MsR0FBYyxDQUFkLFVBQWM7QUFDVCxHQUFpQixDQUFqQixhQUFpQjtBQUw1RSxHQUFLLENBQUcsYUFBYSxHQUZZLFVBQVcsa0JBRXBDLGFBQWE7U0FPTCxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQ3ZELEdBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQ2hDLE1BQU0sR0FQa0IsUUFBWSxjQVFwQyxPQUFPLEdBQUcsQ0FBQztJQUFBLENBQUMsRUFDWixXQUFXLEdBTjRDLGFBQWlCO0lBUTNFLE9BQU8sQ0FUOEMsVUFBYyxpQkFTM0MsV0FBVztJQUVuQyxHQUFLLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBUCxLQUFLLEVBQUUsUUFBUSxFQUFLLENBQUM7UUFDbkYsRUFBRSxFQUFFLFFBQVEsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUN2QixLQUFLLEdBQUcsSUFBSTtRQUNiLENBQUMsTUFBTSxDQUFDO1lBQ1AsR0FBSyxDQUFHLFVBQVUsR0FBSyxRQUFRLENBQXZCLFVBQVU7WUFFbEIsRUFBRSxFQUFFLFVBQVUsS0FsQmlCLFlBQWdCLHVCQWtCTixDQUFDO2dCQUN6QyxLQUFLLEdBQUcsSUFBSTtZQUNiLENBQUM7UUFDRixDQUFDO1FBRUQsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQ1gsR0FBSyxDQUFDLElBQUksR0FBRyxJQUFJO1lBRWpCLFFBQVEsQ0FBQyxJQUFJO1lBRWIsTUFBTTtRQUNQLENBQUM7UUFFRCxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFQLE9BQU8sRUFBSyxDQUFDO1lBQzNDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSTtZQUVmLEdBQUcsQ0FBQyxDQUFDO2dCQUNKLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87WUFDMUIsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztZQUFBLENBQUMsQUFBQyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7WUFFdEIsUUFBUSxDQUFDLElBQUk7UUFDZCxDQUFDO0lBQ0YsQ0FBQyxHQUNELFFBQVEsR0FoRGEsT0FBUSxVQWdEVCxJQUFJLENBQUMsT0FBTztJQUVuQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU87QUFDdEIsQ0FBQztlQUVjLENBQUM7SUFDZixJQUFJLEVBQUosSUFBSTtBQUNMLENBQUM7O1NBRVEsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQ2pELEdBQUcsQ0FBQyxPQUFPLEdBbEQwQyxVQUFjO0lBb0RuRSxRQUFRLENBQUMsRUFBRSxDQXBEMEMsVUFBYyxPQW9EakQsUUFBUSxDQUFQLElBQUksRUFBSyxDQUFDO1FBQzVCLE9BQU8sSUFBSSxJQUFJO0lBQ2hCLENBQUM7SUFFRCxRQUFRLENBQUMsRUFBRSxDQXhEMEMsVUFBYyxNQXdEbEQsUUFDbEIsR0FEd0IsQ0FBQztRQUN2QixRQUFRLENBQUMsT0FBTztJQUNqQixDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gXCJzdHJlYW1cIjtcblxuaW1wb3J0IHsgcmVxdWVzdFV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBjcmVhdGVSZXF1ZXN0IH0gPSByZXF1ZXN0VXRpbGl0aWVzO1xuXG5pbXBvcnQgeyBQT1NUX01FVEhPRCB9IGZyb20gXCIuLi9tZXRob2RzXCI7XG5pbXBvcnQgeyBPS0FZXzIwMF9TVEFUVVNfQ09ERSB9IGZyb20gXCIuLi9zdGF0dXNDb2Rlc1wiO1xuaW1wb3J0IHsgRU5ELCBEQVRBLCBFTVBUWV9TVFJJTkcsIENPTlRFTlRfVFlQRSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEFQUExJQ0FUSU9OX0pTT05fQ0hBUlNFVF9VVEY4X0NPTlRFTlRfVFlQRSB9IGZyb20gXCIuLi9jb250ZW50VHlwZXNcIlxuXG5leHBvcnQgZnVuY3Rpb24gcG9zdChob3N0LCB1cmksIHF1ZXJ5LCBqc29uLCBjYWxsYmFjaykge1xuXHRjb25zdCBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoanNvbiksXHQvLy9cblx0XHRcdFx0bWV0aG9kID0gUE9TVF9NRVRIT0QsXG5cdFx0XHRcdGhlYWRlcnMgPSB7fSxcblx0XHRcdFx0Y29udGVudFR5cGUgPSBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOF9DT05URU5UX1RZUEU7XG5cblx0aGVhZGVyc1tDT05URU5UX1RZUEVdID0gY29udGVudFR5cGU7XG5cblx0Y29uc3QgcmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QoaG9zdCwgdXJpLCBxdWVyeSwgbWV0aG9kLCBoZWFkZXJzLCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG5cdFx0XHRcdFx0aWYgKHJlc3BvbnNlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRlcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnN0IHsgc3RhdHVzQ29kZSB9ID0gcmVzcG9uc2U7XG5cblx0XHRcdFx0XHRcdGlmIChzdGF0dXNDb2RlICE9PSBPS0FZXzIwMF9TVEFUVVNfQ09ERSkge1xuXHRcdFx0XHRcdFx0XHRlcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBqc29uID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0Y2FsbGJhY2soanNvbik7XG5cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250ZW50RnJvbVJlc3BvbnNlKHJlc3BvbnNlLCAoY29udGVudCkgPT4ge1xuXHRcdFx0XHRcdFx0bGV0IGpzb24gPSBudWxsO1xuXG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZShjb250ZW50KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7fVx0Ly8vXG5cblx0XHRcdFx0XHRcdGNhbGxiYWNrKGpzb24pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0cmVhZGFibGUgPSBSZWFkYWJsZS5mcm9tKGNvbnRlbnQpO1xuXG5cdHJlYWRhYmxlLnBpcGUocmVxdWVzdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0cG9zdFxufTtcblxuZnVuY3Rpb24gY29udGVudEZyb21SZXNwb25zZShyZXNwb25zZSwgY2FsbGJhY2spIHtcblx0bGV0IGNvbnRlbnQgPSBFTVBUWV9TVFJJTkc7XG5cblx0cmVzcG9uc2Uub24oREFUQSwgKGRhdGEpID0+IHtcblx0XHRjb250ZW50ICs9IGRhdGE7XG5cdH0pO1xuXG5cdHJlc3BvbnNlLm9uKEVORCwgKCkgPT4ge1xuXHRcdGNhbGxiYWNrKGNvbnRlbnQpO1xuXHR9KTtcbn1cbiJdfQ==