"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.post = post;
exports.default = void 0;
var _stream = require("stream");
var _necessary = require("necessary");
var _methods = require("../methods");
var _statusCodes = require("../statusCodes");
var _contentTypes = require("../contentTypes");
var _constants = require("../constants");
var makeRequest = _necessary.requestUtilities.request;
function post(host, uri, parameters, json, callback) {
    var content = JSON.stringify(json), method = _methods.POST_METHOD, headers = {
    }, contentType = _contentTypes.APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE, contentLength = content.length;
    headers[_constants.CONTENT_TYPE] = contentType;
    headers[_constants.CONTENT_LENGTH] = contentLength;
    var request = makeRequest(host, uri, parameters, method, headers, function(error, response) {
        var statusCode = response.statusCode;
        error = error || statusCode !== _statusCodes.OKAY_200_STATUS_CODE;
        if (error) {
            var json = null;
            callback(json);
            return;
        }
        bodyFromResponse(response, function(body) {
            var json = null;
            try {
                json = JSON.parse(body);
            } catch (error) {
            } ///
            callback(json);
        });
    }), readable = _stream.Readable.from(content);
    readable.pipe(request);
}
var _default = {
    post: post
};
exports.default = _default;
function bodyFromResponse(response, callback) {
    var body = _constants.EMPTY_STRING;
    response.on(_constants.DATA, function(data) {
        body += data;
    });
    response.on(_constants.END, function() {
        callback(body);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaHR0cC5qcyJdLCJuYW1lcyI6WyJSZWFkYWJsZSIsInJlcXVlc3RVdGlsaXRpZXMiLCJyZXF1ZXN0IiwibWFrZVJlcXVlc3QiLCJQT1NUX01FVEhPRCIsIk9LQVlfMjAwX1NUQVRVU19DT0RFIiwiQVBQTElDQVRJT05fSlNPTl9DSEFSU0VUX1VURjhfQ09OVEVOVF9UWVBFIiwiRU5EIiwiREFUQSIsIkVNUFRZX1NUUklORyIsIkNPTlRFTlRfVFlQRSIsIkNPTlRFTlRfTEVOR1RIIiwicG9zdCIsImhvc3QiLCJ1cmkiLCJwYXJhbWV0ZXJzIiwianNvbiIsImNhbGxiYWNrIiwiY29udGVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRob2QiLCJoZWFkZXJzIiwiY29udGVudFR5cGUiLCJjb250ZW50TGVuZ3RoIiwibGVuZ3RoIiwiZXJyb3IiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJib2R5RnJvbVJlc3BvbnNlIiwiYm9keSIsInBhcnNlIiwicmVhZGFibGUiLCJmcm9tIiwicGlwZSIsIm9uIiwiZGF0YSJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7OztRQWFJLElBQUksR0FBSixJQUFJOztBQVhLLEdBQVEsQ0FBUixPQUFRO0FBRUEsR0FBVyxDQUFYLFVBQVc7QUFJaEIsR0FBWSxDQUFaLFFBQVk7QUFDSCxHQUFnQixDQUFoQixZQUFnQjtBQUNNLEdBQWlCLENBQWpCLGFBQWlCO0FBQ04sR0FBYyxDQUFkLFVBQWM7QUFMcEYsR0FBSyxDQUFZLFdBQVcsR0FGSyxVQUFXLGtCQUVwQyxPQUFPO1NBT0MsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUM1RCxHQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUNoQyxNQUFNLEdBUGtCLFFBQVksY0FRcEMsT0FBTyxHQUFHLENBQUM7SUFBQSxDQUFDLEVBQ1osV0FBVyxHQVA0QyxhQUFpQiw2Q0FReEUsYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNO0lBRWpDLE9BQU8sQ0FUOEQsVUFBYyxpQkFTM0QsV0FBVztJQUVuQyxPQUFPLENBWDhELFVBQWMsbUJBV3pELGFBQWE7SUFFdkMsR0FBSyxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQVAsS0FBSyxFQUFFLFFBQVEsRUFBSyxDQUFDO1FBQ3RGLEdBQUssQ0FBRyxVQUFVLEdBQUssUUFBUSxDQUF2QixVQUFVO1FBRWxCLEtBQUssR0FBRyxLQUFLLElBQUssVUFBVSxLQWxCSSxZQUFnQjtRQW9CaEQsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQ1gsR0FBSyxDQUFDLElBQUksR0FBRyxJQUFJO1lBRWpCLFFBQVEsQ0FBQyxJQUFJO1lBRWIsTUFBTTtRQUNQLENBQUM7UUFFRCxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFQLElBQUksRUFBSyxDQUFDO1lBQ3JDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSTtZQUVmLEdBQUcsQ0FBQyxDQUFDO2dCQUNKLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7WUFDdkIsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztZQUFBLENBQUMsQUFBQyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7WUFFdEIsUUFBUSxDQUFDLElBQUk7UUFDZCxDQUFDO0lBQ0YsQ0FBQyxHQUNELFFBQVEsR0E3Q2EsT0FBUSxVQTZDVCxJQUFJLENBQUMsT0FBTztJQUVuQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU87QUFDdEIsQ0FBQztlQUVjLENBQUM7SUFDZixJQUFJLEVBQUosSUFBSTtBQUNMLENBQUM7O1NBRVEsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQzlDLEdBQUcsQ0FBQyxJQUFJLEdBOUM2RCxVQUFjO0lBZ0RuRixRQUFRLENBQUMsRUFBRSxDQWhEMEQsVUFBYyxPQWdEakUsUUFBUSxDQUFQLElBQUksRUFBSyxDQUFDO1FBQzVCLElBQUksSUFBSSxJQUFJO0lBQ2IsQ0FBQztJQUVELFFBQVEsQ0FBQyxFQUFFLENBcEQwRCxVQUFjLE1Bb0RsRSxRQUNsQixHQUR3QixDQUFDO1FBQ3ZCLFFBQVEsQ0FBQyxJQUFJO0lBQ2QsQ0FBQztBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmltcG9ydCB7IHJlcXVlc3RVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgcmVxdWVzdDogbWFrZVJlcXVlc3QgfSA9IHJlcXVlc3RVdGlsaXRpZXM7XG5cbmltcG9ydCB7IFBPU1RfTUVUSE9EIH0gZnJvbSBcIi4uL21ldGhvZHNcIjtcbmltcG9ydCB7IE9LQVlfMjAwX1NUQVRVU19DT0RFIH0gZnJvbSBcIi4uL3N0YXR1c0NvZGVzXCI7XG5pbXBvcnQgeyBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOF9DT05URU5UX1RZUEUgfSBmcm9tIFwiLi4vY29udGVudFR5cGVzXCJcbmltcG9ydCB7IEVORCwgREFUQSwgRU1QVFlfU1RSSU5HLCBDT05URU5UX1RZUEUsIENPTlRFTlRfTEVOR1RIIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcG9zdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIGpzb24sIGNhbGxiYWNrKSB7XG5cdGNvbnN0IGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShqc29uKSxcdC8vL1xuXHRcdFx0XHRtZXRob2QgPSBQT1NUX01FVEhPRCxcblx0XHRcdFx0aGVhZGVycyA9IHt9LFxuXHRcdFx0XHRjb250ZW50VHlwZSA9IEFQUExJQ0FUSU9OX0pTT05fQ0hBUlNFVF9VVEY4X0NPTlRFTlRfVFlQRSxcblx0XHRcdFx0Y29udGVudExlbmd0aCA9IGNvbnRlbnQubGVuZ3RoO1xuXG5cdGhlYWRlcnNbQ09OVEVOVF9UWVBFXSA9IGNvbnRlbnRUeXBlO1xuXG5cdGhlYWRlcnNbQ09OVEVOVF9MRU5HVEhdID0gY29udGVudExlbmd0aDtcblxuXHRjb25zdCByZXF1ZXN0ID0gbWFrZVJlcXVlc3QoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGhlYWRlcnMsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcblx0XHRcdFx0XHRjb25zdCB7IHN0YXR1c0NvZGUgfSA9IHJlc3BvbnNlO1xuXG5cdFx0XHRcdFx0ZXJyb3IgPSBlcnJvciB8fCAoc3RhdHVzQ29kZSAhPT0gT0tBWV8yMDBfU1RBVFVTX0NPREUpO1xuXG5cdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBqc29uID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0Y2FsbGJhY2soanNvbik7XG5cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRib2R5RnJvbVJlc3BvbnNlKHJlc3BvbnNlLCAoYm9keSkgPT4ge1xuXHRcdFx0XHRcdFx0bGV0IGpzb24gPSBudWxsO1xuXG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZShib2R5KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7fVx0Ly8vXG5cblx0XHRcdFx0XHRcdGNhbGxiYWNrKGpzb24pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0cmVhZGFibGUgPSBSZWFkYWJsZS5mcm9tKGNvbnRlbnQpO1xuXG5cdHJlYWRhYmxlLnBpcGUocmVxdWVzdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0cG9zdFxufTtcblxuZnVuY3Rpb24gYm9keUZyb21SZXNwb25zZShyZXNwb25zZSwgY2FsbGJhY2spIHtcblx0bGV0IGJvZHkgPSBFTVBUWV9TVFJJTkc7XG5cblx0cmVzcG9uc2Uub24oREFUQSwgKGRhdGEpID0+IHtcblx0XHRib2R5ICs9IGRhdGE7XG5cdH0pO1xuXG5cdHJlc3BvbnNlLm9uKEVORCwgKCkgPT4ge1xuXHRcdGNhbGxiYWNrKGJvZHkpO1xuXHR9KTtcbn1cbiJdfQ==