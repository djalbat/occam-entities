"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    post: function() {
        return post;
    }
});
var _stream = require("stream");
var _necessary = require("necessary");
var _constants = require("../constants");
var POST_METHOD = _necessary.methods.POST_METHOD, createRequest = _necessary.requestUtilities.createRequest, OK_200_STATUS_CODE = _necessary.statusCodes.OK_200_STATUS_CODE, CONTENT_TYPE_HEADER = _necessary.headers.CONTENT_TYPE_HEADER, APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE = _necessary.contentTypes.APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE;
function post(host, uri, query, json, callback) {
    var content = JSON.stringify(json), method = POST_METHOD, _$headers = {}, contentType = APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE;
    _$headers[CONTENT_TYPE_HEADER] = contentType;
    var request = createRequest(host, uri, query, method, _$headers, function(error, response) {
        if (response === null) {
            error = true;
        } else {
            var statusCode = response.statusCode;
            if (statusCode !== OK_200_STATUS_CODE) {
                error = true;
            }
        }
        if (error) {
            var _$json = null;
            callback(_$json);
            return;
        }
        contentFromResponse(response, function(content) {
            var _$json = null;
            try {
                _$json = JSON.parse(content);
            } catch (error) {} ///
            callback(_$json);
        });
    }), readable = _stream.Readable.from(content);
    readable.pipe(request);
}
var _default = {
    post: post
};
function contentFromResponse(response, callback) {
    var content = _constants.EMPTY_STRING;
    response.on(_constants.DATA, function(data) {
        content += data;
    });
    response.on(_constants.END, function() {
        callback(content);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaHR0cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmltcG9ydCB7IG1ldGhvZHMsIGhlYWRlcnMsIGNvbnRlbnRUeXBlcywgc3RhdHVzQ29kZXMsIHJlcXVlc3RVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IEVORCwgREFUQSwgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCB7IFBPU1RfTUVUSE9EIH0gPSBtZXRob2RzLFxuICAgICAgeyBjcmVhdGVSZXF1ZXN0IH0gPSByZXF1ZXN0VXRpbGl0aWVzLFxuICAgICAgeyBPS18yMDBfU1RBVFVTX0NPREUgfSA9IHN0YXR1c0NvZGVzLFxuICAgICAgeyBDT05URU5UX1RZUEVfSEVBREVSIH0gPSBoZWFkZXJzLFxuICAgICAgeyBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOF9DT05URU5UX1RZUEUgfSA9IGNvbnRlbnRUeXBlcztcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3QoaG9zdCwgdXJpLCBxdWVyeSwganNvbiwgY2FsbGJhY2spIHtcblx0Y29uc3QgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KGpzb24pLFx0Ly8vXG5cdFx0XHRcdG1ldGhvZCA9IFBPU1RfTUVUSE9ELFxuXHRcdFx0XHRoZWFkZXJzID0ge30sXG5cdFx0XHRcdGNvbnRlbnRUeXBlID0gQVBQTElDQVRJT05fSlNPTl9DSEFSU0VUX1VURjhfQ09OVEVOVF9UWVBFO1xuXG5cdGhlYWRlcnNbQ09OVEVOVF9UWVBFX0hFQURFUl0gPSBjb250ZW50VHlwZTtcblxuXHRjb25zdCByZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdChob3N0LCB1cmksIHF1ZXJ5LCBtZXRob2QsIGhlYWRlcnMsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcblx0XHRcdFx0XHRpZiAocmVzcG9uc2UgPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdGVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc3QgeyBzdGF0dXNDb2RlIH0gPSByZXNwb25zZTtcblxuXHRcdFx0XHRcdFx0aWYgKHN0YXR1c0NvZGUgIT09IE9LXzIwMF9TVEFUVVNfQ09ERSkge1xuXHRcdFx0XHRcdFx0XHRlcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBqc29uID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0Y2FsbGJhY2soanNvbik7XG5cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250ZW50RnJvbVJlc3BvbnNlKHJlc3BvbnNlLCAoY29udGVudCkgPT4ge1xuXHRcdFx0XHRcdFx0bGV0IGpzb24gPSBudWxsO1xuXG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZShjb250ZW50KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7fVx0Ly8vXG5cblx0XHRcdFx0XHRcdGNhbGxiYWNrKGpzb24pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0cmVhZGFibGUgPSBSZWFkYWJsZS5mcm9tKGNvbnRlbnQpO1xuXG5cdHJlYWRhYmxlLnBpcGUocmVxdWVzdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0cG9zdFxufTtcblxuZnVuY3Rpb24gY29udGVudEZyb21SZXNwb25zZShyZXNwb25zZSwgY2FsbGJhY2spIHtcblx0bGV0IGNvbnRlbnQgPSBFTVBUWV9TVFJJTkc7XG5cblx0cmVzcG9uc2Uub24oREFUQSwgKGRhdGEpID0+IHtcblx0XHRjb250ZW50ICs9IGRhdGE7XG5cdH0pO1xuXG5cdHJlc3BvbnNlLm9uKEVORCwgKCkgPT4ge1xuXHRcdGNhbGxiYWNrKGNvbnRlbnQpO1xuXHR9KTtcbn1cbiJdLCJuYW1lcyI6WyJwb3N0IiwiUE9TVF9NRVRIT0QiLCJtZXRob2RzIiwiY3JlYXRlUmVxdWVzdCIsInJlcXVlc3RVdGlsaXRpZXMiLCJPS18yMDBfU1RBVFVTX0NPREUiLCJzdGF0dXNDb2RlcyIsIkNPTlRFTlRfVFlQRV9IRUFERVIiLCJoZWFkZXJzIiwiQVBQTElDQVRJT05fSlNPTl9DSEFSU0VUX1VURjhfQ09OVEVOVF9UWVBFIiwiY29udGVudFR5cGVzIiwiaG9zdCIsInVyaSIsInF1ZXJ5IiwianNvbiIsImNhbGxiYWNrIiwiY29udGVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRob2QiLCJjb250ZW50VHlwZSIsInJlcXVlc3QiLCJlcnJvciIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsImNvbnRlbnRGcm9tUmVzcG9uc2UiLCJwYXJzZSIsInJlYWRhYmxlIiwiUmVhZGFibGUiLCJmcm9tIiwicGlwZSIsIkVNUFRZX1NUUklORyIsIm9uIiwiREFUQSIsImRhdGEiLCJFTkQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7Ozs7SUFjR0EsSUFBSTtlQUFKQSxJQUFJOzs7c0JBWkssUUFBUTt5QkFFNkMsV0FBVzt5QkFFakQsY0FBYztBQUV0RCxJQUFNLEFBQUVDLFdBQVcsR0FBS0MsVUFBTyxRQUFBLENBQXZCRCxXQUFXLEFBQVksRUFDekIsQUFBRUUsYUFBYSxHQUFLQyxVQUFnQixpQkFBQSxDQUFsQ0QsYUFBYSxBQUFxQixFQUNwQyxBQUFFRSxrQkFBa0IsR0FBS0MsVUFBVyxZQUFBLENBQWxDRCxrQkFBa0IsQUFBZ0IsRUFDcEMsQUFBRUUsbUJBQW1CLEdBQUtDLFVBQU8sUUFBQSxDQUEvQkQsbUJBQW1CLEFBQVksRUFDakMsQUFBRUUsMENBQTBDLEdBQUtDLFVBQVksYUFBQSxDQUEzREQsMENBQTBDLEFBQWlCLEFBQUM7QUFFN0QsU0FBU1QsSUFBSSxDQUFDVyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRTtJQUN0RCxJQUFNQyxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsU0FBUyxDQUFDSixJQUFJLENBQUMsRUFDakNLLE1BQU0sR0FBR2xCLFdBQVcsRUFDcEJPLFNBQU8sR0FBRyxFQUFFLEVBQ1pZLFdBQVcsR0FBR1gsMENBQTBDLEFBQUM7SUFFNURELFNBQU8sQ0FBQ0QsbUJBQW1CLENBQUMsR0FBR2EsV0FBVyxDQUFDO0lBRTNDLElBQU1DLE9BQU8sR0FBR2xCLGFBQWEsQ0FBQ1EsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRU0sTUFBTSxFQUFFWCxTQUFPLEVBQUUsU0FBQ2MsS0FBSyxFQUFFQyxRQUFRLEVBQUs7UUFDbEYsSUFBSUEsUUFBUSxLQUFLLElBQUksRUFBRTtZQUN0QkQsS0FBSyxHQUFHLElBQUksQ0FBQztTQUNiLE1BQU07WUFDTixJQUFNLEFBQUVFLFVBQVUsR0FBS0QsUUFBUSxDQUF2QkMsVUFBVSxBQUFhLEFBQUM7WUFFaEMsSUFBSUEsVUFBVSxLQUFLbkIsa0JBQWtCLEVBQUU7Z0JBQ3RDaUIsS0FBSyxHQUFHLElBQUksQ0FBQzthQUNiO1NBQ0Q7UUFFRCxJQUFJQSxLQUFLLEVBQUU7WUFDVixJQUFNUixNQUFJLEdBQUcsSUFBSSxBQUFDO1lBRWxCQyxRQUFRLENBQUNELE1BQUksQ0FBQyxDQUFDO1lBRWYsT0FBTztTQUNQO1FBRURXLG1CQUFtQixDQUFDRixRQUFRLEVBQUUsU0FBQ1AsT0FBTyxFQUFLO1lBQzFDLElBQUlGLE1BQUksR0FBRyxJQUFJLEFBQUM7WUFFaEIsSUFBSTtnQkFDSEEsTUFBSSxHQUFHRyxJQUFJLENBQUNTLEtBQUssQ0FBQ1YsT0FBTyxDQUFDLENBQUM7YUFDM0IsQ0FBQyxPQUFPTSxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUc7WUFFdEJQLFFBQVEsQ0FBQ0QsTUFBSSxDQUFDLENBQUM7U0FDZixDQUFDLENBQUM7S0FDSCxDQUFDLEVBQ0ZhLFFBQVEsR0FBR0MsT0FBUSxTQUFBLENBQUNDLElBQUksQ0FBQ2IsT0FBTyxDQUFDLEFBQUM7SUFFckNXLFFBQVEsQ0FBQ0csSUFBSSxDQUFDVCxPQUFPLENBQUMsQ0FBQztDQUN2QjtlQUVjO0lBQ2RyQixJQUFJLEVBQUpBLElBQUk7Q0FDSjtBQUVELFNBQVN5QixtQkFBbUIsQ0FBQ0YsUUFBUSxFQUFFUixRQUFRLEVBQUU7SUFDaEQsSUFBSUMsT0FBTyxHQUFHZSxVQUFZLGFBQUEsQUFBQztJQUUzQlIsUUFBUSxDQUFDUyxFQUFFLENBQUNDLFVBQUksS0FBQSxFQUFFLFNBQUNDLElBQUksRUFBSztRQUMzQmxCLE9BQU8sSUFBSWtCLElBQUksQ0FBQztLQUNoQixDQUFDLENBQUM7SUFFSFgsUUFBUSxDQUFDUyxFQUFFLENBQUNHLFVBQUcsSUFBQSxFQUFFLFdBQU07UUFDdEJwQixRQUFRLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0tBQ2xCLENBQUMsQ0FBQztDQUNIIn0=