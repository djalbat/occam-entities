"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.post = post;
exports.default = void 0;
var _stream = require("stream");
var _necessary = require("necessary");
var _methods = require("../methods");
var _statusCodes = require("../statusCodes");
var _constants = require("../constants");
var _contentTypes = require("../contentTypes");
var makeRequest = _necessary.requestUtilities.request;
function post(host, uri, query, json1, callback) {
    var content1 = JSON.stringify(json1), method = _methods.POST_METHOD, headers = {
    }, contentType = _contentTypes.APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE;
    headers[_constants.CONTENT_TYPE] = contentType;
    var request = makeRequest(host, uri, query, method, headers, function(error, response) {
        if (response === null) {
            error = true;
        } else {
            var statusCode = response.statusCode;
            if (statusCode !== _statusCodes.OKAY_200_STATUS_CODE) {
                error = true;
            }
        }
        if (error) {
            var json = null;
            callback(json);
            return;
        }
        contentFromResponse(response, function(content) {
            var json = null;
            try {
                json = JSON.parse(content);
            } catch (error) {
            } ///
            callback(json);
        });
    }), readable = _stream.Readable.from(content1);
    readable.pipe(request);
}
var _default = {
    post: post
};
exports.default = _default;
function contentFromResponse(response, callback) {
    var content = _constants.EMPTY_STRING;
    response.on(_constants.DATA, function(data) {
        content += data;
    });
    response.on(_constants.END, function() {
        callback(content);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvaHR0cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmltcG9ydCB7IHJlcXVlc3RVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgcmVxdWVzdDogbWFrZVJlcXVlc3QgfSA9IHJlcXVlc3RVdGlsaXRpZXM7XG5cbmltcG9ydCB7IFBPU1RfTUVUSE9EIH0gZnJvbSBcIi4uL21ldGhvZHNcIjtcbmltcG9ydCB7IE9LQVlfMjAwX1NUQVRVU19DT0RFIH0gZnJvbSBcIi4uL3N0YXR1c0NvZGVzXCI7XG5pbXBvcnQgeyBFTkQsIERBVEEsIEVNUFRZX1NUUklORywgQ09OVEVOVF9UWVBFIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQVBQTElDQVRJT05fSlNPTl9DSEFSU0VUX1VURjhfQ09OVEVOVF9UWVBFIH0gZnJvbSBcIi4uL2NvbnRlbnRUeXBlc1wiXG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0KGhvc3QsIHVyaSwgcXVlcnksIGpzb24sIGNhbGxiYWNrKSB7XG5cdGNvbnN0IGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShqc29uKSxcdC8vL1xuXHRcdFx0XHRtZXRob2QgPSBQT1NUX01FVEhPRCxcblx0XHRcdFx0aGVhZGVycyA9IHt9LFxuXHRcdFx0XHRjb250ZW50VHlwZSA9IEFQUExJQ0FUSU9OX0pTT05fQ0hBUlNFVF9VVEY4X0NPTlRFTlRfVFlQRTtcblxuXHRoZWFkZXJzW0NPTlRFTlRfVFlQRV0gPSBjb250ZW50VHlwZTtcblxuXHRjb25zdCByZXF1ZXN0ID0gbWFrZVJlcXVlc3QoaG9zdCwgdXJpLCBxdWVyeSwgbWV0aG9kLCBoZWFkZXJzLCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG5cdFx0XHRcdFx0aWYgKHJlc3BvbnNlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRlcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnN0IHsgc3RhdHVzQ29kZSB9ID0gcmVzcG9uc2U7XG5cblx0XHRcdFx0XHRcdGlmIChzdGF0dXNDb2RlICE9PSBPS0FZXzIwMF9TVEFUVVNfQ09ERSkge1xuXHRcdFx0XHRcdFx0XHRlcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBqc29uID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0Y2FsbGJhY2soanNvbik7XG5cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250ZW50RnJvbVJlc3BvbnNlKHJlc3BvbnNlLCAoY29udGVudCkgPT4ge1xuXHRcdFx0XHRcdFx0bGV0IGpzb24gPSBudWxsO1xuXG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZShjb250ZW50KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7fVx0Ly8vXG5cblx0XHRcdFx0XHRcdGNhbGxiYWNrKGpzb24pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0cmVhZGFibGUgPSBSZWFkYWJsZS5mcm9tKGNvbnRlbnQpO1xuXG5cdHJlYWRhYmxlLnBpcGUocmVxdWVzdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0cG9zdFxufTtcblxuZnVuY3Rpb24gY29udGVudEZyb21SZXNwb25zZShyZXNwb25zZSwgY2FsbGJhY2spIHtcblx0bGV0IGNvbnRlbnQgPSBFTVBUWV9TVFJJTkc7XG5cblx0cmVzcG9uc2Uub24oREFUQSwgKGRhdGEpID0+IHtcblx0XHRjb250ZW50ICs9IGRhdGE7XG5cdH0pO1xuXG5cdHJlc3BvbnNlLm9uKEVORCwgKCkgPT4ge1xuXHRcdGNhbGxiYWNrKGNvbnRlbnQpO1xuXHR9KTtcbn1cbiJdLCJuYW1lcyI6WyJwb3N0IiwibWFrZVJlcXVlc3QiLCJyZXF1ZXN0IiwiaG9zdCIsInVyaSIsInF1ZXJ5IiwianNvbiIsImNhbGxiYWNrIiwiY29udGVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRob2QiLCJoZWFkZXJzIiwiY29udGVudFR5cGUiLCJyZXNwb25zZSIsImVycm9yIiwic3RhdHVzQ29kZSIsImNvbnRlbnRGcm9tUmVzcG9uc2UiLCJwYXJzZSIsInJlYWRhYmxlIiwiZnJvbSIsInBpcGUiLCJvbiIsImRhdGEiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7UUFhSUEsSUFBSSxHQUFKQSxJQUFJOztBQVhLLEdBQVEsQ0FBUixPQUFRO0FBRUEsR0FBVyxDQUFYLFVBQVc7QUFJaEIsR0FBWSxDQUFaLFFBQVk7QUFDSCxHQUFnQixDQUFoQixZQUFnQjtBQUNDLEdBQWMsQ0FBZCxVQUFjO0FBQ1QsR0FBaUIsQ0FBakIsYUFBaUI7QUFMNUUsR0FBSyxDQUFZQyxXQUFXLEdBRkssVUFBVyxrQkFFcENDLE9BQU87U0FPQ0YsSUFBSSxDQUFDRyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxLQUFJLEVBQUVDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZELEdBQUssQ0FBQ0MsUUFBTyxHQUFHQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0osS0FBSSxHQUNoQ0ssTUFBTSxHQVBrQixRQUFZLGNBUXBDQyxPQUFPLEdBQUcsQ0FBQztJQUFBLENBQUMsRUFDWkMsV0FBVyxHQU40QyxhQUFpQjtJQVEzRUQsT0FBTyxDQVQ4QyxVQUFjLGlCQVMzQ0MsV0FBVztJQUVuQyxHQUFLLENBQUNYLE9BQU8sR0FBR0QsV0FBVyxDQUFDRSxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFTSxNQUFNLEVBQUVDLE9BQU8sRUFBRSxRQUFRRSxDQUFQQyxLQUFLLEVBQUVELFFBQVEsRUFBSyxDQUFDO1FBQ2pGLEVBQUUsRUFBRUEsUUFBUSxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ3ZCQyxLQUFLLEdBQUcsSUFBSTtRQUNiLENBQUMsTUFBTSxDQUFDO1lBQ1AsR0FBSyxDQUFHQyxVQUFVLEdBQUtGLFFBQVEsQ0FBdkJFLFVBQVU7WUFFbEIsRUFBRSxFQUFFQSxVQUFVLEtBbEJpQixZQUFnQix1QkFrQk4sQ0FBQztnQkFDekNELEtBQUssR0FBRyxJQUFJO1lBQ2IsQ0FBQztRQUNGLENBQUM7UUFFRCxFQUFFLEVBQUVBLEtBQUssRUFBRSxDQUFDO1lBQ1gsR0FBSyxDQUFDVCxJQUFJLEdBQUcsSUFBSTtZQUVqQkMsUUFBUSxDQUFDRCxJQUFJO1lBRWIsTUFBTTtRQUNQLENBQUM7UUFFRFcsbUJBQW1CLENBQUNILFFBQVEsRUFBRSxRQUFRLENBQVBOLE9BQU8sRUFBSyxDQUFDO1lBQzNDLEdBQUcsQ0FBQ0YsSUFBSSxHQUFHLElBQUk7WUFFZixHQUFHLENBQUMsQ0FBQztnQkFDSkEsSUFBSSxHQUFHRyxJQUFJLENBQUNTLEtBQUssQ0FBQ1YsT0FBTztZQUMxQixDQUFDLENBQUMsS0FBSyxFQUFFTyxLQUFLLEVBQUUsQ0FBQztZQUFBLENBQUMsQUFBQyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7WUFFdEJSLFFBQVEsQ0FBQ0QsSUFBSTtRQUNkLENBQUM7SUFDRixDQUFDLEdBQ0RhLFFBQVEsR0FoRGEsT0FBUSxVQWdEVEMsSUFBSSxDQUFDWixRQUFPO0lBRW5DVyxRQUFRLENBQUNFLElBQUksQ0FBQ25CLE9BQU87QUFDdEIsQ0FBQztlQUVjLENBQUM7SUFDZkYsSUFBSSxFQUFKQSxJQUFJO0FBQ0wsQ0FBQzs7U0FFUWlCLG1CQUFtQixDQUFDSCxRQUFRLEVBQUVQLFFBQVEsRUFBRSxDQUFDO0lBQ2pELEdBQUcsQ0FBQ0MsT0FBTyxHQWxEMEMsVUFBYztJQW9EbkVNLFFBQVEsQ0FBQ1EsRUFBRSxDQXBEMEMsVUFBYyxPQW9EakQsUUFBUSxDQUFQQyxJQUFJLEVBQUssQ0FBQztRQUM1QmYsT0FBTyxJQUFJZSxJQUFJO0lBQ2hCLENBQUM7SUFFRFQsUUFBUSxDQUFDUSxFQUFFLENBeEQwQyxVQUFjLE1Bd0RsRCxRQUNsQixHQUR3QixDQUFDO1FBQ3ZCZixRQUFRLENBQUNDLE9BQU87SUFDakIsQ0FBQztBQUNGLENBQUMifQ==