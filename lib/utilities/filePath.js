"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    isFilePathCustomGrammarBNFFilePath: function() {
        return isFilePathCustomGrammarBNFFilePath;
    },
    isFilePathCustomGrammarPatternFilePath: function() {
        return isFilePathCustomGrammarPatternFilePath;
    },
    isFilePathDefaultMarkdownStyleFilePath: function() {
        return isFilePathDefaultMarkdownStyleFilePath;
    },
    isFilePathFlorenceFilePath: function() {
        return isFilePathFlorenceFilePath;
    },
    isFilePathMarkdownFilePath: function() {
        return isFilePathMarkdownFilePath;
    },
    isFilePathMarkdownStyleFilePath: function() {
        return isFilePathMarkdownStyleFilePath;
    },
    isFilePathMetaJSONFilePath: function() {
        return isFilePathMetaJSONFilePath;
    },
    isFilePathReadmeFilePath: function() {
        return isFilePathReadmeFilePath;
    },
    isFilePathRecognisedFilePath: function() {
        return isFilePathRecognisedFilePath;
    }
});
var readmeFilePathPattern = "^(?:[^\\/]+\\/){1}README\\.md$", markdownFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.md$", florenceFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.fls$", metaJSONFilePathPattern = "^(?:[^\\/]+\\/){1}meta\\.json$", markdownStyleFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.mds$", customGrammarBNFFilePathPattern = "^(?:[^\\/]+\\/){1}(term|statement|metastatement)\\.bnf$", customGrammarPatternFilePathPattern = "^(?:[^\\/]+\\/){1}(type|symbol|operator)\\.ptn$", defaultMarkdownStyleFilePathPattern = "^[^\\/]+\\/default\\.mds$", recognisedFilePathPattern = "".concat(markdownFilePathPattern, "|").concat(florenceFilePathPattern, "|").concat(metaJSONFilePathPattern, "|").concat(markdownStyleFilePathPattern, "|").concat(customGrammarBNFFilePathPattern, "|").concat(customGrammarPatternFilePathPattern);
var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern), markdownFilePathRegularExpression = new RegExp(markdownFilePathPattern), florenceFilePathRegularExpression = new RegExp(florenceFilePathPattern), metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern), recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern), markdownStyleFilePathRegularExpression = new RegExp(markdownStyleFilePathPattern), customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern), customGrammarPatternFilePathRegularExpression = new RegExp(customGrammarPatternFilePathPattern), defaultMarkdownStyleFilePathRegularExpression = new RegExp(defaultMarkdownStyleFilePathPattern);
function isFilePathReadmeFilePath(filePath) {
    return readmeFilePathRegularExpression.test(filePath);
}
function isFilePathMarkdownFilePath(filePath) {
    return markdownFilePathRegularExpression.test(filePath);
}
function isFilePathFlorenceFilePath(filePath) {
    return florenceFilePathRegularExpression.test(filePath);
}
function isFilePathMetaJSONFilePath(filePath) {
    return metaJSONFilePathRegularExpression.test(filePath);
}
function isFilePathRecognisedFilePath(filePath) {
    return recognisedFilePathRegularExpression.test(filePath);
}
function isFilePathMarkdownStyleFilePath(filePath) {
    return markdownStyleFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarBNFFilePath(filePath) {
    return customGrammarBNFFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarPatternFilePath(filePath) {
    return customGrammarPatternFilePathRegularExpression.test(filePath);
}
function isFilePathDefaultMarkdownStyleFilePath(filePath) {
    return defaultMarkdownStyleFilePathRegularExpression.test(filePath);
}
var _default = {
    isFilePathReadmeFilePath: isFilePathReadmeFilePath,
    isFilePathMarkdownFilePath: isFilePathMarkdownFilePath,
    isFilePathFlorenceFilePath: isFilePathFlorenceFilePath,
    isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
    isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
    isFilePathMarkdownStyleFilePath: isFilePathMarkdownStyleFilePath,
    isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
    isFilePathCustomGrammarPatternFilePath: isFilePathCustomGrammarPatternFilePath,
    isFilePathDefaultMarkdownStyleFilePath: isFilePathDefaultMarkdownStyleFilePath
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZVBhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1SRUFETUVcXFxcLm1kJFwiLFxyXG4gICAgICBtYXJrZG93bkZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxLH1bXlxcXFwuXStcXFxcLm1kJFwiLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxLH1bXlxcXFwuXStcXFxcLmZscyRcIixcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1tZXRhXFxcXC5qc29uJFwiLFxyXG4gICAgICBtYXJrZG93blN0eWxlRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezEsfVteXFxcXC5dK1xcXFwubWRzJFwiLFxyXG4gICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9KHRlcm18c3RhdGVtZW50fG1ldGFzdGF0ZW1lbnQpXFxcXC5ibmYkXCIsXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9KHR5cGV8c3ltYm9sfG9wZXJhdG9yKVxcXFwucHRuJFwiLFxyXG4gICAgICBkZWZhdWx0TWFya2Rvd25TdHlsZUZpbGVQYXRoUGF0dGVybiA9IFwiXlteXFxcXC9dK1xcXFwvZGVmYXVsdFxcXFwubWRzJFwiLFxyXG4gICAgICByZWNvZ25pc2VkRmlsZVBhdGhQYXR0ZXJuID0gYCR7bWFya2Rvd25GaWxlUGF0aFBhdHRlcm59fCR7ZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm59fCR7bWV0YUpTT05GaWxlUGF0aFBhdHRlcm59fCR7bWFya2Rvd25TdHlsZUZpbGVQYXRoUGF0dGVybn18JHtjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJufXwke2N1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJufWA7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChyZWFkbWVGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBtYXJrZG93bkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKG1hcmtkb3duRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIG1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAobWV0YUpTT05GaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIG1hcmtkb3duU3R5bGVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChtYXJrZG93blN0eWxlRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgZGVmYXVsdE1hcmtkb3duU3R5bGVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChkZWZhdWx0TWFya2Rvd25TdHlsZUZpbGVQYXRoUGF0dGVybik7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aE1hcmtkb3duRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIG1hcmtkb3duRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiBmbG9yZW5jZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gbWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aFJlY29nbmlzZWRGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gcmVjb2duaXNlZEZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoTWFya2Rvd25TdHlsZUZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiBtYXJrZG93blN0eWxlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhEZWZhdWx0TWFya2Rvd25TdHlsZUZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiBkZWZhdWx0TWFya2Rvd25TdHlsZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBpc0ZpbGVQYXRoUmVhZG1lRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aE1hcmtkb3duRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aE1ldGFKU09ORmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aFJlY29nbmlzZWRGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoTWFya2Rvd25TdHlsZUZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aERlZmF1bHRNYXJrZG93blN0eWxlRmlsZVBhdGhcclxufTtcclxuIl0sIm5hbWVzIjpbImlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgiLCJpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aCIsImlzRmlsZVBhdGhEZWZhdWx0TWFya2Rvd25TdHlsZUZpbGVQYXRoIiwiaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgiLCJpc0ZpbGVQYXRoTWFya2Rvd25GaWxlUGF0aCIsImlzRmlsZVBhdGhNYXJrZG93blN0eWxlRmlsZVBhdGgiLCJpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCIsImlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCIsImlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgiLCJyZWFkbWVGaWxlUGF0aFBhdHRlcm4iLCJtYXJrZG93bkZpbGVQYXRoUGF0dGVybiIsImZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuIiwibWV0YUpTT05GaWxlUGF0aFBhdHRlcm4iLCJtYXJrZG93blN0eWxlRmlsZVBhdGhQYXR0ZXJuIiwiY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybiIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuIiwiZGVmYXVsdE1hcmtkb3duU3R5bGVGaWxlUGF0aFBhdHRlcm4iLCJyZWNvZ25pc2VkRmlsZVBhdGhQYXR0ZXJuIiwicmVhZG1lRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsIlJlZ0V4cCIsIm1hcmtkb3duRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImZsb3JlbmNlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsIm1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsInJlY29nbmlzZWRGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwibWFya2Rvd25TdHlsZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImRlZmF1bHRNYXJrZG93blN0eWxlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImZpbGVQYXRoIiwidGVzdCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXdDQSxPQVVFO2VBVkY7O0lBTmdCQSxrQ0FBa0M7ZUFBbENBOztJQUVBQyxzQ0FBc0M7ZUFBdENBOztJQUVBQyxzQ0FBc0M7ZUFBdENBOztJQVpBQywwQkFBMEI7ZUFBMUJBOztJQUZBQywwQkFBMEI7ZUFBMUJBOztJQVFBQywrQkFBK0I7ZUFBL0JBOztJQUpBQywwQkFBMEI7ZUFBMUJBOztJQU5BQyx3QkFBd0I7ZUFBeEJBOztJQVFBQyw0QkFBNEI7ZUFBNUJBOzs7QUE1QmhCLElBQU1DLHdCQUF3QixrQ0FDeEJDLDBCQUEwQixvQ0FDMUJDLDBCQUEwQixxQ0FDMUJDLDBCQUEwQixrQ0FDMUJDLCtCQUErQixxQ0FDL0JDLGtDQUFrQywyREFDbENDLHNDQUFzQyxtREFDdENDLHNDQUFzQyw2QkFDdENDLDRCQUE0QixBQUFDLEdBQTZCTixPQUEzQkQseUJBQXdCLEtBQThCRSxPQUEzQkQseUJBQXdCLEtBQThCRSxPQUEzQkQseUJBQXdCLEtBQW1DRSxPQUFoQ0QsOEJBQTZCLEtBQXNDRSxPQUFuQ0QsaUNBQWdDLEtBQXVDLE9BQXBDQztBQUV6TCxJQUFNRyxrQ0FBa0MsSUFBSUMsT0FBT1Ysd0JBQzdDVyxvQ0FBb0MsSUFBSUQsT0FBT1QsMEJBQy9DVyxvQ0FBb0MsSUFBSUYsT0FBT1IsMEJBQy9DVyxvQ0FBb0MsSUFBSUgsT0FBT1AsMEJBQy9DVyxzQ0FBc0MsSUFBSUosT0FBT0YsNEJBQ2pETyx5Q0FBeUMsSUFBSUwsT0FBT04sK0JBQ3BEWSw0Q0FBNEMsSUFBSU4sT0FBT0wsa0NBQ3ZEWSxnREFBZ0QsSUFBSVAsT0FBT0osc0NBQzNEWSxnREFBZ0QsSUFBSVIsT0FBT0g7QUFFMUQsU0FBU1QseUJBQXlCcUIsUUFBUTtJQUFJLE9BQU9WLGdDQUFnQ1csSUFBSSxDQUFDRDtBQUFXO0FBRXJHLFNBQVN4QiwyQkFBMkJ3QixRQUFRO0lBQUksT0FBT1Isa0NBQWtDUyxJQUFJLENBQUNEO0FBQVc7QUFFekcsU0FBU3pCLDJCQUEyQnlCLFFBQVE7SUFBSSxPQUFPUCxrQ0FBa0NRLElBQUksQ0FBQ0Q7QUFBVztBQUV6RyxTQUFTdEIsMkJBQTJCc0IsUUFBUTtJQUFJLE9BQU9OLGtDQUFrQ08sSUFBSSxDQUFDRDtBQUFXO0FBRXpHLFNBQVNwQiw2QkFBNkJvQixRQUFRO0lBQUksT0FBT0wsb0NBQW9DTSxJQUFJLENBQUNEO0FBQVc7QUFFN0csU0FBU3ZCLGdDQUFnQ3VCLFFBQVE7SUFBSSxPQUFPSix1Q0FBdUNLLElBQUksQ0FBQ0Q7QUFBVztBQUVuSCxTQUFTNUIsbUNBQW1DNEIsUUFBUTtJQUFJLE9BQU9ILDBDQUEwQ0ksSUFBSSxDQUFDRDtBQUFXO0FBRXpILFNBQVMzQix1Q0FBdUMyQixRQUFRO0lBQUksT0FBT0YsOENBQThDRyxJQUFJLENBQUNEO0FBQVc7QUFFakksU0FBUzFCLHVDQUF1QzBCLFFBQVE7SUFBSSxPQUFPRCw4Q0FBOENFLElBQUksQ0FBQ0Q7QUFBVztJQUV4SSxXQUFlO0lBQ2JyQiwwQkFBQUE7SUFDQUgsNEJBQUFBO0lBQ0FELDRCQUFBQTtJQUNBRyw0QkFBQUE7SUFDQUUsOEJBQUFBO0lBQ0FILGlDQUFBQTtJQUNBTCxvQ0FBQUE7SUFDQUMsd0NBQUFBO0lBQ0FDLHdDQUFBQTtBQUNGIn0=