"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    isFilePathCustomGrammarBNFFilePath: function() {
        return isFilePathCustomGrammarBNFFilePath;
    },
    isFilePathCustomGrammarPatternFilePath: function() {
        return isFilePathCustomGrammarPatternFilePath;
    },
    isFilePathDefaultMarkdownStyleFilePath: function() {
        return isFilePathDefaultMarkdownStyleFilePath;
    },
    isFilePathIndexJSONFilePath: function() {
        return isFilePathIndexJSONFilePath;
    },
    isFilePathMarkdownFilePath: function() {
        return isFilePathMarkdownFilePath;
    },
    isFilePathMarkdownStyleFilePath: function() {
        return isFilePathMarkdownStyleFilePath;
    },
    isFilePathMetaJSONFilePath: function() {
        return isFilePathMetaJSONFilePath;
    },
    isFilePathNominalFilePath: function() {
        return isFilePathNominalFilePath;
    },
    isFilePathReadmeFilePath: function() {
        return isFilePathReadmeFilePath;
    },
    isFilePathRecognisedFilePath: function() {
        return isFilePathRecognisedFilePath;
    },
    isFilePathReleaseFilePath: function() {
        return isFilePathReleaseFilePath;
    }
});
var readmeFilePathPattern = "^(?:[^\\/]+\\/){1}README\\.md$", nominalFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.nml$", markdownFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.md$", metaJSONFilePathPattern = "^(?:[^\\/]+\\/){1}meta\\.json$", indexJSONFilePathPattern = "^(?:[^\\/]+\\/){1}index\\.json$", markdownStyleFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.mds$", customGrammarBNFFilePathPattern = "^(?:[^\\/]+\\/){1}(term|statement)\\.bnf$", customGrammarPatternFilePathPattern = "^(?:[^\\/]+\\/){1}(type|symbol|operator)\\.ptn$", defaultMarkdownStyleFilePathPattern = "^[^\\/]+\\/default\\.mds$", releaseFilePathPattern = "".concat(readmeFilePathPattern, "|").concat(nominalFilePathPattern, "|").concat(metaJSONFilePathPattern, "|").concat(customGrammarBNFFilePathPattern, "|").concat(customGrammarPatternFilePathPattern), recognisedFilePathPattern = "".concat(releaseFilePathPattern, "|").concat(indexJSONFilePathPattern, "|").concat(markdownFilePathPattern, "|").concat(markdownStyleFilePathPattern);
var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern), releaseFilePathRegularExpression = new RegExp(releaseFilePathPattern), nominalFilePathRegularExpression = new RegExp(nominalFilePathPattern), markdownFilePathRegularExpression = new RegExp(markdownFilePathPattern), metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern), indexJSONFilePathRegularExpression = new RegExp(indexJSONFilePathPattern), recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern), markdownStyleFilePathRegularExpression = new RegExp(markdownStyleFilePathPattern), customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern), customGrammarPatternFilePathRegularExpression = new RegExp(customGrammarPatternFilePathPattern), defaultMarkdownStyleFilePathRegularExpression = new RegExp(defaultMarkdownStyleFilePathPattern);
function isFilePathReadmeFilePath(filePath) {
    return readmeFilePathRegularExpression.test(filePath);
}
function isFilePathReleaseFilePath(filePath) {
    return releaseFilePathRegularExpression.test(filePath);
}
function isFilePathNominalFilePath(filePath) {
    return nominalFilePathRegularExpression.test(filePath);
}
function isFilePathMarkdownFilePath(filePath) {
    return markdownFilePathRegularExpression.test(filePath);
}
function isFilePathMetaJSONFilePath(filePath) {
    return metaJSONFilePathRegularExpression.test(filePath);
}
function isFilePathIndexJSONFilePath(filePath) {
    return indexJSONFilePathRegularExpression.test(filePath);
}
function isFilePathRecognisedFilePath(filePath) {
    return recognisedFilePathRegularExpression.test(filePath);
}
function isFilePathMarkdownStyleFilePath(filePath) {
    return markdownStyleFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarBNFFilePath(filePath) {
    return customGrammarBNFFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarPatternFilePath(filePath) {
    return customGrammarPatternFilePathRegularExpression.test(filePath);
}
function isFilePathDefaultMarkdownStyleFilePath(filePath) {
    return defaultMarkdownStyleFilePathRegularExpression.test(filePath);
}
var _default = {
    isFilePathReadmeFilePath: isFilePathReadmeFilePath,
    isFilePathReleaseFilePath: isFilePathReleaseFilePath,
    isFilePathNominalFilePath: isFilePathNominalFilePath,
    isFilePathMarkdownFilePath: isFilePathMarkdownFilePath,
    isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
    isFilePathIndexJSONFilePath: isFilePathIndexJSONFilePath,
    isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
    isFilePathMarkdownStyleFilePath: isFilePathMarkdownStyleFilePath,
    isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
    isFilePathCustomGrammarPatternFilePath: isFilePathCustomGrammarPatternFilePath,
    isFilePathDefaultMarkdownStyleFilePath: isFilePathDefaultMarkdownStyleFilePath
};

//# sourceMappingURL=data:application/json;base64,