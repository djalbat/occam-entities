"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isFilePathReadmeFilePath: function() {
        return isFilePathReadmeFilePath;
    },
    isFilePathFlorenceFilePath: function() {
        return isFilePathFlorenceFilePath;
    },
    isFilePathMetaJSONFilePath: function() {
        return isFilePathMetaJSONFilePath;
    },
    isFilePathRecognisedFilePath: function() {
        return isFilePathRecognisedFilePath;
    },
    isFilePathContextJSONFilePath: function() {
        return isFilePathContextJSONFilePath;
    },
    isFilePathCustomGrammarBNFFilePath: function() {
        return isFilePathCustomGrammarBNFFilePath;
    },
    isFilePathCustomGrammarPatternFilePath: function() {
        return isFilePathCustomGrammarPatternFilePath;
    },
    default: function() {
        return _default;
    }
});
var readmeFilePathPattern = "^(?:[^\\/]+\\/){1}README\\.md$", florenceFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.fls$", metaJSONFilePathPattern = "^(?:[^\\/]+\\/){1}meta\\.json$", contextJSONFilePathPattern = "^(?:[^\\/]+\\/){1}context\\.json$", customGrammarBNFFilePathPattern = "^(?:[^\\/]+\\/){1}(term|statement|metastatement)\\.bnf$", customGrammarPatternFilePathPattern = "^(?:[^\\/]+\\/){1}(type|symbol|operator)\\.ptn$", recognisedFilePathPattern = "".concat(readmeFilePathPattern, "|").concat(florenceFilePathPattern, "|").concat(metaJSONFilePathPattern, "|").concat(customGrammarBNFFilePathPattern, "|").concat(customGrammarPatternFilePathPattern);
var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern), florenceFilePathRegularExpression = new RegExp(florenceFilePathPattern), metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern), recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern), contextJSONFilePathRegularExpression = new RegExp(contextJSONFilePathPattern), customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern), customGrammarPatternFilePathRegularExpression = new RegExp(customGrammarPatternFilePathPattern);
function isFilePathReadmeFilePath(filePath) {
    return readmeFilePathRegularExpression.test(filePath);
}
function isFilePathFlorenceFilePath(filePath) {
    return florenceFilePathRegularExpression.test(filePath);
}
function isFilePathMetaJSONFilePath(filePath) {
    return metaJSONFilePathRegularExpression.test(filePath);
}
function isFilePathRecognisedFilePath(filePath) {
    return recognisedFilePathRegularExpression.test(filePath);
}
function isFilePathContextJSONFilePath(filePath) {
    return contextJSONFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarBNFFilePath(filePath) {
    return customGrammarBNFFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarPatternFilePath(filePath) {
    return customGrammarPatternFilePathRegularExpression.test(filePath);
}
var _default = {
    isFilePathReadmeFilePath: isFilePathReadmeFilePath,
    isFilePathFlorenceFilePath: isFilePathFlorenceFilePath,
    isFilePathContextJSONFilePath: isFilePathContextJSONFilePath,
    isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
    isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
    isFilePathCustomGrammarPatternFilePath: isFilePathCustomGrammarPatternFilePath
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZVBhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1SRUFETUVcXFxcLm1kJFwiLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxLH1bXlxcXFwuXStcXFxcLmZscyRcIixcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1tZXRhXFxcXC5qc29uJFwiLFxyXG4gICAgICBjb250ZXh0SlNPTkZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxfWNvbnRleHRcXFxcLmpzb24kXCIsXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX0odGVybXxzdGF0ZW1lbnR8bWV0YXN0YXRlbWVudClcXFxcLmJuZiRcIixcclxuICAgICAgY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX0odHlwZXxzeW1ib2x8b3BlcmF0b3IpXFxcXC5wdG4kXCIsXHJcbiAgICAgIHJlY29nbmlzZWRGaWxlUGF0aFBhdHRlcm4gPSBgJHtyZWFkbWVGaWxlUGF0aFBhdHRlcm59fCR7ZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm59fCR7bWV0YUpTT05GaWxlUGF0aFBhdHRlcm59fCR7Y3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybn18JHtjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoUGF0dGVybn1gO1xyXG5cclxuY29uc3QgcmVhZG1lRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVhZG1lRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIG1ldGFKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAobWV0YUpTT05GaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVjb2duaXNlZEZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIGNvbnRleHRKU09ORmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoY29udGV4dEpTT05GaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFBhdHRlcm4pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gcmVhZG1lRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiBmbG9yZW5jZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gbWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aFJlY29nbmlzZWRGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gcmVjb2duaXNlZEZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoQ29udGV4dEpTT05GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY29udGV4dEpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhGbG9yZW5jZUZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhDb250ZXh0SlNPTkZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFxyXG59O1xyXG4iXSwibmFtZXMiOlsiaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoIiwiaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgiLCJpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCIsImlzRmlsZVBhdGhSZWNvZ25pc2VkRmlsZVBhdGgiLCJpc0ZpbGVQYXRoQ29udGV4dEpTT05GaWxlUGF0aCIsImlzRmlsZVBhdGhDdXN0b21HcmFtbWFyQk5GRmlsZVBhdGgiLCJpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aCIsInJlYWRtZUZpbGVQYXRoUGF0dGVybiIsImZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuIiwibWV0YUpTT05GaWxlUGF0aFBhdHRlcm4iLCJjb250ZXh0SlNPTkZpbGVQYXRoUGF0dGVybiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm4iLCJjdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoUGF0dGVybiIsInJlY29nbmlzZWRGaWxlUGF0aFBhdHRlcm4iLCJyZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiUmVnRXhwIiwiZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwibWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwicmVjb2duaXNlZEZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJjb250ZXh0SlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImZpbGVQYXRoIiwidGVzdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBa0JnQkEsd0JBQXdCO2VBQXhCQTs7SUFFQUMsMEJBQTBCO2VBQTFCQTs7SUFFQUMsMEJBQTBCO2VBQTFCQTs7SUFFQUMsNEJBQTRCO2VBQTVCQTs7SUFFQUMsNkJBQTZCO2VBQTdCQTs7SUFFQUMsa0NBQWtDO2VBQWxDQTs7SUFFQUMsc0NBQXNDO2VBQXRDQTs7SUFFaEIsT0FPRTtlQVBGOzs7QUE5QkEsSUFBTUMsd0JBQXdCLGtDQUN4QkMsMEJBQTBCLHFDQUMxQkMsMEJBQTBCLGtDQUMxQkMsNkJBQTZCLHFDQUM3QkMsa0NBQWtDLDJEQUNsQ0Msc0NBQXNDLG1EQUN0Q0MsNEJBQTRCLEFBQUMsR0FBMkJMLE9BQXpCRCx1QkFBc0IsS0FBOEJFLE9BQTNCRCx5QkFBd0IsS0FBOEJHLE9BQTNCRix5QkFBd0IsS0FBc0NHLE9BQW5DRCxpQ0FBZ0MsS0FBdUMsT0FBcENDO0FBRXZKLElBQU1FLGtDQUFrQyxJQUFJQyxPQUFPUix3QkFDN0NTLG9DQUFvQyxJQUFJRCxPQUFPUCwwQkFDL0NTLG9DQUFvQyxJQUFJRixPQUFPTiwwQkFDL0NTLHNDQUFzQyxJQUFJSCxPQUFPRiw0QkFDakRNLHVDQUF1QyxJQUFJSixPQUFPTCw2QkFDbERVLDRDQUE0QyxJQUFJTCxPQUFPSixrQ0FDdkRVLGdEQUFnRCxJQUFJTixPQUFPSDtBQUUxRCxTQUFTWix5QkFBeUJzQixRQUFRLEVBQUU7SUFBRSxPQUFPUixnQ0FBZ0NTLElBQUksQ0FBQ0Q7QUFBVztBQUVyRyxTQUFTckIsMkJBQTJCcUIsUUFBUSxFQUFFO0lBQUUsT0FBT04sa0NBQWtDTyxJQUFJLENBQUNEO0FBQVc7QUFFekcsU0FBU3BCLDJCQUEyQm9CLFFBQVEsRUFBRTtJQUFFLE9BQU9MLGtDQUFrQ00sSUFBSSxDQUFDRDtBQUFXO0FBRXpHLFNBQVNuQiw2QkFBNkJtQixRQUFRLEVBQUU7SUFBRSxPQUFPSixvQ0FBb0NLLElBQUksQ0FBQ0Q7QUFBVztBQUU3RyxTQUFTbEIsOEJBQThCa0IsUUFBUSxFQUFFO0lBQUUsT0FBT0gscUNBQXFDSSxJQUFJLENBQUNEO0FBQVc7QUFFL0csU0FBU2pCLG1DQUFtQ2lCLFFBQVEsRUFBRTtJQUFFLE9BQU9GLDBDQUEwQ0csSUFBSSxDQUFDRDtBQUFXO0FBRXpILFNBQVNoQix1Q0FBdUNnQixRQUFRLEVBQUU7SUFBRSxPQUFPRCw4Q0FBOENFLElBQUksQ0FBQ0Q7QUFBVztJQUV4SSxXQUFlO0lBQ2J0QiwwQkFBQUE7SUFDQUMsNEJBQUFBO0lBQ0FHLCtCQUFBQTtJQUNBRCw4QkFBQUE7SUFDQUUsb0NBQUFBO0lBQ0FDLHdDQUFBQTtBQUNGIn0=