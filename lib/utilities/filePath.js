"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    isFilePathCustomGrammarBNFFilePath: function() {
        return isFilePathCustomGrammarBNFFilePath;
    },
    isFilePathCustomGrammarPatternFilePath: function() {
        return isFilePathCustomGrammarPatternFilePath;
    },
    isFilePathDefaultMarkdownStyleFilePath: function() {
        return isFilePathDefaultMarkdownStyleFilePath;
    },
    isFilePathFlorenceFilePath: function() {
        return isFilePathFlorenceFilePath;
    },
    isFilePathMarkdownFilePath: function() {
        return isFilePathMarkdownFilePath;
    },
    isFilePathMarkdownStyleFilePath: function() {
        return isFilePathMarkdownStyleFilePath;
    },
    isFilePathMetaJSONFilePath: function() {
        return isFilePathMetaJSONFilePath;
    },
    isFilePathReadmeFilePath: function() {
        return isFilePathReadmeFilePath;
    },
    isFilePathRecognisedFilePath: function() {
        return isFilePathRecognisedFilePath;
    }
});
var readmeFilePathPattern = "^(?:[^\\/]+\\/){1}README\\.md$", markdownFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.md$", florenceFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.fls$", metaJSONFilePathPattern = "^(?:[^\\/]+\\/){1}meta\\.json$", markdownStyleFilePathPattern = "^(?:[^\\/]+\\/){1,}[^\\.]+\\.mds$", customGrammarBNFFilePathPattern = "^(?:[^\\/]+\\/){1}(term|statement|metastatement)\\.bnf$", customGrammarPatternFilePathPattern = "^(?:[^\\/]+\\/){1}(type|symbol|operator)\\.ptn$", defaultMarkdownStyleFilePathPattern = "^(?:[^\\/]+\\/){1,}default\\.mds$", recognisedFilePathPattern = "".concat(markdownFilePathPattern, "|").concat(florenceFilePathPattern, "|").concat(metaJSONFilePathPattern, "|").concat(markdownStyleFilePathPattern, "|").concat(customGrammarBNFFilePathPattern, "|").concat(customGrammarPatternFilePathPattern);
var readmeFilePathRegularExpression = new RegExp(readmeFilePathPattern), markdownFilePathRegularExpression = new RegExp(markdownFilePathPattern), florenceFilePathRegularExpression = new RegExp(florenceFilePathPattern), metaJSONFilePathRegularExpression = new RegExp(metaJSONFilePathPattern), recognisedFilePathRegularExpression = new RegExp(recognisedFilePathPattern), markdownStyleFilePathRegularExpression = new RegExp(markdownStyleFilePathPattern), customGrammarBNFFilePathRegularExpression = new RegExp(customGrammarBNFFilePathPattern), customGrammarPatternFilePathRegularExpression = new RegExp(customGrammarPatternFilePathPattern), defaultMarkdownStyleFilePathRegularExpression = new RegExp(defaultMarkdownStyleFilePathPattern);
function isFilePathReadmeFilePath(filePath) {
    return readmeFilePathRegularExpression.test(filePath);
}
function isFilePathMarkdownFilePath(filePath) {
    return markdownFilePathRegularExpression.test(filePath);
}
function isFilePathFlorenceFilePath(filePath) {
    return florenceFilePathRegularExpression.test(filePath);
}
function isFilePathMetaJSONFilePath(filePath) {
    return metaJSONFilePathRegularExpression.test(filePath);
}
function isFilePathRecognisedFilePath(filePath) {
    return recognisedFilePathRegularExpression.test(filePath);
}
function isFilePathMarkdownStyleFilePath(filePath) {
    return markdownStyleFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarBNFFilePath(filePath) {
    return customGrammarBNFFilePathRegularExpression.test(filePath);
}
function isFilePathCustomGrammarPatternFilePath(filePath) {
    return customGrammarPatternFilePathRegularExpression.test(filePath);
}
function isFilePathDefaultMarkdownStyleFilePath(filePath) {
    return defaultMarkdownStyleFilePathRegularExpression.test(filePath);
}
var _default = {
    isFilePathReadmeFilePath: isFilePathReadmeFilePath,
    isFilePathMarkdownFilePath: isFilePathMarkdownFilePath,
    isFilePathFlorenceFilePath: isFilePathFlorenceFilePath,
    isFilePathMetaJSONFilePath: isFilePathMetaJSONFilePath,
    isFilePathRecognisedFilePath: isFilePathRecognisedFilePath,
    isFilePathMarkdownStyleFilePath: isFilePathMarkdownStyleFilePath,
    isFilePathCustomGrammarBNFFilePath: isFilePathCustomGrammarBNFFilePath,
    isFilePathCustomGrammarPatternFilePath: isFilePathCustomGrammarPatternFilePath,
    isFilePathDefaultMarkdownStyleFilePath: isFilePathDefaultMarkdownStyleFilePath
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZVBhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5jb25zdCByZWFkbWVGaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1SRUFETUVcXFxcLm1kJFwiLFxyXG4gICAgICBtYXJrZG93bkZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxLH1bXlxcXFwuXStcXFxcLm1kJFwiLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxLH1bXlxcXFwuXStcXFxcLmZscyRcIixcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFBhdHRlcm4gPSBcIl4oPzpbXlxcXFwvXStcXFxcLyl7MX1tZXRhXFxcXC5qc29uJFwiLFxyXG4gICAgICBtYXJrZG93blN0eWxlRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezEsfVteXFxcXC5dK1xcXFwubWRzJFwiLFxyXG4gICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9KHRlcm18c3RhdGVtZW50fG1ldGFzdGF0ZW1lbnQpXFxcXC5ibmYkXCIsXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhQYXR0ZXJuID0gXCJeKD86W15cXFxcL10rXFxcXC8pezF9KHR5cGV8c3ltYm9sfG9wZXJhdG9yKVxcXFwucHRuJFwiLFxyXG4gICAgICBkZWZhdWx0TWFya2Rvd25TdHlsZUZpbGVQYXRoUGF0dGVybiA9IFwiXig/OlteXFxcXC9dK1xcXFwvKXsxLH1kZWZhdWx0XFxcXC5tZHMkXCIsXHJcbiAgICAgIHJlY29nbmlzZWRGaWxlUGF0aFBhdHRlcm4gPSBgJHttYXJrZG93bkZpbGVQYXRoUGF0dGVybn18JHtmbG9yZW5jZUZpbGVQYXRoUGF0dGVybn18JHttZXRhSlNPTkZpbGVQYXRoUGF0dGVybn18JHttYXJrZG93blN0eWxlRmlsZVBhdGhQYXR0ZXJufXwke2N1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFBhdHRlcm59fCR7Y3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFBhdHRlcm59YDtcclxuXHJcbmNvbnN0IHJlYWRtZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKHJlYWRtZUZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIG1hcmtkb3duRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAobWFya2Rvd25GaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBmbG9yZW5jZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGZsb3JlbmNlRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgbWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChtZXRhSlNPTkZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIHJlY29nbmlzZWRGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChyZWNvZ25pc2VkRmlsZVBhdGhQYXR0ZXJuKSxcclxuICAgICAgbWFya2Rvd25TdHlsZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKG1hcmtkb3duU3R5bGVGaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUGF0dGVybiksXHJcbiAgICAgIGN1c3RvbUdyYW1tYXJQYXR0ZXJuRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFBhdHRlcm4pLFxyXG4gICAgICBkZWZhdWx0TWFya2Rvd25TdHlsZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGRlZmF1bHRNYXJrZG93blN0eWxlRmlsZVBhdGhQYXR0ZXJuKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoUmVhZG1lRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIHJlYWRtZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoTWFya2Rvd25GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gbWFya2Rvd25GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEZsb3JlbmNlRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGZsb3JlbmNlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiBtZXRhSlNPTkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoKGZpbGVQYXRoKSB7IHJldHVybiByZWNvZ25pc2VkRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVBhdGhNYXJrZG93blN0eWxlRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIG1hcmtkb3duU3R5bGVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY3VzdG9tR3JhbW1hckJORkZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24udGVzdChmaWxlUGF0aCk7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aChmaWxlUGF0aCkgeyByZXR1cm4gY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZmlsZVBhdGgpOyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlUGF0aERlZmF1bHRNYXJrZG93blN0eWxlRmlsZVBhdGgoZmlsZVBhdGgpIHsgcmV0dXJuIGRlZmF1bHRNYXJrZG93blN0eWxlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGZpbGVQYXRoKTsgfVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGlzRmlsZVBhdGhSZWFkbWVGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoTWFya2Rvd25GaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoTWV0YUpTT05GaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoUmVjb2duaXNlZEZpbGVQYXRoLFxyXG4gIGlzRmlsZVBhdGhNYXJrZG93blN0eWxlRmlsZVBhdGgsXHJcbiAgaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoQ3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aCxcclxuICBpc0ZpbGVQYXRoRGVmYXVsdE1hcmtkb3duU3R5bGVGaWxlUGF0aFxyXG59O1xyXG4iXSwibmFtZXMiOlsiaXNGaWxlUGF0aEN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aCIsImlzRmlsZVBhdGhDdXN0b21HcmFtbWFyUGF0dGVybkZpbGVQYXRoIiwiaXNGaWxlUGF0aERlZmF1bHRNYXJrZG93blN0eWxlRmlsZVBhdGgiLCJpc0ZpbGVQYXRoRmxvcmVuY2VGaWxlUGF0aCIsImlzRmlsZVBhdGhNYXJrZG93bkZpbGVQYXRoIiwiaXNGaWxlUGF0aE1hcmtkb3duU3R5bGVGaWxlUGF0aCIsImlzRmlsZVBhdGhNZXRhSlNPTkZpbGVQYXRoIiwiaXNGaWxlUGF0aFJlYWRtZUZpbGVQYXRoIiwiaXNGaWxlUGF0aFJlY29nbmlzZWRGaWxlUGF0aCIsInJlYWRtZUZpbGVQYXRoUGF0dGVybiIsIm1hcmtkb3duRmlsZVBhdGhQYXR0ZXJuIiwiZmxvcmVuY2VGaWxlUGF0aFBhdHRlcm4iLCJtZXRhSlNPTkZpbGVQYXRoUGF0dGVybiIsIm1hcmtkb3duU3R5bGVGaWxlUGF0aFBhdHRlcm4iLCJjdXN0b21HcmFtbWFyQk5GRmlsZVBhdGhQYXR0ZXJuIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFBhdHRlcm4iLCJkZWZhdWx0TWFya2Rvd25TdHlsZUZpbGVQYXRoUGF0dGVybiIsInJlY29nbmlzZWRGaWxlUGF0aFBhdHRlcm4iLCJyZWFkbWVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiUmVnRXhwIiwibWFya2Rvd25GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiZmxvcmVuY2VGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwibWV0YUpTT05GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwicmVjb2duaXNlZEZpbGVQYXRoUmVndWxhckV4cHJlc3Npb24iLCJtYXJrZG93blN0eWxlRmlsZVBhdGhSZWd1bGFyRXhwcmVzc2lvbiIsImN1c3RvbUdyYW1tYXJCTkZGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiY3VzdG9tR3JhbW1hclBhdHRlcm5GaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiZGVmYXVsdE1hcmtkb3duU3R5bGVGaWxlUGF0aFJlZ3VsYXJFeHByZXNzaW9uIiwiZmlsZVBhdGgiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUF3Q0EsT0FVRTtlQVZGOztJQU5nQkEsa0NBQWtDO2VBQWxDQTs7SUFFQUMsc0NBQXNDO2VBQXRDQTs7SUFFQUMsc0NBQXNDO2VBQXRDQTs7SUFaQUMsMEJBQTBCO2VBQTFCQTs7SUFGQUMsMEJBQTBCO2VBQTFCQTs7SUFRQUMsK0JBQStCO2VBQS9CQTs7SUFKQUMsMEJBQTBCO2VBQTFCQTs7SUFOQUMsd0JBQXdCO2VBQXhCQTs7SUFRQUMsNEJBQTRCO2VBQTVCQTs7O0FBNUJoQixJQUFNQyx3QkFBd0Isa0NBQ3hCQywwQkFBMEIsb0NBQzFCQywwQkFBMEIscUNBQzFCQywwQkFBMEIsa0NBQzFCQywrQkFBK0IscUNBQy9CQyxrQ0FBa0MsMkRBQ2xDQyxzQ0FBc0MsbURBQ3RDQyxzQ0FBc0MscUNBQ3RDQyw0QkFBNEIsQUFBQyxHQUE2Qk4sT0FBM0JELHlCQUF3QixLQUE4QkUsT0FBM0JELHlCQUF3QixLQUE4QkUsT0FBM0JELHlCQUF3QixLQUFtQ0UsT0FBaENELDhCQUE2QixLQUFzQ0UsT0FBbkNELGlDQUFnQyxLQUF1QyxPQUFwQ0M7QUFFekwsSUFBTUcsa0NBQWtDLElBQUlDLE9BQU9WLHdCQUM3Q1csb0NBQW9DLElBQUlELE9BQU9ULDBCQUMvQ1csb0NBQW9DLElBQUlGLE9BQU9SLDBCQUMvQ1csb0NBQW9DLElBQUlILE9BQU9QLDBCQUMvQ1csc0NBQXNDLElBQUlKLE9BQU9GLDRCQUNqRE8seUNBQXlDLElBQUlMLE9BQU9OLCtCQUNwRFksNENBQTRDLElBQUlOLE9BQU9MLGtDQUN2RFksZ0RBQWdELElBQUlQLE9BQU9KLHNDQUMzRFksZ0RBQWdELElBQUlSLE9BQU9IO0FBRTFELFNBQVNULHlCQUF5QnFCLFFBQVE7SUFBSSxPQUFPVixnQ0FBZ0NXLElBQUksQ0FBQ0Q7QUFBVztBQUVyRyxTQUFTeEIsMkJBQTJCd0IsUUFBUTtJQUFJLE9BQU9SLGtDQUFrQ1MsSUFBSSxDQUFDRDtBQUFXO0FBRXpHLFNBQVN6QiwyQkFBMkJ5QixRQUFRO0lBQUksT0FBT1Asa0NBQWtDUSxJQUFJLENBQUNEO0FBQVc7QUFFekcsU0FBU3RCLDJCQUEyQnNCLFFBQVE7SUFBSSxPQUFPTixrQ0FBa0NPLElBQUksQ0FBQ0Q7QUFBVztBQUV6RyxTQUFTcEIsNkJBQTZCb0IsUUFBUTtJQUFJLE9BQU9MLG9DQUFvQ00sSUFBSSxDQUFDRDtBQUFXO0FBRTdHLFNBQVN2QixnQ0FBZ0N1QixRQUFRO0lBQUksT0FBT0osdUNBQXVDSyxJQUFJLENBQUNEO0FBQVc7QUFFbkgsU0FBUzVCLG1DQUFtQzRCLFFBQVE7SUFBSSxPQUFPSCwwQ0FBMENJLElBQUksQ0FBQ0Q7QUFBVztBQUV6SCxTQUFTM0IsdUNBQXVDMkIsUUFBUTtJQUFJLE9BQU9GLDhDQUE4Q0csSUFBSSxDQUFDRDtBQUFXO0FBRWpJLFNBQVMxQix1Q0FBdUMwQixRQUFRO0lBQUksT0FBT0QsOENBQThDRSxJQUFJLENBQUNEO0FBQVc7SUFFeEksV0FBZTtJQUNickIsMEJBQUFBO0lBQ0FILDRCQUFBQTtJQUNBRCw0QkFBQUE7SUFDQUcsNEJBQUFBO0lBQ0FFLDhCQUFBQTtJQUNBSCxpQ0FBQUE7SUFDQUwsb0NBQUFBO0lBQ0FDLHdDQUFBQTtJQUNBQyx3Q0FBQUE7QUFDRiJ9