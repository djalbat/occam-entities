"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return createProjectEntry;
    },
    createEntryOperation: function() {
        return createEntryOperation;
    }
});
var _necessary = require("necessary");
var _fsExtra = require("fs-extra");
var first = _necessary.arrayUtilities.first, concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists;
function createProjectEntry(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, firstPathMap = first(pathMaps), pathMap = firstPathMap, sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, entryDirectory = pathMap.entryDirectory;
    createEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
        var targetEntryPaths = [
            targetEntryPath
        ];
        var _$json = {
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
function createEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback) {
    entryDirectory ? createDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : createFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function createFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var targetFilePath = targetEntryPath; ///
    var absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra.createFile)(absoluteTargetFilePath, function(error) {
        if (error) {
            targetEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function createDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var targetDirectoryPath = targetEntryPath; //
    var absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra.mkdirs)(absoluteTargetDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVQcm9qZWN0RW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcbmltcG9ydCB7IGNyZWF0ZUZpbGUsIG1rZGlycyBhcyBjcmVhdGVEaXJlY3RvcnkgfSBmcm9tIFwiZnMtZXh0cmFcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IGNoZWNrRW50cnlFeGlzdHMgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGpzb24sIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgcGF0aE1hcHMgfSA9IGpzb24sXG4gICAgICAgIGZpcnN0UGF0aE1hcCA9IGZpcnN0KHBhdGhNYXBzKSxcbiAgICAgICAgcGF0aE1hcCA9IGZpcnN0UGF0aE1hcCwgIC8vL1xuICAgICAgICB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBjcmVhdGVFbnRyeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgZW50cnlEaXJlY3RvcnksIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRocyA9IFtcbiAgICAgICAgICAgIHRhcmdldEVudHJ5UGF0aFxuICAgICAgICAgIF07XG5cbiAgICBjb25zdCBqc29uID0ge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoc1xuICAgIH07XG5cbiAgICBjYWxsYmFjayhqc29uKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbnRyeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgZW50cnlEaXJlY3RvcnksIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIGNyZWF0ZURpcmVjdG9yeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgY3JlYXRlRmlsZU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpbGVPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3QgdGFyZ2V0RmlsZVBhdGggPSB0YXJnZXRFbnRyeVBhdGg7ICAvLy9cblxuICBjb25zdCBhYnNvbHV0ZVRhcmdldEZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldEZpbGVQYXRoKSxcbiAgICAgICAgdGFyZ2V0RmlsZUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCk7XG5cbiAgaWYgKHRhcmdldEZpbGVFeGlzdHMpIHtcbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjcmVhdGVGaWxlKGFic29sdXRlVGFyZ2V0RmlsZVBhdGgsIChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcbiAgICB9XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEaXJlY3RvcnlPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3QgdGFyZ2V0RGlyZWN0b3J5UGF0aCA9IHRhcmdldEVudHJ5UGF0aDsgLy9cblxuICBjb25zdCBhYnNvbHV0ZVRhcmdldERpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgdGFyZ2V0RGlyZWN0b3J5UGF0aCksXG4gICAgICAgIHRhcmdldERpcmVjdG9yeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoKTtcblxuICBpZiAodGFyZ2V0RGlyZWN0b3J5RXhpc3RzKSB7XG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY3JlYXRlRGlyZWN0b3J5KGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlUHJvamVjdEVudHJ5IiwiY3JlYXRlRW50cnlPcGVyYXRpb24iLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJjaGVja0VudHJ5RXhpc3RzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsInByb2plY3RzRGlyZWN0b3J5UGF0aCIsImpzb24iLCJjYWxsYmFjayIsInBhdGhNYXBzIiwiZmlyc3RQYXRoTWFwIiwicGF0aE1hcCIsInNvdXJjZUVudHJ5UGF0aCIsInRhcmdldEVudHJ5UGF0aCIsImVudHJ5RGlyZWN0b3J5IiwidGFyZ2V0RW50cnlQYXRocyIsImNyZWF0ZURpcmVjdG9yeU9wZXJhdGlvbiIsImNyZWF0ZUZpbGVPcGVyYXRpb24iLCJ0YXJnZXRGaWxlUGF0aCIsImFic29sdXRlVGFyZ2V0RmlsZVBhdGgiLCJ0YXJnZXRGaWxlRXhpc3RzIiwiY3JlYXRlRmlsZSIsImVycm9yIiwidGFyZ2V0RGlyZWN0b3J5UGF0aCIsImFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCIsInRhcmdldERpcmVjdG9yeUV4aXN0cyIsImNyZWF0ZURpcmVjdG9yeSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBVUEsT0FpQkM7ZUFqQnVCQTs7SUFtQlJDLG9CQUFvQjtlQUFwQkE7Ozt5QkEzQmU7dUJBRXVCO0FBRXRELElBQU0sQUFBRUMsUUFBVUMseUJBQWMsQ0FBeEJELE9BQ0YsQUFBRUUsbUJBQXFCQyx3QkFBYSxDQUFsQ0Qsa0JBQ0YsQUFBRUUsbUJBQXFCQyw4QkFBbUIsQ0FBeENEO0FBRU8sU0FBU04sbUJBQW1CUSxxQkFBcUIsRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUU7SUFDaEYsSUFBTSxBQUFFQyxXQUFhRixLQUFiRSxVQUNGQyxlQUFlVixNQUFNUyxXQUNyQkUsVUFBVUQsY0FDUkUsa0JBQXFERCxRQUFyREMsaUJBQWlCQyxrQkFBb0NGLFFBQXBDRSxpQkFBaUJDLGlCQUFtQkgsUUFBbkJHO0lBRTFDZixxQkFBcUJhLGlCQUFpQkMsaUJBQWlCQyxnQkFBZ0JSLHVCQUF1QixTQUFDTSxpQkFBaUJDLGlCQUFvQjtRQUNsSSxJQUFNRSxtQkFBbUI7WUFDakJGO1NBQ0Q7UUFFUCxJQUFNTixTQUFPO1lBQ1hRLGtCQUFBQTtRQUNGO1FBRUFQLFNBQVNEO0lBQ1g7QUFDRjtBQUVPLFNBQVNSLHFCQUFxQmEsZUFBZSxFQUFFQyxlQUFlLEVBQUVDLGNBQWMsRUFBRVIscUJBQXFCLEVBQUVFLFFBQVEsRUFBRTtJQUN0SE0saUJBQ0VFLHlCQUF5QkosaUJBQWlCQyxpQkFBaUJQLHVCQUF1QkUsWUFDaEZTLG9CQUFvQkwsaUJBQWlCQyxpQkFBaUJQLHVCQUF1QkUsU0FBUztBQUM1RjtBQUVBLFNBQVNTLG9CQUFvQkwsZUFBZSxFQUFFQyxlQUFlLEVBQUVQLHFCQUFxQixFQUFFRSxRQUFRLEVBQUU7SUFDOUYsSUFBTVUsaUJBQWlCTCxpQkFBa0IsR0FBRztJQUU1QyxJQUFNTSx5QkFBeUJqQixpQkFBaUJJLHVCQUF1QlksaUJBQ2pFRSxtQkFBbUJoQixpQkFBaUJlO0lBRTFDLElBQUlDLGtCQUFrQjtRQUNwQlosU0FBU0ksaUJBQWlCQztRQUUxQjtJQUNGLENBQUM7SUFFRFEsSUFBQUEsbUJBQVUsRUFBQ0Ysd0JBQXdCLFNBQUNHLE9BQVU7UUFDNUMsSUFBSUEsT0FBTztZQUNUVCxrQkFBa0IsSUFBSTtRQUN4QixDQUFDO1FBRURMLFNBQVNJLGlCQUFpQkM7SUFDNUI7QUFDRjtBQUVBLFNBQVNHLHlCQUF5QkosZUFBZSxFQUFFQyxlQUFlLEVBQUVQLHFCQUFxQixFQUFFRSxRQUFRLEVBQUU7SUFDbkcsSUFBTWUsc0JBQXNCVixpQkFBaUIsRUFBRTtJQUUvQyxJQUFNVyw4QkFBOEJ0QixpQkFBaUJJLHVCQUF1QmlCLHNCQUN0RUUsd0JBQXdCckIsaUJBQWlCb0I7SUFFL0MsSUFBSUMsdUJBQXVCO1FBQ3pCakIsU0FBU0ksaUJBQWlCQztRQUUxQjtJQUNGLENBQUM7SUFFRGEsSUFBQUEsZUFBZSxFQUFDRiw2QkFBNkIsU0FBQ0YsT0FBVTtRQUN0RCxJQUFJQSxPQUFPO1lBQ1RULGtCQUFrQixJQUFJO1FBQ3hCLENBQUM7UUFFREwsU0FBU0ksaUJBQWlCQztJQUM1QjtBQUNGIn0=