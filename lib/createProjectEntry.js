"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return createProjectEntry;
    },
    createEntryOperation: function() {
        return createEntryOperation;
    }
});
var _necessary = require("necessary");
var _fsExtra = require("fs-extra");
var first = _necessary.arrayUtilities.first, concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists;
function createProjectEntry(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, firstPathMap = first(pathMaps), pathMap = firstPathMap, sourceEntryPath = pathMap.sourceEntryPath, targetEntryPath = pathMap.targetEntryPath, entryDirectory = pathMap.entryDirectory;
    createEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
        var targetEntryPaths = [
            targetEntryPath
        ];
        var _$json = {
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
function createEntryOperation(sourceEntryPath, targetEntryPath, entryDirectory, projectsDirectoryPath, callback) {
    entryDirectory ? createDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : createFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function createFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var targetFilePath = targetEntryPath, absoluteTargetFilePath = concatenatePaths(projectsDirectoryPath, targetFilePath), targetFileExists = checkEntryExists(absoluteTargetFilePath);
    if (targetFileExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra.createFile)(absoluteTargetFilePath, function(error) {
        if (error) {
            targetEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function createDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var targetDirectoryPath = targetEntryPath, absoluteTargetDirectoryPath = concatenatePaths(projectsDirectoryPath, targetDirectoryPath), targetDirectoryExists = checkEntryExists(absoluteTargetDirectoryPath);
    if (targetDirectoryExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra.mkdirs)(absoluteTargetDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVQcm9qZWN0RW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcbmltcG9ydCB7IGNyZWF0ZUZpbGUsIG1rZGlycyBhcyBjcmVhdGVEaXJlY3RvcnkgfSBmcm9tIFwiZnMtZXh0cmFcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IGNoZWNrRW50cnlFeGlzdHMgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3RFbnRyeShwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGpzb24sIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgcGF0aE1hcHMgfSA9IGpzb24sXG4gICAgICAgIGZpcnN0UGF0aE1hcCA9IGZpcnN0KHBhdGhNYXBzKSxcbiAgICAgICAgcGF0aE1hcCA9IGZpcnN0UGF0aE1hcCwgIC8vL1xuICAgICAgICB7IHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBlbnRyeURpcmVjdG9yeSB9ID0gcGF0aE1hcDtcblxuICBjcmVhdGVFbnRyeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgZW50cnlEaXJlY3RvcnksIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRocyA9IFtcbiAgICAgICAgICAgIHRhcmdldEVudHJ5UGF0aFxuICAgICAgICAgIF07XG5cbiAgICBjb25zdCBqc29uID0ge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoc1xuICAgIH07XG5cbiAgICBjYWxsYmFjayhqc29uKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbnRyeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgZW50cnlEaXJlY3RvcnksIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIGNyZWF0ZURpcmVjdG9yeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgY3JlYXRlRmlsZU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpbGVPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3QgdGFyZ2V0RmlsZVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsIC8vL1xuICAgICAgICBhYnNvbHV0ZVRhcmdldEZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldEZpbGVQYXRoKSxcbiAgICAgICAgdGFyZ2V0RmlsZUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCk7XG5cbiAgaWYgKHRhcmdldEZpbGVFeGlzdHMpIHtcbiAgICB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY3JlYXRlRmlsZShhYnNvbHV0ZVRhcmdldEZpbGVQYXRoLCAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRhcmdldEVudHJ5UGF0aCA9IG51bGw7XG4gICAgfVxuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGlyZWN0b3J5T3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHRhcmdldERpcmVjdG9yeVBhdGggPSB0YXJnZXRFbnRyeVBhdGgsICAvLy9cbiAgICAgICAgYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHRhcmdldERpcmVjdG9yeVBhdGgpLFxuICAgICAgICB0YXJnZXREaXJlY3RvcnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlVGFyZ2V0RGlyZWN0b3J5UGF0aCk7XG5cbiAgaWYgKHRhcmdldERpcmVjdG9yeUV4aXN0cykge1xuICAgIHRhcmdldEVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjcmVhdGVEaXJlY3RvcnkoYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoLCAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRhcmdldEVudHJ5UGF0aCA9IG51bGw7XG4gICAgfVxuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVQcm9qZWN0RW50cnkiLCJjcmVhdGVFbnRyeU9wZXJhdGlvbiIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJjb25jYXRlbmF0ZVBhdGhzIiwicGF0aFV0aWxpdGllcyIsImNoZWNrRW50cnlFeGlzdHMiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwicHJvamVjdHNEaXJlY3RvcnlQYXRoIiwianNvbiIsImNhbGxiYWNrIiwicGF0aE1hcHMiLCJmaXJzdFBhdGhNYXAiLCJwYXRoTWFwIiwic291cmNlRW50cnlQYXRoIiwidGFyZ2V0RW50cnlQYXRoIiwiZW50cnlEaXJlY3RvcnkiLCJ0YXJnZXRFbnRyeVBhdGhzIiwiY3JlYXRlRGlyZWN0b3J5T3BlcmF0aW9uIiwiY3JlYXRlRmlsZU9wZXJhdGlvbiIsInRhcmdldEZpbGVQYXRoIiwiYWJzb2x1dGVUYXJnZXRGaWxlUGF0aCIsInRhcmdldEZpbGVFeGlzdHMiLCJjcmVhdGVGaWxlIiwiZXJyb3IiLCJ0YXJnZXREaXJlY3RvcnlQYXRoIiwiYWJzb2x1dGVUYXJnZXREaXJlY3RvcnlQYXRoIiwidGFyZ2V0RGlyZWN0b3J5RXhpc3RzIiwiY3JlYXRlRGlyZWN0b3J5Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFVQSxPQWlCQztlQWpCdUJBOztJQW1CUkMsb0JBQW9CO2VBQXBCQTs7O3lCQTNCZTt1QkFFdUI7QUFFdEQsSUFBTSxBQUFFQyxRQUFVQyx5QkFBYyxDQUF4QkQsT0FDRixBQUFFRSxtQkFBcUJDLHdCQUFhLENBQWxDRCxrQkFDRixBQUFFRSxtQkFBcUJDLDhCQUFtQixDQUF4Q0Q7QUFFTyxTQUFTTixtQkFBbUJRLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRTtJQUNoRixJQUFNLEFBQUVDLFdBQWFGLEtBQWJFLFVBQ0ZDLGVBQWVWLE1BQU1TLFdBQ3JCRSxVQUFVRCxjQUNSRSxrQkFBcURELFFBQXJEQyxpQkFBaUJDLGtCQUFvQ0YsUUFBcENFLGlCQUFpQkMsaUJBQW1CSCxRQUFuQkc7SUFFMUNmLHFCQUFxQmEsaUJBQWlCQyxpQkFBaUJDLGdCQUFnQlIsdUJBQXVCLFNBQUNNLGlCQUFpQkMsaUJBQW9CO1FBQ2xJLElBQU1FLG1CQUFtQjtZQUNqQkY7U0FDRDtRQUVQLElBQU1OLFNBQU87WUFDWFEsa0JBQUFBO1FBQ0Y7UUFFQVAsU0FBU0Q7SUFDWDtBQUNGO0FBRU8sU0FBU1IscUJBQXFCYSxlQUFlLEVBQUVDLGVBQWUsRUFBRUMsY0FBYyxFQUFFUixxQkFBcUIsRUFBRUUsUUFBUSxFQUFFO0lBQ3RITSxpQkFDRUUseUJBQXlCSixpQkFBaUJDLGlCQUFpQlAsdUJBQXVCRSxZQUNoRlMsb0JBQW9CTCxpQkFBaUJDLGlCQUFpQlAsdUJBQXVCRSxTQUFTO0FBQzVGO0FBRUEsU0FBU1Msb0JBQW9CTCxlQUFlLEVBQUVDLGVBQWUsRUFBRVAscUJBQXFCLEVBQUVFLFFBQVEsRUFBRTtJQUM5RixJQUFNVSxpQkFBaUJMLGlCQUNqQk0seUJBQXlCakIsaUJBQWlCSSx1QkFBdUJZLGlCQUNqRUUsbUJBQW1CaEIsaUJBQWlCZTtJQUUxQyxJQUFJQyxrQkFBa0I7UUFDcEJQLGtCQUFrQixJQUFJO1FBRXRCTCxTQUFTSSxpQkFBaUJDO1FBRTFCO0lBQ0YsQ0FBQztJQUVEUSxJQUFBQSxtQkFBVSxFQUFDRix3QkFBd0IsU0FBQ0csT0FBVTtRQUM1QyxJQUFJQSxPQUFPO1lBQ1RULGtCQUFrQixJQUFJO1FBQ3hCLENBQUM7UUFFREwsU0FBU0ksaUJBQWlCQztJQUM1QjtBQUNGO0FBRUEsU0FBU0cseUJBQXlCSixlQUFlLEVBQUVDLGVBQWUsRUFBRVAscUJBQXFCLEVBQUVFLFFBQVEsRUFBRTtJQUNuRyxJQUFNZSxzQkFBc0JWLGlCQUN0QlcsOEJBQThCdEIsaUJBQWlCSSx1QkFBdUJpQixzQkFDdEVFLHdCQUF3QnJCLGlCQUFpQm9CO0lBRS9DLElBQUlDLHVCQUF1QjtRQUN6Qlosa0JBQWtCLElBQUk7UUFFdEJMLFNBQVNJLGlCQUFpQkM7UUFFMUI7SUFDRixDQUFDO0lBRURhLElBQUFBLGVBQWUsRUFBQ0YsNkJBQTZCLFNBQUNGLE9BQVU7UUFDdEQsSUFBSUEsT0FBTztZQUNUVCxrQkFBa0IsSUFBSTtRQUN4QixDQUFDO1FBRURMLFNBQVNJLGlCQUFpQkM7SUFDNUI7QUFDRiJ9