"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = removeProjectEntries;
var _necessary = require("necessary");
var _fileSystem = require("./utilities/fileSystem");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, targetPaths = [];
    (0, _pathMaps).asynchronousForEach(pathMaps, function(sourcePath, targetPath, directory, next, done, index) {
        removeEntry(sourcePath, targetPath, projectsDirectoryPath, function(targetPath1) {
            targetPaths.push(targetPath1);
            next();
        });
    }, function() {
        var json1 = targetPaths; ///
        callback(json1);
    });
}
function removeEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
    if (sourcePath === targetPath) {
        callback(targetPath);
    } else {
        var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath), entryExists = checkEntryExists(absoluteSourcePath);
        if (!entryExists) {
            targetPath = null;
            callback(targetPath);
        } else {
            var entryDirectory = isEntryDirectory(absoluteSourcePath);
            entryDirectory ? removeDirectory(sourcePath, projectsDirectoryPath, callback) : removeFile(sourcePath, projectsDirectoryPath, callback);
        }
    }
}
function removeFile(sourcePath, projectsDirectoryPath, callback) {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath);
    (0, _fileSystem).remove(absoluteSourcePath, function(error) {
        var success = !error, targetPath = success ? null : sourcePath;
        callback(targetPath);
    });
}
function removeDirectory(sourcePath, projectsDirectoryPath, callback) {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath), directoryEmpty = isDirectoryEmpty(absoluteSourcePath);
    if (!directoryEmpty) {
        var targetPath = sourcePath; ///
        callback(targetPath);
    } else {
        (0, _fileSystem).remove(absoluteSourcePath, function(error) {
            var success = !error, targetPath = success ? null : sourcePath;
            callback(targetPath);
        });
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2ZpbGVTeXN0ZW1cIjtcbmltcG9ydCB7IGFzeW5jaHJvbm91c0ZvckVhY2ggfSBmcm9tIFwiLi91dGlsaXRpZXMvcGF0aE1hcHNcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyBjaGVja0VudHJ5RXhpc3RzLCBpc0VudHJ5RGlyZWN0b3J5LCBpc0RpcmVjdG9yeUVtcHR5IH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVQcm9qZWN0RW50cmllcyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGpzb24sIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgcGF0aE1hcHMgfSA9IGpzb24sXG5cdFx0ICAgIHRhcmdldFBhdGhzID0gW107XG5cbiAgYXN5bmNocm9ub3VzRm9yRWFjaChcbiAgICBwYXRoTWFwcyxcbiAgICAoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgZGlyZWN0b3J5LCBuZXh0LCBkb25lLCBpbmRleCkgPT4ge1xuICAgICAgcmVtb3ZlRW50cnkoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCAodGFyZ2V0UGF0aCkgPT4ge1xuICAgICAgICB0YXJnZXRQYXRocy5wdXNoKHRhcmdldFBhdGgpO1xuXG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgIFx0Y29uc3QganNvbiA9IHRhcmdldFBhdGhzOyAvLy9cblxuICAgICAgY2FsbGJhY2soanNvbik7XG4gICAgfVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFbnRyeShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGlmIChzb3VyY2VQYXRoID09PSB0YXJnZXRQYXRoKSB7XG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYWJzb2x1dGVTb3VyY2VQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZVBhdGgpLFxuICAgICAgICAgIGVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVNvdXJjZVBhdGgpO1xuXG4gICAgaWYgKCFlbnRyeUV4aXN0cykge1xuICAgICAgdGFyZ2V0UGF0aCA9IG51bGw7XG5cbiAgICAgIGNhbGxiYWNrKHRhcmdldFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBlbnRyeURpcmVjdG9yeSA9IGlzRW50cnlEaXJlY3RvcnkoYWJzb2x1dGVTb3VyY2VQYXRoKTtcblxuICAgICAgZW50cnlEaXJlY3RvcnkgP1xuICAgICAgICByZW1vdmVEaXJlY3Rvcnkoc291cmNlUGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgICAgIHJlbW92ZUZpbGUoc291cmNlUGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpbGUoc291cmNlUGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlUGF0aCk7XG5cbiAgcmVtb3ZlKGFic29sdXRlU291cmNlUGF0aCwgKGVycm9yKSA9PiB7XG4gICAgY29uc3Qgc3VjY2VzcyA9ICFlcnJvciwgLy8vXG4gICAgICAgICAgdGFyZ2V0UGF0aCA9IHN1Y2Nlc3MgP1xuICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlUGF0aDtcblxuICAgIGNhbGxiYWNrKHRhcmdldFBhdGgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGlyZWN0b3J5KHNvdXJjZVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3QgYWJzb2x1dGVTb3VyY2VQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZVBhdGgpLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IGlzRGlyZWN0b3J5RW1wdHkoYWJzb2x1dGVTb3VyY2VQYXRoKTtcblxuICBpZiAoIWRpcmVjdG9yeUVtcHR5KSB7XG4gICAgY29uc3QgdGFyZ2V0UGF0aCA9IHNvdXJjZVBhdGg7ICAvLy9cblxuICAgIGNhbGxiYWNrKHRhcmdldFBhdGgpO1xuICB9IGVsc2Uge1xuICAgIHJlbW92ZShhYnNvbHV0ZVNvdXJjZVBhdGgsIChlcnJvcikgPT4ge1xuICAgICAgY29uc3Qgc3VjY2VzcyA9ICFlcnJvciwgLy8vXG4gICAgICAgICAgICB0YXJnZXRQYXRoID0gc3VjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VQYXRoO1xuXG4gICAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7a0JBVVksb0JBQW9CO0FBUk8sR0FBVyxDQUFYLFVBQVc7QUFFdkMsR0FBd0IsQ0FBeEIsV0FBd0I7QUFDWCxHQUFzQixDQUF0QixTQUFzQjtBQUUxRCxHQUFLLENBQUcsZ0JBQWdCLEdBTDJCLFVBQVcsZUFLdEQsZ0JBQWdCLEVBQ2hCLGdCQUFn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