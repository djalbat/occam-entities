"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = removeProjectEntries;
exports.removeEntry = removeEntry;
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, targetEntryPaths = [];
    (0, _pathMaps).asynchronousForEach(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        removeEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, function(targetEntryPath) {
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        var json = targetEntryPaths; ///
        callback(json);
    });
}
function removeEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    if (sourceEntryPath === targetEntryPath) {
        callback(targetEntryPath);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), entryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!entryExists) {
        targetEntryPath = null;
        callback(targetEntryPath);
        return;
    }
    var entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    entryDirectory ? removeDirectory(sourceEntryPath, projectsDirectoryPath, callback) : removeFile(sourceEntryPath, projectsDirectoryPath, callback);
}
function removeFile(sourceEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath);
    (0, _fsExtra).remove(absoluteSourceEntryPath, function(error) {
        var success = !error, targetEntryPath = success ? null : sourceEntryPath; ///
        callback(targetEntryPath);
    });
}
function removeDirectory(sourceEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), directoryEmpty = isDirectoryEmpty(absoluteSourceEntryPath);
    if (!directoryEmpty) {
        var targetEntryPath = sourceEntryPath; ///
        callback(targetEntryPath);
        return;
    }
    (0, _fsExtra).remove(absoluteSourceEntryPath, function(error) {
        var success = !error, targetEntryPath = success ? null : sourceEntryPath; ///
        callback(targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJuYW1lcyI6WyJyZW1vdmUiLCJwYXRoVXRpbGl0aWVzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImFzeW5jaHJvbm91c0ZvckVhY2giLCJjb25jYXRlbmF0ZVBhdGhzIiwiY2hlY2tFbnRyeUV4aXN0cyIsImlzRW50cnlEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeUVtcHR5IiwicmVtb3ZlUHJvamVjdEVudHJpZXMiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsInRhcmdldEVudHJ5UGF0aHMiLCJzb3VyY2VFbnRyeVBhdGgiLCJ0YXJnZXRFbnRyeVBhdGgiLCJlbnRyeURpcmVjdG9yeSIsIm5leHQiLCJkb25lIiwiaW5kZXgiLCJyZW1vdmVFbnRyeSIsInB1c2giLCJhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCIsImVudHJ5RXhpc3RzIiwicmVtb3ZlRGlyZWN0b3J5IiwicmVtb3ZlRmlsZSIsImVycm9yIiwic3VjY2VzcyIsImRpcmVjdG9yeUVtcHR5Il0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7O2tCQVVZLG9CQUFvQjtRQXFCNUIsV0FBVyxHQUFYLFdBQVc7QUE3QkosR0FBVSxDQUFWLFFBQVU7QUFDa0IsR0FBVyxDQUFYLFVBQVc7QUFFMUIsR0FBc0IsQ0FBdEIsU0FBc0I7QUFFMUQsR0FBSyxDQUFHLGdCQUFnQixHQUoyQixVQUFXLGVBSXRELGdCQUFnQixFQUNoQixnQkFBZ0IsR0FMMkIsVUFBVyxxQkFLdEQsZ0JBQWdCLEVBQUUsZ0JBQWdCLEdBTFMsVUFBVyxxQkFLcEMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEdBTFQsVUFBVyxxQkFLbEIsZ0JBQWdCO1NBRXBDLG9CQUFvQixDQUFDLHFCQUFxQixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUNuRixHQUFLLENBQUcsUUFBUSxHQUFLLElBQUksQ0FBakIsUUFBUSxFQUNaLGdCQUFnQixHQUFHLENBQUMsQ0FBQztRQVBTLFNBQXNCLHNCQVV0RCxRQUFRLEVBQ1IsUUFBUSxDQUFQLGVBQWUsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFLLENBQUM7UUFDeEUsV0FBVyxDQUFDLGVBQWUsRUFBRSxlQUFlLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxDQUFQLGVBQWUsRUFBSyxDQUFDO1lBQ3pGLGdCQUFnQixDQUFDLElBQUksQ0FBQyxlQUFlO1lBRXJDLElBQUk7UUFDTixDQUFDO0lBQ0gsQ0FBQyxFQUNELFFBQ0osR0FEVSxDQUFDO1FBQ04sR0FBSyxDQUFDLElBQUksR0FBRyxnQkFBZ0IsQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFFakMsUUFBUSxDQUFDLElBQUk7SUFDZixDQUFDO0FBRUwsQ0FBQztTQUVlLFdBQVcsQ0FBQyxlQUFlLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQzlGLEVBQUUsRUFBRSxlQUFlLEtBQUssZUFBZSxFQUFFLENBQUM7UUFDeEMsUUFBUSxDQUFDLGVBQWU7UUFFeEIsTUFBTTtJQUNSLENBQUM7SUFFRCxHQUFLLENBQUMsdUJBQXVCLEdBQUcsZ0JBQWdCLENBQUMscUJBQXFCLEVBQUUsZUFBZSxHQUNqRixXQUFXLEdBQUcsZ0JBQWdCLENBQUMsdUJBQXVCO0lBRTVELEVBQUUsR0FBRyxXQUFXLEVBQUUsQ0FBQztRQUNqQixlQUFlLEdBQUcsSUFBSTtRQUV0QixRQUFRLENBQUMsZUFBZTtRQUV4QixNQUFNO0lBQ1IsQ0FBQztJQUVELEdBQUssQ0FBQyxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsdUJBQXVCO0lBRS9ELGNBQWMsR0FDWixlQUFlLENBQUMsZUFBZSxFQUFFLHFCQUFxQixFQUFFLFFBQVEsSUFDOUQsVUFBVSxDQUFDLGVBQWUsRUFBRSxxQkFBcUIsRUFBRSxRQUFRO0FBQ2pFLENBQUM7U0FFUSxVQUFVLENBQUMsZUFBZSxFQUFFLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQ3JFLEdBQUssQ0FBQyx1QkFBdUIsR0FBRyxnQkFBZ0IsQ0FBQyxxQkFBcUIsRUFBRSxlQUFlO1FBdkRsRSxRQUFVLFNBeUR4Qix1QkFBdUIsRUFBRSxRQUFRLENBQVAsS0FBSyxFQUFLLENBQUM7UUFDMUMsR0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLEVBQ2hCLGVBQWUsR0FBRyxPQUFPLEdBQ0wsSUFBSSxHQUNGLGVBQWUsQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFFakQsUUFBUSxDQUFDLGVBQWU7SUFDMUIsQ0FBQztBQUNILENBQUM7U0FFUSxlQUFlLENBQUMsZUFBZSxFQUFFLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQzFFLEdBQUssQ0FBQyx1QkFBdUIsR0FBRyxnQkFBZ0IsQ0FBQyxxQkFBcUIsRUFBRSxlQUFlLEdBQ2pGLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyx1QkFBdUI7SUFFL0QsRUFBRSxHQUFHLGNBQWMsRUFBRSxDQUFDO1FBQ3BCLEdBQUssQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztRQUU3QyxRQUFRLENBQUMsZUFBZTtRQUV4QixNQUFNO0lBQ1IsQ0FBQztRQTdFb0IsUUFBVSxTQStFeEIsdUJBQXVCLEVBQUUsUUFBUSxDQUFQLEtBQUssRUFBSyxDQUFDO1FBQzFDLEdBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxFQUNoQixlQUFlLEdBQUcsT0FBTyxHQUNULElBQUksR0FDRixlQUFlLENBQUUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBRTVDLFFBQVEsQ0FBQyxlQUFlO0lBQzFCLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHJlbW92ZSB9IGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0IHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgYXN5bmNocm9ub3VzRm9yRWFjaCB9IGZyb20gXCIuL3V0aWxpdGllcy9wYXRoTWFwc1wiO1xuXG5jb25zdCB7IGNvbmNhdGVuYXRlUGF0aHMgfSA9IHBhdGhVdGlsaXRpZXMsXG4gICAgICB7IGNoZWNrRW50cnlFeGlzdHMsIGlzRW50cnlEaXJlY3RvcnksIGlzRGlyZWN0b3J5RW1wdHkgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZVByb2plY3RFbnRyaWVzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwganNvbiwgY2FsbGJhY2spIHtcbiAgY29uc3QgeyBwYXRoTWFwcyB9ID0ganNvbixcblx0XHQgICAgdGFyZ2V0RW50cnlQYXRocyA9IFtdO1xuXG4gIGFzeW5jaHJvbm91c0ZvckVhY2goXG4gICAgcGF0aE1hcHMsXG4gICAgKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBlbnRyeURpcmVjdG9yeSwgbmV4dCwgZG9uZSwgaW5kZXgpID0+IHtcbiAgICAgIHJlbW92ZUVudHJ5KHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsICh0YXJnZXRFbnRyeVBhdGgpID0+IHtcbiAgICAgICAgdGFyZ2V0RW50cnlQYXRocy5wdXNoKHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICAoKSA9PiB7XG4gICAgXHRjb25zdCBqc29uID0gdGFyZ2V0RW50cnlQYXRoczsgLy8vXG5cbiAgICAgIGNhbGxiYWNrKGpzb24pO1xuICAgIH1cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVudHJ5KHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGlmIChzb3VyY2VFbnRyeVBhdGggPT09IHRhcmdldEVudHJ5UGF0aCkge1xuICAgIGNhbGxiYWNrKHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBlbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghZW50cnlFeGlzdHMpIHtcbiAgICB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0RW50cnlQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGVudHJ5RGlyZWN0b3J5ID0gaXNFbnRyeURpcmVjdG9yeShhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCk7XG5cbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIHJlbW92ZURpcmVjdG9yeShzb3VyY2VFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIDpcbiAgICAgIHJlbW92ZUZpbGUoc291cmNlRW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlsZShzb3VyY2VFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3QgYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRW50cnlQYXRoKTtcblxuICByZW1vdmUoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgsIChlcnJvcikgPT4ge1xuICAgIGNvbnN0IHN1Y2Nlc3MgPSAhZXJyb3IsXG4gICAgICAgICAgdGFyZ2V0RW50cnlQYXRoID0gc3VjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlRW50cnlQYXRoOyAgLy8vXG5cbiAgICBjYWxsYmFjayh0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGlyZWN0b3J5KHNvdXJjZUVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IGlzRGlyZWN0b3J5RW1wdHkoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghZGlyZWN0b3J5RW1wdHkpIHtcbiAgICBjb25zdCB0YXJnZXRFbnRyeVBhdGggPSBzb3VyY2VFbnRyeVBhdGg7ICAvLy9cblxuICAgIGNhbGxiYWNrKHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICByZW1vdmUoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgsIChlcnJvcikgPT4ge1xuICAgIGNvbnN0IHN1Y2Nlc3MgPSAhZXJyb3IsXG4gICAgICAgICAgdGFyZ2V0RW50cnlQYXRoID0gc3VjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUVudHJ5UGF0aDsgLy8vXG5cbiAgICBjYWxsYmFjayh0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cbiJdfQ==