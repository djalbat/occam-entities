"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = removeProjectEntries;
exports.removeEntry = removeEntry;
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, sourceEntryPaths = [], targetEntryPaths = [];
    (0, _pathMaps).asynchronousForEach(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        removeEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            sourceEntryPaths.push(sourceEntryPath);
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        var json = {
            sourceEntryPaths: sourceEntryPaths,
            targetEntryPaths: targetEntryPaths
        };
        callback(json);
    });
}
function removeEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    if (sourceEntryPath === targetEntryPath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), entryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!entryExists) {
        var targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    entryDirectory ? removeDirectory(sourceEntryPath, projectsDirectoryPath, callback) : removeFile(sourceEntryPath, projectsDirectoryPath, callback);
}
function removeFile(sourceEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath);
    (0, _fsExtra).remove(absoluteSourceEntryPath, function(error) {
        var targetEntryPath = null;
        if (error) {
            var sourceEntryPath = null;
            callback(sourceEntryPath, targetEntryPath);
            return;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function removeDirectory(sourceEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), directoryEmpty = isDirectoryEmpty(absoluteSourceEntryPath);
    if (!directoryEmpty) {
        var sourceEntryPath = null, targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra).remove(absoluteSourceEntryPath, function(error) {
        var targetEntryPath = null;
        if (error) {
            var sourceEntryPath = null;
            callback(sourceEntryPath, targetEntryPath);
            return;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJuYW1lcyI6WyJyZW1vdmUiLCJwYXRoVXRpbGl0aWVzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImFzeW5jaHJvbm91c0ZvckVhY2giLCJjb25jYXRlbmF0ZVBhdGhzIiwiY2hlY2tFbnRyeUV4aXN0cyIsImlzRW50cnlEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeUVtcHR5IiwicmVtb3ZlUHJvamVjdEVudHJpZXMiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsInNvdXJjZUVudHJ5UGF0aHMiLCJ0YXJnZXRFbnRyeVBhdGhzIiwic291cmNlRW50cnlQYXRoIiwidGFyZ2V0RW50cnlQYXRoIiwiZW50cnlEaXJlY3RvcnkiLCJuZXh0IiwiZG9uZSIsImluZGV4IiwicmVtb3ZlRW50cnkiLCJwdXNoIiwiYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgiLCJlbnRyeUV4aXN0cyIsInJlbW92ZURpcmVjdG9yeSIsInJlbW92ZUZpbGUiLCJlcnJvciIsImRpcmVjdG9yeUVtcHR5Il0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7O2tCQVVZLG9CQUFvQjtRQTBCNUIsV0FBVyxHQUFYLFdBQVc7QUFsQ0osR0FBVSxDQUFWLFFBQVU7QUFDa0IsR0FBVyxDQUFYLFVBQVc7QUFFMUIsR0FBc0IsQ0FBdEIsU0FBc0I7QUFFMUQsR0FBSyxDQUFHLGdCQUFnQixHQUoyQixVQUFXLGVBSXRELGdCQUFnQixFQUNoQixnQkFBZ0IsR0FMMkIsVUFBVyxxQkFLdEQsZ0JBQWdCLEVBQUUsZ0JBQWdCLEdBTFMsVUFBVyxxQkFLcEMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEdBTFQsVUFBVyxxQkFLbEIsZ0JBQWdCO1NBRXBDLG9CQUFvQixDQUFDLHFCQUFxQixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUNuRixHQUFLLENBQUcsUUFBUSxHQUFLLElBQUksQ0FBakIsUUFBUSxF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QUMsZUFBZSxFQUFFLGVBQWU7WUFFekMsTUFBTTtRQUNSLENBQUM7UUFFRCxRQUFRLENBQUMsZUFBZSxFQUFFLGVBQWU7SUFDM0MsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBwYXRoVXRpbGl0aWVzLCBmaWxlU3lzdGVtVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBhc3luY2hyb25vdXNGb3JFYWNoIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3BhdGhNYXBzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgY2hlY2tFbnRyeUV4aXN0cywgaXNFbnRyeURpcmVjdG9yeSwgaXNEaXJlY3RvcnlFbXB0eSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uLFxuICAgICAgICBzb3VyY2VFbnRyeVBhdGhzID0gW10sXG5cdFx0ICAgIHRhcmdldEVudHJ5UGF0aHMgPSBbXTtcblxuICBhc3luY2hyb25vdXNGb3JFYWNoKFxuICAgIHBhdGhNYXBzLFxuICAgIChzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgZW50cnlEaXJlY3RvcnksIG5leHQsIGRvbmUsIGluZGV4KSA9PiB7XG4gICAgICByZW1vdmVFbnRyeShzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCAoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpID0+IHtcbiAgICAgICAgc291cmNlRW50cnlQYXRocy5wdXNoKHNvdXJjZUVudHJ5UGF0aCk7XG4gICAgICAgIHRhcmdldEVudHJ5UGF0aHMucHVzaCh0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgIFx0Y29uc3QganNvbiA9IHtcbiAgICAgICAgc291cmNlRW50cnlQYXRocyxcbiAgICAgICAgdGFyZ2V0RW50cnlQYXRoc1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhqc29uKTtcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFbnRyeShzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBpZiAoc291cmNlRW50cnlQYXRoID09PSB0YXJnZXRFbnRyeVBhdGgpIHtcbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBlbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghZW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlU291cmNlRW50cnlQYXRoKTtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgcmVtb3ZlRGlyZWN0b3J5KHNvdXJjZUVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgcmVtb3ZlRmlsZShzb3VyY2VFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaWxlKHNvdXJjZUVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpO1xuXG4gIHJlbW92ZShhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc3Qgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGlyZWN0b3J5KHNvdXJjZUVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IGlzRGlyZWN0b3J5RW1wdHkoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghZGlyZWN0b3J5RW1wdHkpIHtcbiAgICBjb25zdCBzb3VyY2VFbnRyeVBhdGggPSBudWxsLFxuICAgICAgICAgIHRhcmdldEVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICByZW1vdmUoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgsIChlcnJvcikgPT4ge1xuICAgIGNvbnN0IHRhcmdldEVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcbiAgfSk7XG59XG4iXX0=