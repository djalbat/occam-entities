'use strict';

var fsExtra = require('fs-extra'),
    necessary = require('necessary');

var pathMapsUtilities = require('./utilities/pathMaps');

var remove = fsExtra.remove,
    pathUtilities = necessary.pathUtilities,
    fileSystemUtilities = necessary.fileSystemUtilities,
    concatenatePaths = pathUtilities.concatenatePaths,
    asynchronousForEach = pathMapsUtilities.asynchronousForEach,
    checkEntryExists = fileSystemUtilities.checkEntryExists,
    isEntryDirectory = fileSystemUtilities.isEntryDirectory,
    isDirectoryEmpty = fileSystemUtilities.isDirectoryEmpty;


function removeProjectEntries(pathMaps, projectsDirectoryPath, callback) {
  var targetPaths = [];

  asynchronousForEach(pathMaps, function (sourcePath, targetPath, directory, next, done, index) {
    removeEntry(sourcePath, targetPath, projectsDirectoryPath, function (targetPath) {
      targetPaths.push(targetPath);

      next();
    });
  }, function () {
    callback(targetPaths);
  });
}

module.exports = removeProjectEntries;

function removeEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
  if (sourcePath === targetPath) {
    callback(targetPath);
  } else {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
        entryExists = checkEntryExists(absoluteSourcePath);

    if (!entryExists) {
      targetPath = null;

      callback(targetPath);
    } else {
      var entryDirectory = isEntryDirectory(absoluteSourcePath);

      entryDirectory ? removeDirectory(sourcePath, projectsDirectoryPath, callback) : removeFile(sourcePath, projectsDirectoryPath, callback);
    }
  }
}

function removeFile(sourcePath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath);

  remove(absoluteSourcePath, function (error) {
    var success = !error,
        ///
    targetPath = success ? null : sourcePath;

    callback(targetPath);
  });
}

function removeDirectory(sourcePath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
      directoryEmpty = isDirectoryEmpty(absoluteSourcePath);

  if (!directoryEmpty) {
    var targetPath = sourcePath;

    callback(targetPath);
  } else {
    remove(absoluteSourcePath, function (error) {
      var success = !error,
          ///
      targetPath = success ? null : sourcePath;

      callback(targetPath);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJuYW1lcyI6WyJmc0V4dHJhIiwicmVxdWlyZSIsIm5lY2Vzc2FyeSIsInBhdGhNYXBzVXRpbGl0aWVzIiwicmVtb3ZlIiwicGF0aFV0aWxpdGllcyIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJjb25jYXRlbmF0ZVBhdGhzIiwiYXN5bmNocm9ub3VzRm9yRWFjaCIsImNoZWNrRW50cnlFeGlzdHMiLCJpc0VudHJ5RGlyZWN0b3J5IiwiaXNEaXJlY3RvcnlFbXB0eSIsInJlbW92ZVByb2plY3RFbnRyaWVzIiwicGF0aE1hcHMiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJjYWxsYmFjayIsInRhcmdldFBhdGhzIiwic291cmNlUGF0aCIsInRhcmdldFBhdGgiLCJkaXJlY3RvcnkiLCJuZXh0IiwiZG9uZSIsImluZGV4IiwicmVtb3ZlRW50cnkiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyIsImFic29sdXRlU291cmNlUGF0aCIsImVudHJ5RXhpc3RzIiwiZW50cnlEaXJlY3RvcnkiLCJyZW1vdmVEaXJlY3RvcnkiLCJyZW1vdmVGaWxlIiwiZXJyb3IiLCJzdWNjZXNzIiwiZGlyZWN0b3J5RW1wdHkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFVBQVVDLFFBQVEsVUFBUixDQUFoQjtBQUFBLElBQ01DLFlBQVlELFFBQVEsV0FBUixDQURsQjs7QUFHQSxJQUFNRSxvQkFBb0JGLFFBQVEsc0JBQVIsQ0FBMUI7O0FBRU0sSUFBRUcsTUFBRixHQUFhSixPQUFiLENBQUVJLE1BQUY7QUFBQSxJQUNFQyxhQURGLEdBQ3lDSCxTQUR6QyxDQUNFRyxhQURGO0FBQUEsSUFDaUJDLG1CQURqQixHQUN5Q0osU0FEekMsQ0FDaUJJLG1CQURqQjtBQUFBLElBRUVDLGdCQUZGLEdBRXVCRixhQUZ2QixDQUVFRSxnQkFGRjtBQUFBLElBR0VDLG1CQUhGLEdBRzBCTCxpQkFIMUIsQ0FHRUssbUJBSEY7QUFBQSxJQUlFQyxnQkFKRixHQUkyREgsbUJBSjNELENBSUVHLGdCQUpGO0FBQUEsSUFJb0JDLGdCQUpwQixHQUkyREosbUJBSjNELENBSW9CSSxnQkFKcEI7QUFBQSxJQUlzQ0MsZ0JBSnRDLEdBSTJETCxtQkFKM0QsQ0FJc0NLLGdCQUp0Qzs7O0FBTU4sU0FBU0Msb0JBQVQsQ0FBOEJDLFFBQTlCLEVBQXdDQyxxQkFBeEMsRUFBK0RDLFFBQS9ELEVBQXlFO0FBQ3ZFLE1BQU1DLGNBQWMsRUFBcEI7O0FBRUFSLHNCQUNFSyxRQURGLEVBRUUsVUFBU0ksVUFBVCxFQUFxQkMsVUFBckIsRUFBaUNDLFNBQWpDLEVBQTRDQyxJQUE1QyxFQUFrREMsSUFBbEQsRUFBd0RDLEtBQXhELEVBQStEO0FBQzdEQyxnQkFBWU4sVUFBWixFQUF3QkMsVUFBeEIsRUFBb0NKLHFCQUFwQyxFQUEyRCxVQUFTSSxVQUFULEVBQXFCO0FBQzlFRixrQkFBWVEsSUFBWixDQUFpQk4sVUFBakI7O0FBRUFFO0FBQ0QsS0FKRDtBQUtELEdBUkgsRUFTRSxZQUFXO0FBQ1RMLGFBQVNDLFdBQVQ7QUFDRCxHQVhIO0FBYUQ7O0FBRURTLE9BQU9DLE9BQVAsR0FBaUJkLG9CQUFqQjs7QUFFQSxTQUFTVyxXQUFULENBQXFCTixVQUFyQixFQUFpQ0MsVUFBakMsRUFBNkNKLHFCQUE3QyxFQUFvRUMsUUFBcEUsRUFBOEU7QUFDNUUsTUFBSUUsZUFBZUMsVUFBbkIsRUFBK0I7QUFDN0JILGFBQVNHLFVBQVQ7QUFDRCxHQUZELE1BRU87QUFDTCxRQUFNUyxxQkFBcUJwQixpQkFBaUJPLHFCQUFqQixFQUF3Q0csVUFBeEMsQ0FBM0I7QUFBQSxRQUNNVyxjQUFjbkIsaUJBQWlCa0Isa0JBQWpCLENBRHBCOztBQUdBLFFBQUksQ0FBQ0MsV0FBTCxFQUFrQjtBQUNoQlYsbUJBQWEsSUFBYjs7QUFFQUgsZUFBU0csVUFBVDtBQUNELEtBSkQsTUFJTztBQUNMLFVBQU1XLGlCQUFpQm5CLGlCQUFpQmlCLGtCQUFqQixDQUF2Qjs7QUFFQUUsdUJBQ0VDLGdCQUFnQmIsVUFBaEIsRUFBNEJILHFCQUE1QixFQUFtREMsUUFBbkQsQ0FERixHQUVJZ0IsV0FBV2QsVUFBWCxFQUF1QkgscUJBQXZCLEVBQThDQyxRQUE5QyxDQUZKO0FBR0Q7QUFDRjtBQUNGOztBQUVELFNBQVNnQixVQUFULENBQW9CZCxVQUFwQixFQUFnQ0gscUJBQWhDLEVBQXVEQyxRQUF2RCxFQUFpRTtBQUMvRCxNQUFNWSxxQkFBcUJwQixpQkFBaUJPLHFCQUFqQixFQUF3Q0csVUFBeEMsQ0FBM0I7O0FBRUFiLFNBQU91QixrQkFBUCxFQUEyQixVQUFTSyxLQUFULEVBQWdCO0FBQ3pDLFFBQU1DLFVBQVUsQ0FBQ0QsS0FBakI7QUFBQSxRQUF3QjtBQUNsQmQsaUJBQWFlLFVBQ0UsSUFERixHQUVJaEIsVUFIdkI7O0FBS0FGLGFBQVNHLFVBQVQ7QUFDRCxHQVBEO0FBUUQ7O0FBRUQsU0FBU1ksZUFBVCxDQUF5QmIsVUFBekIsRUFBcUNILHFCQUFyQyxFQUE0REMsUUFBNUQsRUFBc0U7QUFDcEUsTUFBTVkscUJBQXFCcEIsaUJBQWlCTyxxQkFBakIsRUFBd0NHLFVBQXhDLENBQTNCO0FBQUEsTUFDTWlCLGlCQUFpQnZCLGlCQUFpQmdCLGtCQUFqQixDQUR2Qjs7QUFHQSxNQUFJLENBQUNPLGNBQUwsRUFBcUI7QUFDbkIsUUFBTWhCLGFBQWFELFVBQW5COztBQUVBRixhQUFTRyxVQUFUO0FBQ0QsR0FKRCxNQUlPO0FBQ0xkLFdBQU91QixrQkFBUCxFQUEyQixVQUFTSyxLQUFULEVBQWdCO0FBQ3pDLFVBQU1DLFVBQVUsQ0FBQ0QsS0FBakI7QUFBQSxVQUF3QjtBQUNsQmQsbUJBQWFlLFVBQ0csSUFESCxHQUVLaEIsVUFIeEI7O0FBS0FGLGVBQVNHLFVBQVQ7QUFDRCxLQVBEO0FBUUQ7QUFDRiIsImZpbGUiOiJyZW1vdmVQcm9qZWN0RW50cmllcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZnNFeHRyYSA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyksXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgcGF0aE1hcHNVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9wYXRoTWFwcycpO1xuXG5jb25zdCB7IHJlbW92ZSB9ID0gZnNFeHRyYSxcbiAgICAgIHsgcGF0aFV0aWxpdGllcywgZmlsZVN5c3RlbVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyBhc3luY2hyb25vdXNGb3JFYWNoIH0gPSBwYXRoTWFwc1V0aWxpdGllcyxcbiAgICAgIHsgY2hlY2tFbnRyeUV4aXN0cywgaXNFbnRyeURpcmVjdG9yeSwgaXNEaXJlY3RvcnlFbXB0eSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocGF0aE1hcHMsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3QgdGFyZ2V0UGF0aHMgPSBbXTtcblxuICBhc3luY2hyb25vdXNGb3JFYWNoKFxuICAgIHBhdGhNYXBzLFxuICAgIGZ1bmN0aW9uKHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIGRpcmVjdG9yeSwgbmV4dCwgZG9uZSwgaW5kZXgpIHtcbiAgICAgIHJlbW92ZUVudHJ5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgZnVuY3Rpb24odGFyZ2V0UGF0aCkge1xuICAgICAgICB0YXJnZXRQYXRocy5wdXNoKHRhcmdldFBhdGgpO1xuXG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICBjYWxsYmFjayh0YXJnZXRQYXRocyk7XG4gICAgfVxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZVByb2plY3RFbnRyaWVzO1xuXG5mdW5jdGlvbiByZW1vdmVFbnRyeShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGlmIChzb3VyY2VQYXRoID09PSB0YXJnZXRQYXRoKSB7XG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYWJzb2x1dGVTb3VyY2VQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZVBhdGgpLFxuICAgICAgICAgIGVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVNvdXJjZVBhdGgpO1xuXG4gICAgaWYgKCFlbnRyeUV4aXN0cykge1xuICAgICAgdGFyZ2V0UGF0aCA9IG51bGw7XG5cbiAgICAgIGNhbGxiYWNrKHRhcmdldFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBlbnRyeURpcmVjdG9yeSA9IGlzRW50cnlEaXJlY3RvcnkoYWJzb2x1dGVTb3VyY2VQYXRoKTtcblxuICAgICAgZW50cnlEaXJlY3RvcnkgP1xuICAgICAgICByZW1vdmVEaXJlY3Rvcnkoc291cmNlUGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgICAgIHJlbW92ZUZpbGUoc291cmNlUGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpbGUoc291cmNlUGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlUGF0aCk7XG5cbiAgcmVtb3ZlKGFic29sdXRlU291cmNlUGF0aCwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICBjb25zdCBzdWNjZXNzID0gIWVycm9yLCAvLy9cbiAgICAgICAgICB0YXJnZXRQYXRoID0gc3VjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VQYXRoO1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVEaXJlY3Rvcnkoc291cmNlUGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlUGF0aCksXG4gICAgICAgIGRpcmVjdG9yeUVtcHR5ID0gaXNEaXJlY3RvcnlFbXB0eShhYnNvbHV0ZVNvdXJjZVBhdGgpO1xuXG4gIGlmICghZGlyZWN0b3J5RW1wdHkpIHtcbiAgICBjb25zdCB0YXJnZXRQYXRoID0gc291cmNlUGF0aDtcblxuICAgIGNhbGxiYWNrKHRhcmdldFBhdGgpO1xuICB9IGVsc2Uge1xuICAgIHJlbW92ZShhYnNvbHV0ZVNvdXJjZVBhdGgsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBjb25zdCBzdWNjZXNzID0gIWVycm9yLCAvLy9cbiAgICAgICAgICAgIHRhcmdldFBhdGggPSBzdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVBhdGg7XG5cbiAgICAgIGNhbGxiYWNrKHRhcmdldFBhdGgpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=