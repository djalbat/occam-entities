"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = removeProjectEntries;
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, targetPaths = [];
    (0, _pathMaps).asynchronousForEach(pathMaps, function(sourcePath, targetPath, directory, next, done, index) {
        removeEntry(sourcePath, targetPath, projectsDirectoryPath, function(targetPath1) {
            targetPaths.push(targetPath1);
            next();
        });
    }, function() {
        var json1 = targetPaths; ///
        callback(json1);
    });
}
function removeEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
    if (sourcePath === targetPath) {
        callback(targetPath);
    } else {
        var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath), entryExists = checkEntryExists(absoluteSourcePath);
        if (!entryExists) {
            targetPath = null;
            callback(targetPath);
        } else {
            var entryDirectory = isEntryDirectory(absoluteSourcePath);
            entryDirectory ? removeDirectory(sourcePath, projectsDirectoryPath, callback) : removeFile(sourcePath, projectsDirectoryPath, callback);
        }
    }
}
function removeFile(sourcePath, projectsDirectoryPath, callback) {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath);
    (0, _fsExtra).remove(absoluteSourcePath, function(error) {
        var success = !error, targetPath = success ? null : sourcePath;
        callback(targetPath);
    });
}
function removeDirectory(sourcePath, projectsDirectoryPath, callback) {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath), directoryEmpty = isDirectoryEmpty(absoluteSourcePath);
    if (!directoryEmpty) {
        var targetPath = sourcePath;
        callback(targetPath);
    } else {
        (0, _fsExtra).remove(absoluteSourcePath, function(error) {
            var success = !error, targetPath = success ? null : sourcePath;
            callback(targetPath);
        });
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBwYXRoVXRpbGl0aWVzLCBmaWxlU3lzdGVtVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBhc3luY2hyb25vdXNGb3JFYWNoIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3BhdGhNYXBzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgY2hlY2tFbnRyeUV4aXN0cywgaXNFbnRyeURpcmVjdG9yeSwgaXNEaXJlY3RvcnlFbXB0eSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uLFxuXHRcdCAgICB0YXJnZXRQYXRocyA9IFtdO1xuXG4gIGFzeW5jaHJvbm91c0ZvckVhY2goXG4gICAgcGF0aE1hcHMsXG4gICAgKHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIGRpcmVjdG9yeSwgbmV4dCwgZG9uZSwgaW5kZXgpID0+IHtcbiAgICAgIHJlbW92ZUVudHJ5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgKHRhcmdldFBhdGgpID0+IHtcbiAgICAgICAgdGFyZ2V0UGF0aHMucHVzaCh0YXJnZXRQYXRoKTtcblxuICAgICAgICBuZXh0KCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgICgpID0+IHtcbiAgICBcdGNvbnN0IGpzb24gPSB0YXJnZXRQYXRoczsgLy8vXG5cbiAgICAgIGNhbGxiYWNrKGpzb24pO1xuICAgIH1cbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRW50cnkoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBpZiAoc291cmNlUGF0aCA9PT0gdGFyZ2V0UGF0aCkge1xuICAgIGNhbGxiYWNrKHRhcmdldFBhdGgpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGFic29sdXRlU291cmNlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VQYXRoKSxcbiAgICAgICAgICBlbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VQYXRoKTtcblxuICAgIGlmICghZW50cnlFeGlzdHMpIHtcbiAgICAgIHRhcmdldFBhdGggPSBudWxsO1xuXG4gICAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlU291cmNlUGF0aCk7XG5cbiAgICAgIGVudHJ5RGlyZWN0b3J5ID9cbiAgICAgICAgcmVtb3ZlRGlyZWN0b3J5KHNvdXJjZVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIDpcbiAgICAgICAgICByZW1vdmVGaWxlKHNvdXJjZVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVGaWxlKHNvdXJjZVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3QgYWJzb2x1dGVTb3VyY2VQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZVBhdGgpO1xuXG4gIHJlbW92ZShhYnNvbHV0ZVNvdXJjZVBhdGgsIChlcnJvcikgPT4ge1xuICAgIGNvbnN0IHN1Y2Nlc3MgPSAhZXJyb3IsIC8vL1xuICAgICAgICAgIHRhcmdldFBhdGggPSBzdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICBudWxsIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVBhdGg7XG5cbiAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURpcmVjdG9yeShzb3VyY2VQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFic29sdXRlU291cmNlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VQYXRoKSxcbiAgICAgICAgZGlyZWN0b3J5RW1wdHkgPSBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlU291cmNlUGF0aCk7XG5cbiAgaWYgKCFkaXJlY3RvcnlFbXB0eSkge1xuICAgIGNvbnN0IHRhcmdldFBhdGggPSBzb3VyY2VQYXRoO1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gIH0gZWxzZSB7XG4gICAgcmVtb3ZlKGFic29sdXRlU291cmNlUGF0aCwgKGVycm9yKSA9PiB7XG4gICAgICBjb25zdCBzdWNjZXNzID0gIWVycm9yLCAvLy9cbiAgICAgICAgICAgIHRhcmdldFBhdGggPSBzdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVBhdGg7XG5cbiAgICAgIGNhbGxiYWNrKHRhcmdldFBhdGgpO1xuICAgIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7OztrQkFVWSxvQkFBb0I7QUFSckIsR0FBVSxDQUFWLFFBQVU7QUFDa0IsR0FBVyxDQUFYLFVBQVc7QUFFMUIsR0FBc0IsQ0FBdEIsU0FBc0I7QUFFMUQsR0FBSyxDQUFHLGdCQUFnQixHQUoyQixVQUFXLGVBSXRELGdCQUFnQixFQUNoQixnQkFBZ0IsR0FMMkIsVUFBVyxxQkFLdEQs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