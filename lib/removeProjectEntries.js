"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = removeProjectEntries;
exports.removeEntry = removeEntry;
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, targetEntryPaths = [];
    (0, _pathMaps).asynchronousForEach(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        removeEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, function(targetEntryPath1) {
            targetEntryPaths.push(targetEntryPath1);
            next();
        });
    }, function() {
        var json1 = targetEntryPaths; ///
        callback(json1);
    });
}
function removeEntry(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    if (sourceEntryPath === targetEntryPath) {
        callback(targetEntryPath);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), entryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!entryExists) {
        targetEntryPath = null;
        callback(targetEntryPath);
        return;
    }
    var entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    entryDirectory ? removeDirectory(sourceEntryPath, projectsDirectoryPath, callback) : removeFile(sourceEntryPath, projectsDirectoryPath, callback);
}
function removeFile(sourceEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath);
    (0, _fsExtra).remove(absoluteSourceEntryPath, function(error) {
        var success = !error, targetEntryPath = success ? null : sourceEntryPath; ///
        callback(targetEntryPath);
    });
}
function removeDirectory(sourceEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), directoryEmpty = isDirectoryEmpty(absoluteSourceEntryPath);
    if (!directoryEmpty) {
        var targetEntryPath = sourceEntryPath; ///
        callback(targetEntryPath);
        return;
    }
    (0, _fsExtra).remove(absoluteSourceEntryPath, function(error) {
        var success = !error, targetEntryPath = success ? null : sourceEntryPath; ///
        callback(targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBwYXRoVXRpbGl0aWVzLCBmaWxlU3lzdGVtVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBhc3luY2hyb25vdXNGb3JFYWNoIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3BhdGhNYXBzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgY2hlY2tFbnRyeUV4aXN0cywgaXNFbnRyeURpcmVjdG9yeSwgaXNEaXJlY3RvcnlFbXB0eSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uLFxuXHRcdCAgICB0YXJnZXRFbnRyeVBhdGhzID0gW107XG5cbiAgYXN5bmNocm9ub3VzRm9yRWFjaChcbiAgICBwYXRoTWFwcyxcbiAgICAoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIGVudHJ5RGlyZWN0b3J5LCBuZXh0LCBkb25lLCBpbmRleCkgPT4ge1xuICAgICAgcmVtb3ZlRW50cnkoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgKHRhcmdldEVudHJ5UGF0aCkgPT4ge1xuICAgICAgICB0YXJnZXRFbnRyeVBhdGhzLnB1c2godGFyZ2V0RW50cnlQYXRoKTtcblxuICAgICAgICBuZXh0KCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgICgpID0+IHtcbiAgICBcdGNvbnN0IGpzb24gPSB0YXJnZXRFbnRyeVBhdGhzOyAvLy9cblxuICAgICAgY2FsbGJhY2soanNvbik7XG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRW50cnkoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgaWYgKHNvdXJjZUVudHJ5UGF0aCA9PT0gdGFyZ2V0RW50cnlQYXRoKSB7XG4gICAgY2FsbGJhY2sodGFyZ2V0RW50cnlQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFic29sdXRlU291cmNlRW50cnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUVudHJ5UGF0aCksXG4gICAgICAgIGVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCk7XG5cbiAgaWYgKCFlbnRyeUV4aXN0cykge1xuICAgIHRhcmdldEVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBjYWxsYmFjayh0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlU291cmNlRW50cnlQYXRoKTtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgcmVtb3ZlRGlyZWN0b3J5KHNvdXJjZUVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgcmVtb3ZlRmlsZShzb3VyY2VFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaWxlKHNvdXJjZUVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpO1xuXG4gIHJlbW92ZShhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgY29uc3Qgc3VjY2VzcyA9ICFlcnJvcixcbiAgICAgICAgICB0YXJnZXRFbnRyeVBhdGggPSBzdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VFbnRyeVBhdGg7ICAvLy9cblxuICAgIGNhbGxiYWNrKHRhcmdldEVudHJ5UGF0aCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVEaXJlY3Rvcnkoc291cmNlRW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFic29sdXRlU291cmNlRW50cnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUVudHJ5UGF0aCksXG4gICAgICAgIGRpcmVjdG9yeUVtcHR5ID0gaXNEaXJlY3RvcnlFbXB0eShhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCk7XG5cbiAgaWYgKCFkaXJlY3RvcnlFbXB0eSkge1xuICAgIGNvbnN0IHRhcmdldEVudHJ5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aDsgIC8vL1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0RW50cnlQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlbW92ZShhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgY29uc3Qgc3VjY2VzcyA9ICFlcnJvcixcbiAgICAgICAgICB0YXJnZXRFbnRyeVBhdGggPSBzdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlRW50cnlQYXRoOyAvLy9cblxuICAgIGNhbGxiYWNrKHRhcmdldEVudHJ5UGF0aCk7XG4gIH0pO1xu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