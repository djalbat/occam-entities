"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return removeProjectEntries;
    },
    removeEntryOperation: function() {
        return removeEntryOperation;
    }
});
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, sourceEntryPaths = [], targetEntryPaths = [], done = function() {
        var _$json = {
            sourceEntryPaths: sourceEntryPaths,
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    };
    (0, _pathMaps.asynchronousForEach)(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        removeEntryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            sourceEntryPaths.push(sourceEntryPath);
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, done);
}
function removeEntryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        sourceEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    entryDirectory ? removeDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : removeFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function removeFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath; ///
    if (sourceFilePath === targetFilePath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath);
    (0, _fsExtra.remove)(absoluteSourceFilePath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function removeDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath; ///
    if (sourceDirectoryPath === targetDirectoryPath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), sourceDirectoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!sourceDirectoryEmpty) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra.remove)(absoluteSourceDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBwYXRoVXRpbGl0aWVzLCBmaWxlU3lzdGVtVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBhc3luY2hyb25vdXNGb3JFYWNoIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3BhdGhNYXBzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgY2hlY2tFbnRyeUV4aXN0cywgaXNFbnRyeURpcmVjdG9yeSwgaXNEaXJlY3RvcnlFbXB0eSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uLFxuICAgICAgICBzb3VyY2VFbnRyeVBhdGhzID0gW10sXG5cdFx0ICAgIHRhcmdldEVudHJ5UGF0aHMgPSBbXSxcbiAgICAgICAgZG9uZSA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBqc29uID0ge1xuICAgICAgICAgICAgc291cmNlRW50cnlQYXRocyxcbiAgICAgICAgICAgIHRhcmdldEVudHJ5UGF0aHNcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY2FsbGJhY2soanNvbik7XG4gICAgICAgIH07XG5cbiAgYXN5bmNocm9ub3VzRm9yRWFjaChcbiAgICBwYXRoTWFwcyxcbiAgICAoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIGVudHJ5RGlyZWN0b3J5LCBuZXh0LCBkb25lLCBpbmRleCkgPT4ge1xuICAgICAgcmVtb3ZlRW50cnlPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKSA9PiB7XG4gICAgICAgIHNvdXJjZUVudHJ5UGF0aHMucHVzaChzb3VyY2VFbnRyeVBhdGgpO1xuICAgICAgICB0YXJnZXRFbnRyeVBhdGhzLnB1c2godGFyZ2V0RW50cnlQYXRoKTtcblxuICAgICAgICBuZXh0KCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRvbmVcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVudHJ5T3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFic29sdXRlU291cmNlRW50cnlQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIHNvdXJjZUVudHJ5UGF0aCksXG4gICAgICAgIHNvdXJjZUVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCk7XG5cbiAgaWYgKCFzb3VyY2VFbnRyeUV4aXN0cykge1xuICAgIHNvdXJjZUVudHJ5UGF0aCA9IG51bGw7XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBlbnRyeURpcmVjdG9yeSA9IGlzRW50cnlEaXJlY3RvcnkoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGVudHJ5RGlyZWN0b3J5ID9cbiAgICByZW1vdmVEaXJlY3RvcnlPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIDpcbiAgICAgIHJlbW92ZUZpbGVPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaWxlT3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHNvdXJjZUZpbGVQYXRoID0gc291cmNlRW50cnlQYXRoLCAgLy8vXG4gICAgICAgIHRhcmdldEZpbGVQYXRoID0gdGFyZ2V0RW50cnlQYXRoOyAgLy8vXG5cbiAgaWYgKHNvdXJjZUZpbGVQYXRoID09PSB0YXJnZXRGaWxlUGF0aCkge1xuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFic29sdXRlU291cmNlRmlsZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRmlsZVBhdGgpO1xuXG4gIHJlbW92ZShhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoLCAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRhcmdldEVudHJ5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aDsgIC8vL1xuICAgIH1cblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURpcmVjdG9yeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBzb3VyY2VEaXJlY3RvcnlQYXRoID0gc291cmNlRW50cnlQYXRoLCAvLy9cbiAgICAgICAgdGFyZ2V0RGlyZWN0b3J5UGF0aCA9IHRhcmdldEVudHJ5UGF0aDsgLy8vXG5cbiAgaWYgKHNvdXJjZURpcmVjdG9yeVBhdGggPT09IHRhcmdldERpcmVjdG9yeVBhdGgpIHtcbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlRGlyZWN0b3J5UGF0aCksXG4gICAgICAgIHNvdXJjZURpcmVjdG9yeUVtcHR5ID0gaXNEaXJlY3RvcnlFbXB0eShhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgpO1xuXG4gIGlmICghc291cmNlRGlyZWN0b3J5RW1wdHkpIHtcbiAgICB0YXJnZXRFbnRyeVBhdGggPSBzb3VyY2VFbnRyeVBhdGg7ICAvLy9cblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlbW92ZShhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgsIChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoID0gc291cmNlRW50cnlQYXRoOyAgLy8vXG4gICAgfVxuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJyZW1vdmVQcm9qZWN0RW50cmllcyIsInJlbW92ZUVudHJ5T3BlcmF0aW9uIiwiY29uY2F0ZW5hdGVQYXRocyIsInBhdGhVdGlsaXRpZXMiLCJjaGVja0VudHJ5RXhpc3RzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImlzRW50cnlEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeUVtcHR5IiwicHJvamVjdHNEaXJlY3RvcnlQYXRoIiwianNvbiIsImNhbGxiYWNrIiwicGF0aE1hcHMiLCJzb3VyY2VFbnRyeVBhdGhzIiwidGFyZ2V0RW50cnlQYXRocyIsImRvbmUiLCJhc3luY2hyb25vdXNGb3JFYWNoIiwic291cmNlRW50cnlQYXRoIiwidGFyZ2V0RW50cnlQYXRoIiwiZW50cnlEaXJlY3RvcnkiLCJuZXh0IiwiaW5kZXgiLCJwdXNoIiwiYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgiLCJzb3VyY2VFbnRyeUV4aXN0cyIsInJlbW92ZURpcmVjdG9yeU9wZXJhdGlvbiIsInJlbW92ZUZpbGVPcGVyYXRpb24iLCJzb3VyY2VGaWxlUGF0aCIsInRhcmdldEZpbGVQYXRoIiwiYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCIsInJlbW92ZSIsImVycm9yIiwic291cmNlRGlyZWN0b3J5UGF0aCIsInRhcmdldERpcmVjdG9yeVBhdGgiLCJhYnNvbHV0ZVNvdXJjZURpcmVjdG9yeVBhdGgiLCJzb3VyY2VEaXJlY3RvcnlFbXB0eSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBVUEsT0F5QkM7ZUF6QnVCQTs7SUEyQlJDLG9CQUFvQjtlQUFwQkE7Ozt1QkFuQ087eUJBQzRCO3dCQUVmO0FBRXBDLElBQU0sQUFBRUMsbUJBQXFCQyx3QkFBYSxDQUFsQ0Qsa0JBQ0FFLG1CQUF5REMsOEJBQW1CLENBQTVFRCxrQkFBa0JFLG1CQUF1Q0QsOEJBQW1CLENBQTFEQyxrQkFBa0JDLG1CQUFxQkYsOEJBQW1CLENBQXhDRTtBQUU3QixTQUFTUCxxQkFBcUJRLHFCQUFxQixFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRTtJQUNsRixJQUFNLEFBQUVDLFdBQWFGLEtBQWJFLFVBQ0ZDLG1CQUFtQixFQUFFLEVBQ3ZCQyxtQkFBbUIsRUFBRSxFQUNuQkMsT0FBTyxXQUFNO1FBQ1gsSUFBTUwsU0FBTztZQUNYRyxrQkFBQUE7WUFDQUMsa0JBQUFBO1FBQ0Y7UUFFQUgsU0FBU0Q7SUFDWDtJQUVOTSxJQUFBQSw2QkFBbUIsRUFDakJKLFVBQ0EsU0FBQ0ssaUJBQWlCQyxpQkFBaUJDLGdCQUFnQkMsTUFBTUwsTUFBTU0sT0FBVTtRQUN2RW5CLHFCQUFxQmUsaUJBQWlCQyxpQkFBaUJULHVCQUF1QixTQUFDUSxpQkFBaUJDLGlCQUFvQjtZQUNsSEwsaUJBQWlCUyxJQUFJLENBQUNMO1lBQ3RCSCxpQkFBaUJRLElBQUksQ0FBQ0o7WUFFdEJFO1FBQ0Y7SUFDRixHQUNBTDtBQUVKO0FBRU8sU0FBU2IscUJBQXFCZSxlQUFlLEVBQUVDLGVBQWUsRUFBRVQscUJBQXFCLEVBQUVFLFFBQVEsRUFBRTtJQUN0RyxJQUFNWSwwQkFBMEJwQixpQkFBaUJNLHVCQUF1QlEsa0JBQ2xFTyxvQkFBb0JuQixpQkFBaUJrQjtJQUUzQyxJQUFJLENBQUNDLG1CQUFtQjtRQUN0QlAsa0JBQWtCLElBQUk7UUFFdEJOLFNBQVNNLGlCQUFpQkM7UUFFMUI7SUFDRixDQUFDO0lBRUQsSUFBTUMsaUJBQWlCWixpQkFBaUJnQjtJQUV4Q0osaUJBQ0VNLHlCQUF5QlIsaUJBQWlCQyxpQkFBaUJULHVCQUF1QkUsWUFDaEZlLG9CQUFvQlQsaUJBQWlCQyxpQkFBaUJULHVCQUF1QkUsU0FBUztBQUM1RjtBQUVBLFNBQVNlLG9CQUFvQlQsZUFBZSxFQUFFQyxlQUFlLEVBQUVULHFCQUFxQixFQUFFRSxRQUFRLEVBQUU7SUFDOUYsSUFBTWdCLGlCQUFpQlYsaUJBQ2pCVyxpQkFBaUJWLGlCQUFrQixHQUFHO0lBRTVDLElBQUlTLG1CQUFtQkMsZ0JBQWdCO1FBQ3JDakIsU0FBU00saUJBQWlCQztRQUUxQjtJQUNGLENBQUM7SUFFRCxJQUFNVyx5QkFBeUIxQixpQkFBaUJNLHVCQUF1QmtCO0lBRXZFRyxJQUFBQSxlQUFNLEVBQUNELHdCQUF3QixTQUFDRSxPQUFVO1FBQ3hDLElBQUlBLE9BQU87WUFDVGIsa0JBQWtCRCxpQkFBa0IsR0FBRztRQUN6QyxDQUFDO1FBRUROLFNBQVNNLGlCQUFpQkM7SUFDNUI7QUFDRjtBQUVBLFNBQVNPLHlCQUF5QlIsZUFBZSxFQUFFQyxlQUFlLEVBQUVULHFCQUFxQixFQUFFRSxRQUFRLEVBQUU7SUFDbkcsSUFBTXFCLHNCQUFzQmYsaUJBQ3RCZ0Isc0JBQXNCZixpQkFBaUIsR0FBRztJQUVoRCxJQUFJYyx3QkFBd0JDLHFCQUFxQjtRQUMvQ3RCLFNBQVNNLGlCQUFpQkM7UUFFMUI7SUFDRixDQUFDO0lBRUQsSUFBTWdCLDhCQUE4Qi9CLGlCQUFpQk0sdUJBQXVCdUIsc0JBQ3RFRyx1QkFBdUIzQixpQkFBaUIwQjtJQUU5QyxJQUFJLENBQUNDLHNCQUFzQjtRQUN6QmpCLGtCQUFrQkQsaUJBQWtCLEdBQUc7UUFFdkNOLFNBQVNNLGlCQUFpQkM7UUFFMUI7SUFDRixDQUFDO0lBRURZLElBQUFBLGVBQU0sRUFBQ0ksNkJBQTZCLFNBQUNILE9BQVU7UUFDN0MsSUFBSUEsT0FBTztZQUNUYixrQkFBa0JELGlCQUFrQixHQUFHO1FBQ3pDLENBQUM7UUFFRE4sU0FBU00saUJBQWlCQztJQUM1QjtBQUNGIn0=