'use strict';

var fsExtra = require('fs-extra'),
    necessary = require('necessary');

var pathMapsUtilities = require('./utilities/pathMaps');

var remove = fsExtra.remove,
    pathUtilities = necessary.pathUtilities,
    fileSystemUtilities = necessary.fileSystemUtilities,
    concatenatePaths = pathUtilities.concatenatePaths,
    asynchronousForEach = pathMapsUtilities.asynchronousForEach,
    checkEntryExists = fileSystemUtilities.checkEntryExists,
    isEntryDirectory = fileSystemUtilities.isEntryDirectory,
    isDirectoryEmpty = fileSystemUtilities.isDirectoryEmpty;


function removeProjectEntries(projectsDirectoryPath, json, callback) {
  var pathMaps = json.pathMaps,
      targetPaths = [];


  asynchronousForEach(pathMaps, function (sourcePath, targetPath, directory, next, done, index) {
    removeEntry(sourcePath, targetPath, projectsDirectoryPath, function (targetPath) {
      targetPaths.push(targetPath);

      next();
    });
  }, function () {
    var json = targetPaths; ///

    callback(json);
  });
}

module.exports = removeProjectEntries;

function removeEntry(sourcePath, targetPath, projectsDirectoryPath, callback) {
  if (sourcePath === targetPath) {
    callback(targetPath);
  } else {
    var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
        entryExists = checkEntryExists(absoluteSourcePath);

    if (!entryExists) {
      targetPath = null;

      callback(targetPath);
    } else {
      var entryDirectory = isEntryDirectory(absoluteSourcePath);

      entryDirectory ? removeDirectory(sourcePath, projectsDirectoryPath, callback) : removeFile(sourcePath, projectsDirectoryPath, callback);
    }
  }
}

function removeFile(sourcePath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath);

  remove(absoluteSourcePath, function (error) {
    var success = !error,
        ///
    targetPath = success ? null : sourcePath;

    callback(targetPath);
  });
}

function removeDirectory(sourcePath, projectsDirectoryPath, callback) {
  var absoluteSourcePath = concatenatePaths(projectsDirectoryPath, sourcePath),
      directoryEmpty = isDirectoryEmpty(absoluteSourcePath);

  if (!directoryEmpty) {
    var targetPath = sourcePath;

    callback(targetPath);
  } else {
    remove(absoluteSourcePath, function (error) {
      var success = !error,
          ///
      targetPath = success ? null : sourcePath;

      callback(targetPath);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJuYW1lcyI6WyJmc0V4dHJhIiwicmVxdWlyZSIsIm5lY2Vzc2FyeSIsInBhdGhNYXBzVXRpbGl0aWVzIiwicmVtb3ZlIiwicGF0aFV0aWxpdGllcyIsImZpbGVTeXN0ZW1VdGlsaXRpZXMiLCJjb25jYXRlbmF0ZVBhdGhzIiwiYXN5bmNocm9ub3VzRm9yRWFjaCIsImNoZWNrRW50cnlFeGlzdHMiLCJpc0VudHJ5RGlyZWN0b3J5IiwiaXNEaXJlY3RvcnlFbXB0eSIsInJlbW92ZVByb2plY3RFbnRyaWVzIiwicHJvamVjdHNEaXJlY3RvcnlQYXRoIiwianNvbiIsImNhbGxiYWNrIiwicGF0aE1hcHMiLCJ0YXJnZXRQYXRocyIsInNvdXJjZVBhdGgiLCJ0YXJnZXRQYXRoIiwiZGlyZWN0b3J5IiwibmV4dCIsImRvbmUiLCJpbmRleCIsInJlbW92ZUVudHJ5IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJhYnNvbHV0ZVNvdXJjZVBhdGgiLCJlbnRyeUV4aXN0cyIsImVudHJ5RGlyZWN0b3J5IiwicmVtb3ZlRGlyZWN0b3J5IiwicmVtb3ZlRmlsZSIsImVycm9yIiwic3VjY2VzcyIsImRpcmVjdG9yeUVtcHR5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLFVBQVIsQ0FBaEI7QUFBQSxJQUNNQyxZQUFZRCxRQUFRLFdBQVIsQ0FEbEI7O0FBR0EsSUFBTUUsb0JBQW9CRixRQUFRLHNCQUFSLENBQTFCOztBQUVNLElBQUVHLE1BQUYsR0FBYUosT0FBYixDQUFFSSxNQUFGO0FBQUEsSUFDRUMsYUFERixHQUN5Q0gsU0FEekMsQ0FDRUcsYUFERjtBQUFBLElBQ2lCQyxtQkFEakIsR0FDeUNKLFNBRHpDLENBQ2lCSSxtQkFEakI7QUFBQSxJQUVFQyxnQkFGRixHQUV1QkYsYUFGdkIsQ0FFRUUsZ0JBRkY7QUFBQSxJQUdFQyxtQkFIRixHQUcwQkwsaUJBSDFCLENBR0VLLG1C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anMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZzRXh0cmEgPSByZXF1aXJlKCdmcy1leHRyYScpLFxuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHBhdGhNYXBzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcGF0aE1hcHMnKTtcblxuY29uc3QgeyByZW1vdmUgfSA9IGZzRXh0cmEsXG4gICAgICB7IHBhdGhVdGlsaXRpZXMsIGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgYXN5bmNocm9ub3VzRm9yRWFjaCB9ID0gcGF0aE1hcHNVdGlsaXRpZXMsXG4gICAgICB7IGNoZWNrRW50cnlFeGlzdHMsIGlzRW50cnlEaXJlY3RvcnksIGlzRGlyZWN0b3J5RW1wdHkgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIHJlbW92ZVByb2plY3RFbnRyaWVzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwganNvbiwgY2FsbGJhY2spIHtcbiAgY29uc3QgeyBwYXRoTWFwcyB9ID0ganNvbixcblx0XHQgICAgdGFyZ2V0UGF0aHMgPSBbXTtcblxuICBhc3luY2hyb25vdXNGb3JFYWNoKFxuICAgIHBhdGhNYXBzLFxuICAgIGZ1bmN0aW9uKHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIGRpcmVjdG9yeSwgbmV4dCwgZG9uZSwgaW5kZXgpIHtcbiAgICAgIHJlbW92ZUVudHJ5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgZnVuY3Rpb24odGFyZ2V0UGF0aCkge1xuICAgICAgICB0YXJnZXRQYXRocy5wdXNoKHRhcmdldFBhdGgpO1xuXG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZnVuY3Rpb24oKSB7XG4gICAgXHRjb25zdCBqc29uID0gdGFyZ2V0UGF0aHM7IC8vL1xuXG4gICAgICBjYWxsYmFjayhqc29uKTtcbiAgICB9XG4gICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVtb3ZlUHJvamVjdEVudHJpZXM7XG5cbmZ1bmN0aW9uIHJlbW92ZUVudHJ5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgaWYgKHNvdXJjZVBhdGggPT09IHRhcmdldFBhdGgpIHtcbiAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBhYnNvbHV0ZVNvdXJjZVBhdGggPSBjb25jYXRlbmF0ZVBhdGhzKHByb2plY3RzRGlyZWN0b3J5UGF0aCwgc291cmNlUGF0aCksXG4gICAgICAgICAgZW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGFic29sdXRlU291cmNlUGF0aCk7XG5cbiAgICBpZiAoIWVudHJ5RXhpc3RzKSB7XG4gICAgICB0YXJnZXRQYXRoID0gbnVsbDtcblxuICAgICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVudHJ5RGlyZWN0b3J5ID0gaXNFbnRyeURpcmVjdG9yeShhYnNvbHV0ZVNvdXJjZVBhdGgpO1xuXG4gICAgICBlbnRyeURpcmVjdG9yeSA/XG4gICAgICAgIHJlbW92ZURpcmVjdG9yeShzb3VyY2VQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSA6XG4gICAgICAgICAgcmVtb3ZlRmlsZShzb3VyY2VQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlsZShzb3VyY2VQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFic29sdXRlU291cmNlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VQYXRoKTtcblxuICByZW1vdmUoYWJzb2x1dGVTb3VyY2VQYXRoLCBmdW5jdGlvbihlcnJvcikge1xuICAgIGNvbnN0IHN1Y2Nlc3MgPSAhZXJyb3IsIC8vL1xuICAgICAgICAgIHRhcmdldFBhdGggPSBzdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICBudWxsIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVBhdGg7XG5cbiAgICBjYWxsYmFjayh0YXJnZXRQYXRoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURpcmVjdG9yeShzb3VyY2VQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFic29sdXRlU291cmNlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VQYXRoKSxcbiAgICAgICAgZGlyZWN0b3J5RW1wdHkgPSBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlU291cmNlUGF0aCk7XG5cbiAgaWYgKCFkaXJlY3RvcnlFbXB0eSkge1xuICAgIGNvbnN0IHRhcmdldFBhdGggPSBzb3VyY2VQYXRoO1xuXG4gICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gIH0gZWxzZSB7XG4gICAgcmVtb3ZlKGFic29sdXRlU291cmNlUGF0aCwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAhZXJyb3IsIC8vL1xuICAgICAgICAgICAgdGFyZ2V0UGF0aCA9IHN1Y2Nlc3MgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlUGF0aDtcblxuICAgICAgY2FsbGJhY2sodGFyZ2V0UGF0aCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==