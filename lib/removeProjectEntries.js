"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = removeProjectEntries;
exports.removeEntryOperation = removeEntryOperation;
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, sourceEntryPaths = [], targetEntryPaths = [];
    (0, _pathMaps).asynchronousForEach(pathMaps, function(sourceEntryPath1, targetEntryPath1, entryDirectory, next, done, index) {
        removeEntryOperation(sourceEntryPath1, targetEntryPath1, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            sourceEntryPaths.push(sourceEntryPath);
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, function() {
        var _$json = {
            sourceEntryPaths: sourceEntryPaths,
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    });
}
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function removeEntryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    if (sourceEntryPath === targetEntryPath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), entryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!entryExists) {
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    entryDirectory ? removeDirectory(sourceEntryPath, projectsDirectoryPath, callback) : removeFile(sourceEntryPath, projectsDirectoryPath, callback);
}
function removeFile(sourceEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath);
    (0, _fsExtra).remove(absoluteSourceEntryPath, function(error) {
        var targetEntryPath = null;
        if (error) {
            sourceEntryPath = null;
            callback(sourceEntryPath, targetEntryPath);
            return;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function removeDirectory(sourceEntryPath, projectsDirectoryPath, callback) {
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceDirectoryEmpty = isDirectoryEmpty(absoluteSourceEntryPath);
    if (!sourceDirectoryEmpty) {
        var targetEntryPath = null;
        sourceEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra).remove(absoluteSourceEntryPath, function(error) {
        var targetEntryPath = null;
        if (error) {
            sourceEntryPath = null;
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBwYXRoVXRpbGl0aWVzLCBmaWxlU3lzdGVtVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBhc3luY2hyb25vdXNGb3JFYWNoIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3BhdGhNYXBzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgY2hlY2tFbnRyeUV4aXN0cywgaXNFbnRyeURpcmVjdG9yeSwgaXNEaXJlY3RvcnlFbXB0eSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uLFxuICAgICAgICBzb3VyY2VFbnRyeVBhdGhzID0gW10sXG5cdFx0ICAgIHRhcmdldEVudHJ5UGF0aHMgPSBbXTtcblxuICBhc3luY2hyb25vdXNGb3JFYWNoKFxuICAgIHBhdGhNYXBzLFxuICAgIChzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgZW50cnlEaXJlY3RvcnksIG5leHQsIGRvbmUsIGluZGV4KSA9PiB7XG4gICAgICByZW1vdmVFbnRyeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCAoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpID0+IHtcbiAgICAgICAgc291cmNlRW50cnlQYXRocy5wdXNoKHNvdXJjZUVudHJ5UGF0aCk7XG4gICAgICAgIHRhcmdldEVudHJ5UGF0aHMucHVzaCh0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgIFx0Y29uc3QganNvbiA9IHtcbiAgICAgICAgc291cmNlRW50cnlQYXRocyxcbiAgICAgICAgdGFyZ2V0RW50cnlQYXRoc1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhqc29uKTtcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFbnRyeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBpZiAoc291cmNlRW50cnlQYXRoID09PSB0YXJnZXRFbnRyeVBhdGgpIHtcbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBlbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghZW50cnlFeGlzdHMpIHtcbiAgICB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlU291cmNlRW50cnlQYXRoKTtcblxuICBlbnRyeURpcmVjdG9yeSA/XG4gICAgcmVtb3ZlRGlyZWN0b3J5KHNvdXJjZUVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgcmVtb3ZlRmlsZShzb3VyY2VFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaWxlKHNvdXJjZUVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpO1xuXG4gIHJlbW92ZShhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGlyZWN0b3J5KHNvdXJjZUVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykge1xuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBzb3VyY2VEaXJlY3RvcnlFbXB0eSA9IGlzRGlyZWN0b3J5RW1wdHkoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghc291cmNlRGlyZWN0b3J5RW1wdHkpIHtcbiAgICBjb25zdCB0YXJnZXRFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgc291cmNlRW50cnlQYXRoID0gbnVsbDtcblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlbW92ZShhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgc291cmNlRW50cnlQYXRoID0gbnVsbDtcbiAgICB9XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbInJlbW92ZVByb2plY3RFbnRyaWVzIiwicmVtb3ZlRW50cnlPcGVyYXRpb24iLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsInNvdXJjZUVudHJ5UGF0aHMiLCJ0YXJnZXRFbnRyeVBhdGhzIiwiYXN5bmNocm9ub3VzRm9yRWFjaCIsInNvdXJjZUVudHJ5UGF0aCIsInRhcmdldEVudHJ5UGF0aCIsImVudHJ5RGlyZWN0b3J5IiwibmV4dCIsImRvbmUiLCJpbmRleCIsInB1c2giLCJjb25jYXRlbmF0ZVBhdGhzIiwicGF0aFV0aWxpdGllcyIsImNoZWNrRW50cnlFeGlzdHMiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwiaXNFbnRyeURpcmVjdG9yeSIsImlzRGlyZWN0b3J5RW1wdHkiLCJhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCIsImVudHJ5RXhpc3RzIiwicmVtb3ZlRGlyZWN0b3J5IiwicmVtb3ZlRmlsZSIsInJlbW92ZSIsImVycm9yIiwic291cmNlRGlyZWN0b3J5RW1wdHkiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztrQkFVV0Esb0JBQW9CO1FBMEI1QkMsb0JBQW9CLEdBQXBCQSxvQkFBb0I7QUFsQ2IsSUFBQSxRQUFVLFdBQVYsVUFBVSxDQUFBO0FBQ2tCLElBQUEsVUFBVyxXQUFYLFdBQVcsQ0FBQTtBQUUxQixJQUFBLFNBQXNCLFdBQXRCLHNCQUFzQixDQUFBO0FBSzNDLFNBQVNELG9CQUFvQixDQUFDRSxxQkFBcUIsRUFB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