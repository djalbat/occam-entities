"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return removeProjectEntries;
    },
    removeEntryOperation: function() {
        return removeEntryOperation;
    }
});
var _fsExtra = require("fs-extra");
var _necessary = require("necessary");
var _pathMaps = require("./utilities/pathMaps");
var concatenatePaths = _necessary.pathUtilities.concatenatePaths, checkEntryExists = _necessary.fileSystemUtilities.checkEntryExists, isEntryDirectory = _necessary.fileSystemUtilities.isEntryDirectory, isDirectoryEmpty = _necessary.fileSystemUtilities.isDirectoryEmpty;
function removeProjectEntries(projectsDirectoryPath, json, callback) {
    var pathMaps = json.pathMaps, sourceEntryPaths = [], targetEntryPaths = [], done = function() {
        var _$json = {
            sourceEntryPaths: sourceEntryPaths,
            targetEntryPaths: targetEntryPaths
        };
        callback(_$json);
    };
    (0, _pathMaps.asynchronousForEach)(pathMaps, function(sourceEntryPath, targetEntryPath, entryDirectory, next, done, index) {
        removeEntryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, function(sourceEntryPath, targetEntryPath) {
            sourceEntryPaths.push(sourceEntryPath);
            targetEntryPaths.push(targetEntryPath);
            next();
        });
    }, done);
}
function removeEntryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    if (sourceEntryPath === null) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceEntryPath = concatenatePaths(projectsDirectoryPath, sourceEntryPath), sourceEntryExists = checkEntryExists(absoluteSourceEntryPath);
    if (!sourceEntryExists) {
        sourceEntryPath = null;
        targetEntryPath = null;
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var entryDirectory = isEntryDirectory(absoluteSourceEntryPath);
    entryDirectory ? removeDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) : removeFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback);
}
function removeFileOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceFilePath = sourceEntryPath, targetFilePath = targetEntryPath; ///
    if (sourceFilePath === targetFilePath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceFilePath = concatenatePaths(projectsDirectoryPath, sourceFilePath);
    (0, _fsExtra.remove)(absoluteSourceFilePath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}
function removeDirectoryOperation(sourceEntryPath, targetEntryPath, projectsDirectoryPath, callback) {
    var sourceDirectoryPath = sourceEntryPath, targetDirectoryPath = targetEntryPath; ///
    if (sourceDirectoryPath === targetDirectoryPath) {
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    var absoluteSourceDirectoryPath = concatenatePaths(projectsDirectoryPath, sourceDirectoryPath), sourceDirectoryEmpty = isDirectoryEmpty(absoluteSourceDirectoryPath);
    if (!sourceDirectoryEmpty) {
        targetEntryPath = sourceEntryPath; ///
        callback(sourceEntryPath, targetEntryPath);
        return;
    }
    (0, _fsExtra.remove)(absoluteSourceDirectoryPath, function(error) {
        if (error) {
            targetEntryPath = sourceEntryPath; ///
        }
        callback(sourceEntryPath, targetEntryPath);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmVQcm9qZWN0RW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBwYXRoVXRpbGl0aWVzLCBmaWxlU3lzdGVtVXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBhc3luY2hyb25vdXNGb3JFYWNoIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3BhdGhNYXBzXCI7XG5cbmNvbnN0IHsgY29uY2F0ZW5hdGVQYXRocyB9ID0gcGF0aFV0aWxpdGllcyxcbiAgICAgIHsgY2hlY2tFbnRyeUV4aXN0cywgaXNFbnRyeURpcmVjdG9yeSwgaXNEaXJlY3RvcnlFbXB0eSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdEVudHJpZXMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBqc29uLCBjYWxsYmFjaykge1xuICBjb25zdCB7IHBhdGhNYXBzIH0gPSBqc29uLFxuICAgICAgICBzb3VyY2VFbnRyeVBhdGhzID0gW10sXG5cdFx0ICAgIHRhcmdldEVudHJ5UGF0aHMgPSBbXSxcbiAgICAgICAgZG9uZSA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBqc29uID0ge1xuICAgICAgICAgICAgc291cmNlRW50cnlQYXRocyxcbiAgICAgICAgICAgIHRhcmdldEVudHJ5UGF0aHNcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY2FsbGJhY2soanNvbik7XG4gICAgICAgIH07XG5cbiAgYXN5bmNocm9ub3VzRm9yRWFjaChcbiAgICBwYXRoTWFwcyxcbiAgICAoc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIGVudHJ5RGlyZWN0b3J5LCBuZXh0LCBkb25lLCBpbmRleCkgPT4ge1xuICAgICAgcmVtb3ZlRW50cnlPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKSA9PiB7XG4gICAgICAgIHNvdXJjZUVudHJ5UGF0aHMucHVzaChzb3VyY2VFbnRyeVBhdGgpO1xuICAgICAgICB0YXJnZXRFbnRyeVBhdGhzLnB1c2godGFyZ2V0RW50cnlQYXRoKTtcblxuICAgICAgICBuZXh0KCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRvbmVcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVudHJ5T3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGlmIChzb3VyY2VFbnRyeVBhdGggPT09IG51bGwpIHtcbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VFbnRyeVBhdGgpLFxuICAgICAgICBzb3VyY2VFbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVTb3VyY2VFbnRyeVBhdGgpO1xuXG4gIGlmICghc291cmNlRW50cnlFeGlzdHMpIHtcbiAgICBzb3VyY2VFbnRyeVBhdGggPSBudWxsO1xuXG4gICAgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcblxuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGVudHJ5RGlyZWN0b3J5ID0gaXNFbnRyeURpcmVjdG9yeShhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCk7XG5cbiAgZW50cnlEaXJlY3RvcnkgP1xuICAgIHJlbW92ZURpcmVjdG9yeU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjaykgOlxuICAgICAgcmVtb3ZlRmlsZU9wZXJhdGlvbihzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCwgcHJvamVjdHNEaXJlY3RvcnlQYXRoLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpbGVPcGVyYXRpb24oc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgsIHByb2plY3RzRGlyZWN0b3J5UGF0aCwgY2FsbGJhY2spIHtcbiAgY29uc3Qgc291cmNlRmlsZVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsICAvLy9cbiAgICAgICAgdGFyZ2V0RmlsZVBhdGggPSB0YXJnZXRFbnRyeVBhdGg7ICAvLy9cblxuICBpZiAoc291cmNlRmlsZVBhdGggPT09IHRhcmdldEZpbGVQYXRoKSB7XG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWJzb2x1dGVTb3VyY2VGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VGaWxlUGF0aCk7XG5cbiAgcmVtb3ZlKGFic29sdXRlU291cmNlRmlsZVBhdGgsIChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgdGFyZ2V0RW50cnlQYXRoID0gc291cmNlRW50cnlQYXRoOyAgLy8vXG4gICAgfVxuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGlyZWN0b3J5T3BlcmF0aW9uKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoLCBwcm9qZWN0c0RpcmVjdG9yeVBhdGgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHNvdXJjZURpcmVjdG9yeVBhdGggPSBzb3VyY2VFbnRyeVBhdGgsIC8vL1xuICAgICAgICB0YXJnZXREaXJlY3RvcnlQYXRoID0gdGFyZ2V0RW50cnlQYXRoOyAvLy9cblxuICBpZiAoc291cmNlRGlyZWN0b3J5UGF0aCA9PT0gdGFyZ2V0RGlyZWN0b3J5UGF0aCkge1xuICAgIGNhbGxiYWNrKHNvdXJjZUVudHJ5UGF0aCwgdGFyZ2V0RW50cnlQYXRoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMocHJvamVjdHNEaXJlY3RvcnlQYXRoLCBzb3VyY2VEaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgc291cmNlRGlyZWN0b3J5RW1wdHkgPSBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCk7XG5cbiAgaWYgKCFzb3VyY2VEaXJlY3RvcnlFbXB0eSkge1xuICAgIHRhcmdldEVudHJ5UGF0aCA9IHNvdXJjZUVudHJ5UGF0aDsgIC8vL1xuXG4gICAgY2FsbGJhY2soc291cmNlRW50cnlQYXRoLCB0YXJnZXRFbnRyeVBhdGgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmVtb3ZlKGFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCwgKGVycm9yKSA9PiB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB0YXJnZXRFbnRyeVBhdGggPSBzb3VyY2VFbnRyeVBhdGg7ICAvLy9cbiAgICB9XG5cbiAgICBjYWxsYmFjayhzb3VyY2VFbnRyeVBhdGgsIHRhcmdldEVudHJ5UGF0aCk7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbInJlbW92ZVByb2plY3RFbnRyaWVzIiwicmVtb3ZlRW50cnlPcGVyYXRpb24iLCJjb25jYXRlbmF0ZVBhdGhzIiwicGF0aFV0aWxpdGllcyIsImNoZWNrRW50cnlFeGlzdHMiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwiaXNFbnRyeURpcmVjdG9yeSIsImlzRGlyZWN0b3J5RW1wdHkiLCJwcm9qZWN0c0RpcmVjdG9yeVBhdGgiLCJqc29uIiwiY2FsbGJhY2siLCJwYXRoTWFwcyIsInNvdXJjZUVudHJ5UGF0aHMiLCJ0YXJnZXRFbnRyeVBhdGhzIiwiZG9uZSIsImFzeW5jaHJvbm91c0ZvckVhY2giLCJzb3VyY2VFbnRyeVBhdGgiLCJ0YXJnZXRFbnRyeVBhdGgiLCJlbnRyeURpcmVjdG9yeSIsIm5leHQiLCJpbmRleCIsInB1c2giLCJhYnNvbHV0ZVNvdXJjZUVudHJ5UGF0aCIsInNvdXJjZUVudHJ5RXhpc3RzIiwicmVtb3ZlRGlyZWN0b3J5T3BlcmF0aW9uIiwicmVtb3ZlRmlsZU9wZXJhdGlvbiIsInNvdXJjZUZpbGVQYXRoIiwidGFyZ2V0RmlsZVBhdGgiLCJhYnNvbHV0ZVNvdXJjZUZpbGVQYXRoIiwicmVtb3ZlIiwiZXJyb3IiLCJzb3VyY2VEaXJlY3RvcnlQYXRoIiwidGFyZ2V0RGlyZWN0b3J5UGF0aCIsImFic29sdXRlU291cmNlRGlyZWN0b3J5UGF0aCIsInNvdXJjZURpcmVjdG9yeUVtcHR5Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFVQSxPQXlCQztlQXpCdUJBOztJQTJCUkMsb0JBQW9CO2VBQXBCQTs7O3VCQW5DTzt5QkFDNEI7d0JBRWY7QUFFcEMsSUFBTSxBQUFFQyxtQkFBcUJDLHdCQUFhLENBQWxDRCxrQkFDQUUsbUJBQXlEQyw4QkFBbUIsQ0FBNUVELGtCQUFrQkUsbUJBQXVDRCw4QkFBbUIsQ0FBMURDLGtCQUFrQkMsbUJBQXFCRiw4QkFBbUIsQ0FBeENFO0FBRTdCLFNBQVNQLHFCQUFxQlEscUJBQXFCLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFO0lBQ2xGLElBQU0sQUFBRUMsV0FBYUYsS0FBYkUsVUFDRkMsbUJBQW1CLEVBQUUsRUFDdkJDLG1CQUFtQixFQUFFLEVBQ25CQyxPQUFPLFdBQU07UUFDWCxJQUFNTCxTQUFPO1lBQ1hHLGtCQUFBQTtZQUNBQyxrQkFBQUE7UUFDRjtRQUVBSCxTQUFTRDtJQUNYO0lBRU5NLElBQUFBLDZCQUFtQixFQUNqQkosVUFDQSxTQUFDSyxpQkFBaUJDLGlCQUFpQkMsZ0JBQWdCQyxNQUFNTCxNQUFNTSxPQUFVO1FBQ3ZFbkIscUJBQXFCZSxpQkFBaUJDLGlCQUFpQlQsdUJBQXVCLFNBQUNRLGlCQUFpQkMsaUJBQW9CO1lBQ2xITCxpQkFBaUJTLElBQUksQ0FBQ0w7WUFDdEJILGlCQUFpQlEsSUFBSSxDQUFDSjtZQUV0QkU7UUFDRjtJQUNGLEdBQ0FMO0FBRUo7QUFFTyxTQUFTYixxQkFBcUJlLGVBQWUsRUFBRUMsZUFBZSxFQUFFVCxxQkFBcUIsRUFBRUUsUUFBUSxFQUFFO0lBQ3RHLElBQUlNLG9CQUFvQixJQUFJLEVBQUU7UUFDNUJOLFNBQVNNLGlCQUFpQkM7UUFFMUI7SUFDRixDQUFDO0lBRUQsSUFBTUssMEJBQTBCcEIsaUJBQWlCTSx1QkFBdUJRLGtCQUNsRU8sb0JBQW9CbkIsaUJBQWlCa0I7SUFFM0MsSUFBSSxDQUFDQyxtQkFBbUI7UUFDdEJQLGtCQUFrQixJQUFJO1FBRXRCQyxrQkFBa0IsSUFBSTtRQUV0QlAsU0FBU00saUJBQWlCQztRQUUxQjtJQUNGLENBQUM7SUFFRCxJQUFNQyxpQkFBaUJaLGlCQUFpQmdCO0lBRXhDSixpQkFDRU0seUJBQXlCUixpQkFBaUJDLGlCQUFpQlQsdUJBQXVCRSxZQUNoRmUsb0JBQW9CVCxpQkFBaUJDLGlCQUFpQlQsdUJBQXVCRSxTQUFTO0FBQzVGO0FBRUEsU0FBU2Usb0JBQW9CVCxlQUFlLEVBQUVDLGVBQWUsRUFBRVQscUJBQXFCLEVBQUVFLFFBQVEsRUFBRTtJQUM5RixJQUFNZ0IsaUJBQWlCVixpQkFDakJXLGlCQUFpQlYsaUJBQWtCLEdBQUc7SUFFNUMsSUFBSVMsbUJBQW1CQyxnQkFBZ0I7UUFDckNqQixTQUFTTSxpQkFBaUJDO1FBRTFCO0lBQ0YsQ0FBQztJQUVELElBQU1XLHlCQUF5QjFCLGlCQUFpQk0sdUJBQXVCa0I7SUFFdkVHLElBQUFBLGVBQU0sRUFBQ0Qsd0JBQXdCLFNBQUNFLE9BQVU7UUFDeEMsSUFBSUEsT0FBTztZQUNUYixrQkFBa0JELGlCQUFrQixHQUFHO1FBQ3pDLENBQUM7UUFFRE4sU0FBU00saUJBQWlCQztJQUM1QjtBQUNGO0FBRUEsU0FBU08seUJBQXlCUixlQUFlLEVBQUVDLGVBQWUsRUFBRVQscUJBQXFCLEVBQUVFLFFBQVEsRUFBRTtJQUNuRyxJQUFNcUIsc0JBQXNCZixpQkFDdEJnQixzQkFBc0JmLGlCQUFpQixHQUFHO0lBRWhELElBQUljLHdCQUF3QkMscUJBQXFCO1FBQy9DdEIsU0FBU00saUJBQWlCQztRQUUxQjtJQUNGLENBQUM7SUFFRCxJQUFNZ0IsOEJBQThCL0IsaUJBQWlCTSx1QkFBdUJ1QixzQkFDdEVHLHVCQUF1QjNCLGlCQUFpQjBCO0lBRTlDLElBQUksQ0FBQ0Msc0JBQXNCO1FBQ3pCakIsa0JBQWtCRCxpQkFBa0IsR0FBRztRQUV2Q04sU0FBU00saUJBQWlCQztRQUUxQjtJQUNGLENBQUM7SUFFRFksSUFBQUEsZUFBTSxFQUFDSSw2QkFBNkIsU0FBQ0gsT0FBVTtRQUM3QyxJQUFJQSxPQUFPO1lBQ1RiLGtCQUFrQkQsaUJBQWtCLEdBQUc7UUFDekMsQ0FBQztRQUVETixTQUFTTSxpQkFBaUJDO0lBQzVCO0FBQ0YifQ==